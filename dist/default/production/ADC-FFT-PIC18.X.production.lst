

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Dec 08 10:57:02 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	mediumconst
    45  0076BE                     __pmediumconst:
    46                           	opt stack 0
    47  0076BE  00                 	db	0
    48  0076BF                     _Sinewave:
    49                           	opt stack 0
    50  0076BF  0000               	dw	0
    51  0076C1  00C9               	dw	201
    52  0076C3  0192               	dw	402
    53  0076C5  025B               	dw	603
    54  0076C7  0324               	dw	804
    55  0076C9  03ED               	dw	1005
    56  0076CB  04B6               	dw	1206
    57  0076CD  057E               	dw	1406
    58  0076CF  0647               	dw	1607
    59  0076D1  0710               	dw	1808
    60  0076D3  07D9               	dw	2009
    61  0076D5  08A1               	dw	2209
    62  0076D7  096A               	dw	2410
    63  0076D9  0A32               	dw	2610
    64  0076DB  0AFB               	dw	2811
    65  0076DD  0BC3               	dw	3011
    66  0076DF  0C8B               	dw	3211
    67  0076E1  0D53               	dw	3411
    68  0076E3  0E1B               	dw	3611
    69  0076E5  0EE3               	dw	3811
    70  0076E7  0FAB               	dw	4011
    71  0076E9  1072               	dw	4210
    72  0076EB  1139               	dw	4409
    73  0076ED  1200               	dw	4608
    74  0076EF  12C7               	dw	4807
    75  0076F1  138E               	dw	5006
    76  0076F3  1455               	dw	5205
    77  0076F5  151B               	dw	5403
    78  0076F7  15E1               	dw	5601
    79  0076F9  16A7               	dw	5799
    80  0076FB  176D               	dw	5997
    81  0076FD  1833               	dw	6195
    82  0076FF  18F8               	dw	6392
    83  007701  19BD               	dw	6589
    84  007703  1A82               	dw	6786
    85  007705  1B46               	dw	6982
    86  007707  1C0B               	dw	7179
    87  007709  1CCF               	dw	7375
    88  00770B  1D93               	dw	7571
    89  00770D  1E56               	dw	7766
    90  00770F  1F19               	dw	7961
    91  007711  1FDC               	dw	8156
    92  007713  209F               	dw	8351
    93  007715  2161               	dw	8545
    94  007717  2223               	dw	8739
    95  007719  22E4               	dw	8932
    96  00771B  23A6               	dw	9126
    97  00771D  2467               	dw	9319
    98  00771F  2527               	dw	9511
    99  007721  25E7               	dw	9703
   100  007723  26A7               	dw	9895
   101  007725  2767               	dw	10087
   102  007727  2826               	dw	10278
   103  007729  28E5               	dw	10469
   104  00772B  29A3               	dw	10659
   105  00772D  2A61               	dw	10849
   106  00772F  2B1E               	dw	11038
   107  007731  2BDB               	dw	11227
   108  007733  2C98               	dw	11416
   109  007735  2D54               	dw	11604
   110  007737  2E10               	dw	11792
   111  007739  2ECC               	dw	11980
   112  00773B  2F86               	dw	12166
   113  00773D  3041               	dw	12353
   114  00773F  30FB               	dw	12539
   115  007741  31B4               	dw	12724
   116  007743  326D               	dw	12909
   117  007745  3326               	dw	13094
   118  007747  33DE               	dw	13278
   119  007749  3496               	dw	13462
   120  00774B  354D               	dw	13645
   121  00774D  3603               	dw	13827
   122  00774F  36B9               	dw	14009
   123  007751  376F               	dw	14191
   124  007753  3824               	dw	14372
   125  007755  38D8               	dw	14552
   126  007757  398C               	dw	14732
   127  007759  3A3F               	dw	14911
   128  00775B  3AF2               	dw	15090
   129  00775D  3BA4               	dw	15268
   130  00775F  3C56               	dw	15446
   131  007761  3D07               	dw	15623
   132  007763  3DB7               	dw	15799
   133  007765  3E67               	dw	15975
   134  007767  3F16               	dw	16150
   135  007769  3FC5               	dw	16325
   136  00776B  4073               	dw	16499
   137  00776D  4120               	dw	16672
   138  00776F  41CD               	dw	16845
   139  007771  4279               	dw	17017
   140  007773  4325               	dw	17189
   141  007775  43D0               	dw	17360
   142  007777  447A               	dw	17530
   143  007779  4523               	dw	17699
   144  00777B  45CC               	dw	17868
   145  00777D  4674               	dw	18036
   146  00777F  471C               	dw	18204
   147  007781  47C3               	dw	18371
   148  007783  4869               	dw	18537
   149  007785  490E               	dw	18702
   150  007787  49B3               	dw	18867
   151  007789  4A57               	dw	19031
   152  00778B  4AFA               	dw	19194
   153  00778D  4B9D               	dw	19357
   154  00778F  4C3F               	dw	19519
   155  007791  4CE0               	dw	19680
   156  007793  4D80               	dw	19840
   157  007795  4E20               	dw	20000
   158  007797  4EBF               	dw	20159
   159  007799  4F5D               	dw	20317
   160  00779B  4FFA               	dw	20474
   161  00779D  5097               	dw	20631
   162  00779F  5133               	dw	20787
   163  0077A1  51CE               	dw	20942
   164  0077A3  5268               	dw	21096
   165  0077A5  5301               	dw	21249
   166  0077A7  539A               	dw	21402
   167  0077A9  5432               	dw	21554
   168  0077AB  54C9               	dw	21705
   169  0077AD  555F               	dw	21855
   170  0077AF  55F4               	dw	22004
   171  0077B1  5689               	dw	22153
   172  0077B3  571D               	dw	22301
   173  0077B5  57B0               	dw	22448
   174  0077B7  5842               	dw	22594
   175  0077B9  58D3               	dw	22739
   176  0077BB  5963               	dw	22883
   177  0077BD  59F3               	dw	23027
   178  0077BF  5A81               	dw	23169
   179  0077C1  5B0F               	dw	23311
   180  0077C3  5B9C               	dw	23452
   181  0077C5  5C28               	dw	23592
   182  0077C7  5CB3               	dw	23731
   183  0077C9  5D3D               	dw	23869
   184  0077CB  5DC6               	dw	24006
   185  0077CD  5E4F               	dw	24143
   186  0077CF  5ED6               	dw	24278
   187  0077D1  5F5D               	dw	24413
   188  0077D3  5FE2               	dw	24546
   189  0077D5  6067               	dw	24679
   190  0077D7  60EB               	dw	24811
   191  0077D9  616E               	dw	24942
   192  0077DB  61F0               	dw	25072
   193  0077DD  6271               	dw	25201
   194  0077DF  62F1               	dw	25329
   195  0077E1  6370               	dw	25456
   196  0077E3  63EE               	dw	25582
   197  0077E5  646B               	dw	25707
   198  0077E7  64E7               	dw	25831
   199  0077E9  6562               	dw	25954
   200  0077EB  65DD               	dw	26077
   201  0077ED  6656               	dw	26198
   202  0077EF  66CE               	dw	26318
   203  0077F1  6745               	dw	26437
   204  0077F3  67BC               	dw	26556
   205  0077F5  6831               	dw	26673
   206  0077F7  68A5               	dw	26789
   207  0077F9  6919               	dw	26905
   208  0077FB  698B               	dw	27019
   209  0077FD  69FC               	dw	27132
   210  0077FF  6A6C               	dw	27244
   211  007801  6ADB               	dw	27355
   212  007803  6B4A               	dw	27466
   213  007805  6BB7               	dw	27575
   214  007807  6C23               	dw	27683
   215  007809  6C8E               	dw	27790
   216  00780B  6CF8               	dw	27896
   217  00780D  6D61               	dw	28001
   218  00780F  6DC9               	dw	28105
   219  007811  6E30               	dw	28208
   220  007813  6E95               	dw	28309
   221  007815  6EFA               	dw	28410
   222  007817  6F5E               	dw	28510
   223  007819  6FC0               	dw	28608
   224  00781B  7022               	dw	28706
   225  00781D  7082               	dw	28802
   226  00781F  70E1               	dw	28897
   227  007821  7140               	dw	28992
   228  007823  719D               	dw	29085
   229  007825  71F9               	dw	29177
   230  007827  7254               	dw	29268
   231  007829  72AE               	dw	29358
   232  00782B  7306               	dw	29446
   233  00782D  735E               	dw	29534
   234  00782F  73B5               	dw	29621
   235  007831  740A               	dw	29706
   236  007833  745E               	dw	29790
   237  007835  74B1               	dw	29873
   238  007837  7503               	dw	29955
   239  007839  7554               	dw	30036
   240  00783B  75A4               	dw	30116
   241  00783D  75F3               	dw	30195
   242  00783F  7640               	dw	30272
   243  007841  768D               	dw	30349
   244  007843  76D8               	dw	30424
   245  007845  7722               	dw	30498
   246  007847  776B               	dw	30571
   247  007849  77B3               	dw	30643
   248  00784B  77F9               	dw	30713
   249  00784D  783F               	dw	30783
   250  00784F  7883               	dw	30851
   251  007851  78C6               	dw	30918
   252  007853  7908               	dw	30984
   253  007855  7949               	dw	31049
   254  007857  7989               	dw	31113
   255  007859  79C7               	dw	31175
   256  00785B  7A04               	dw	31236
   257  00785D  7A41               	dw	31297
   258  00785F  7A7C               	dw	31356
   259  007861  7AB5               	dw	31413
   260  007863  7AEE               	dw	31470
   261  007865  7B25               	dw	31525
   262  007867  7B5C               	dw	31580
   263  007869  7B91               	dw	31633
   264  00786B  7BC4               	dw	31684
   265  00786D  7BF7               	dw	31735
   266  00786F  7C29               	dw	31785
   267  007871  7C59               	dw	31833
   268  007873  7C88               	dw	31880
   269  007875  7CB6               	dw	31926
   270  007877  7CE2               	dw	31970
   271  007879  7D0E               	dw	32014
   272  00787B  7D38               	dw	32056
   273  00787D  7D61               	dw	32097
   274  00787F  7D89               	dw	32137
   275  007881  7DB0               	dw	32176
   276  007883  7DD5               	dw	32213
   277  007885  7DF9               	dw	32249
   278  007887  7E1C               	dw	32284
   279  007889  7E3E               	dw	32318
   280  00788B  7E5E               	dw	32350
   281  00788D  7E7E               	dw	32382
   282  00788F  7E9C               	dw	32412
   283  007891  7EB9               	dw	32441
   284  007893  7ED4               	dw	32468
   285  007895  7EEF               	dw	32495
   286  007897  7F08               	dw	32520
   287  007899  7F20               	dw	32544
   288  00789B  7F37               	dw	32567
   289  00789D  7F4C               	dw	32588
   290  00789F  7F61               	dw	32609
   291  0078A1  7F74               	dw	32628
   292  0078A3  7F86               	dw	32646
   293  0078A5  7F96               	dw	32662
   294  0078A7  7FA6               	dw	32678
   295  0078A9  7FB4               	dw	32692
   296  0078AB  7FC1               	dw	32705
   297  0078AD  7FCD               	dw	32717
   298  0078AF  7FD7               	dw	32727
   299  0078B1  7FE0               	dw	32736
   300  0078B3  7FE8               	dw	32744
   301  0078B5  7FEF               	dw	32751
   302  0078B7  7FF5               	dw	32757
   303  0078B9  7FF9               	dw	32761
   304  0078BB  7FFC               	dw	32764
   305  0078BD  7FFE               	dw	32766
   306  0078BF  7FFF               	dw	32767
   307  0078C1  7FFE               	dw	32766
   308  0078C3  7FFC               	dw	32764
   309  0078C5  7FF9               	dw	32761
   310  0078C7  7FF5               	dw	32757
   311  0078C9  7FEF               	dw	32751
   312  0078CB  7FE8               	dw	32744
   313  0078CD  7FE0               	dw	32736
   314  0078CF  7FD7               	dw	32727
   315  0078D1  7FCD               	dw	32717
   316  0078D3  7FC1               	dw	32705
   317  0078D5  7FB4               	dw	32692
   318  0078D7  7FA6               	dw	32678
   319  0078D9  7F96               	dw	32662
   320  0078DB  7F86               	dw	32646
   321  0078DD  7F74               	dw	32628
   322  0078DF  7F61               	dw	32609
   323  0078E1  7F4C               	dw	32588
   324  0078E3  7F37               	dw	32567
   325  0078E5  7F20               	dw	32544
   326  0078E7  7F08               	dw	32520
   327  0078E9  7EEF               	dw	32495
   328  0078EB  7ED4               	dw	32468
   329  0078ED  7EB9               	dw	32441
   330  0078EF  7E9C               	dw	32412
   331  0078F1  7E7E               	dw	32382
   332  0078F3  7E5E               	dw	32350
   333  0078F5  7E3E               	dw	32318
   334  0078F7  7E1C               	dw	32284
   335  0078F9  7DF9               	dw	32249
   336  0078FB  7DD5               	dw	32213
   337  0078FD  7DB0               	dw	32176
   338  0078FF  7D89               	dw	32137
   339  007901  7D61               	dw	32097
   340  007903  7D38               	dw	32056
   341  007905  7D0E               	dw	32014
   342  007907  7CE2               	dw	31970
   343  007909  7CB6               	dw	31926
   344  00790B  7C88               	dw	31880
   345  00790D  7C59               	dw	31833
   346  00790F  7C29               	dw	31785
   347  007911  7BF7               	dw	31735
   348  007913  7BC4               	dw	31684
   349  007915  7B91               	dw	31633
   350  007917  7B5C               	dw	31580
   351  007919  7B25               	dw	31525
   352  00791B  7AEE               	dw	31470
   353  00791D  7AB5               	dw	31413
   354  00791F  7A7C               	dw	31356
   355  007921  7A41               	dw	31297
   356  007923  7A04               	dw	31236
   357  007925  79C7               	dw	31175
   358  007927  7989               	dw	31113
   359  007929  7949               	dw	31049
   360  00792B  7908               	dw	30984
   361  00792D  78C6               	dw	30918
   362  00792F  7883               	dw	30851
   363  007931  783F               	dw	30783
   364  007933  77F9               	dw	30713
   365  007935  77B3               	dw	30643
   366  007937  776B               	dw	30571
   367  007939  7722               	dw	30498
   368  00793B  76D8               	dw	30424
   369  00793D  768D               	dw	30349
   370  00793F  7640               	dw	30272
   371  007941  75F3               	dw	30195
   372  007943  75A4               	dw	30116
   373  007945  7554               	dw	30036
   374  007947  7503               	dw	29955
   375  007949  74B1               	dw	29873
   376  00794B  745E               	dw	29790
   377  00794D  740A               	dw	29706
   378  00794F  73B5               	dw	29621
   379  007951  735E               	dw	29534
   380  007953  7306               	dw	29446
   381  007955  72AE               	dw	29358
   382  007957  7254               	dw	29268
   383  007959  71F9               	dw	29177
   384  00795B  719D               	dw	29085
   385  00795D  7140               	dw	28992
   386  00795F  70E1               	dw	28897
   387  007961  7082               	dw	28802
   388  007963  7022               	dw	28706
   389  007965  6FC0               	dw	28608
   390  007967  6F5E               	dw	28510
   391  007969  6EFA               	dw	28410
   392  00796B  6E95               	dw	28309
   393  00796D  6E30               	dw	28208
   394  00796F  6DC9               	dw	28105
   395  007971  6D61               	dw	28001
   396  007973  6CF8               	dw	27896
   397  007975  6C8E               	dw	27790
   398  007977  6C23               	dw	27683
   399  007979  6BB7               	dw	27575
   400  00797B  6B4A               	dw	27466
   401  00797D  6ADB               	dw	27355
   402  00797F  6A6C               	dw	27244
   403  007981  69FC               	dw	27132
   404  007983  698B               	dw	27019
   405  007985  6919               	dw	26905
   406  007987  68A5               	dw	26789
   407  007989  6831               	dw	26673
   408  00798B  67BC               	dw	26556
   409  00798D  6745               	dw	26437
   410  00798F  66CE               	dw	26318
   411  007991  6656               	dw	26198
   412  007993  65DD               	dw	26077
   413  007995  6562               	dw	25954
   414  007997  64E7               	dw	25831
   415  007999  646B               	dw	25707
   416  00799B  63EE               	dw	25582
   417  00799D  6370               	dw	25456
   418  00799F  62F1               	dw	25329
   419  0079A1  6271               	dw	25201
   420  0079A3  61F0               	dw	25072
   421  0079A5  616E               	dw	24942
   422  0079A7  60EB               	dw	24811
   423  0079A9  6067               	dw	24679
   424  0079AB  5FE2               	dw	24546
   425  0079AD  5F5D               	dw	24413
   426  0079AF  5ED6               	dw	24278
   427  0079B1  5E4F               	dw	24143
   428  0079B3  5DC6               	dw	24006
   429  0079B5  5D3D               	dw	23869
   430  0079B7  5CB3               	dw	23731
   431  0079B9  5C28               	dw	23592
   432  0079BB  5B9C               	dw	23452
   433  0079BD  5B0F               	dw	23311
   434  0079BF  5A81               	dw	23169
   435  0079C1  59F3               	dw	23027
   436  0079C3  5963               	dw	22883
   437  0079C5  58D3               	dw	22739
   438  0079C7  5842               	dw	22594
   439  0079C9  57B0               	dw	22448
   440  0079CB  571D               	dw	22301
   441  0079CD  5689               	dw	22153
   442  0079CF  55F4               	dw	22004
   443  0079D1  555F               	dw	21855
   444  0079D3  54C9               	dw	21705
   445  0079D5  5432               	dw	21554
   446  0079D7  539A               	dw	21402
   447  0079D9  5301               	dw	21249
   448  0079DB  5268               	dw	21096
   449  0079DD  51CE               	dw	20942
   450  0079DF  5133               	dw	20787
   451  0079E1  5097               	dw	20631
   452  0079E3  4FFA               	dw	20474
   453  0079E5  4F5D               	dw	20317
   454  0079E7  4EBF               	dw	20159
   455  0079E9  4E20               	dw	20000
   456  0079EB  4D80               	dw	19840
   457  0079ED  4CE0               	dw	19680
   458  0079EF  4C3F               	dw	19519
   459  0079F1  4B9D               	dw	19357
   460  0079F3  4AFA               	dw	19194
   461  0079F5  4A57               	dw	19031
   462  0079F7  49B3               	dw	18867
   463  0079F9  490E               	dw	18702
   464  0079FB  4869               	dw	18537
   465  0079FD  47C3               	dw	18371
   466  0079FF  471C               	dw	18204
   467  007A01  4674               	dw	18036
   468  007A03  45CC               	dw	17868
   469  007A05  4523               	dw	17699
   470  007A07  447A               	dw	17530
   471  007A09  43D0               	dw	17360
   472  007A0B  4325               	dw	17189
   473  007A0D  4279               	dw	17017
   474  007A0F  41CD               	dw	16845
   475  007A11  4120               	dw	16672
   476  007A13  4073               	dw	16499
   477  007A15  3FC5               	dw	16325
   478  007A17  3F16               	dw	16150
   479  007A19  3E67               	dw	15975
   480  007A1B  3DB7               	dw	15799
   481  007A1D  3D07               	dw	15623
   482  007A1F  3C56               	dw	15446
   483  007A21  3BA4               	dw	15268
   484  007A23  3AF2               	dw	15090
   485  007A25  3A3F               	dw	14911
   486  007A27  398C               	dw	14732
   487  007A29  38D8               	dw	14552
   488  007A2B  3824               	dw	14372
   489  007A2D  376F               	dw	14191
   490  007A2F  36B9               	dw	14009
   491  007A31  3603               	dw	13827
   492  007A33  354D               	dw	13645
   493  007A35  3496               	dw	13462
   494  007A37  33DE               	dw	13278
   495  007A39  3326               	dw	13094
   496  007A3B  326D               	dw	12909
   497  007A3D  31B4               	dw	12724
   498  007A3F  30FB               	dw	12539
   499  007A41  3041               	dw	12353
   500  007A43  2F86               	dw	12166
   501  007A45  2ECC               	dw	11980
   502  007A47  2E10               	dw	11792
   503  007A49  2D54               	dw	11604
   504  007A4B  2C98               	dw	11416
   505  007A4D  2BDB               	dw	11227
   506  007A4F  2B1E               	dw	11038
   507  007A51  2A61               	dw	10849
   508  007A53  29A3               	dw	10659
   509  007A55  28E5               	dw	10469
   510  007A57  2826               	dw	10278
   511  007A59  2767               	dw	10087
   512  007A5B  26A7               	dw	9895
   513  007A5D  25E7               	dw	9703
   514  007A5F  2527               	dw	9511
   515  007A61  2467               	dw	9319
   516  007A63  23A6               	dw	9126
   517  007A65  22E4               	dw	8932
   518  007A67  2223               	dw	8739
   519  007A69  2161               	dw	8545
   520  007A6B  209F               	dw	8351
   521  007A6D  1FDC               	dw	8156
   522  007A6F  1F19               	dw	7961
   523  007A71  1E56               	dw	7766
   524  007A73  1D93               	dw	7571
   525  007A75  1CCF               	dw	7375
   526  007A77  1C0B               	dw	7179
   527  007A79  1B46               	dw	6982
   528  007A7B  1A82               	dw	6786
   529  007A7D  19BD               	dw	6589
   530  007A7F  18F8               	dw	6392
   531  007A81  1833               	dw	6195
   532  007A83  176D               	dw	5997
   533  007A85  16A7               	dw	5799
   534  007A87  15E1               	dw	5601
   535  007A89  151B               	dw	5403
   536  007A8B  1455               	dw	5205
   537  007A8D  138E               	dw	5006
   538  007A8F  12C7               	dw	4807
   539  007A91  1200               	dw	4608
   540  007A93  1139               	dw	4409
   541  007A95  1072               	dw	4210
   542  007A97  0FAB               	dw	4011
   543  007A99  0EE3               	dw	3811
   544  007A9B  0E1B               	dw	3611
   545  007A9D  0D53               	dw	3411
   546  007A9F  0C8B               	dw	3211
   547  007AA1  0BC3               	dw	3011
   548  007AA3  0AFB               	dw	2811
   549  007AA5  0A32               	dw	2610
   550  007AA7  096A               	dw	2410
   551  007AA9  08A1               	dw	2209
   552  007AAB  07D9               	dw	2009
   553  007AAD  0710               	dw	1808
   554  007AAF  0647               	dw	1607
   555  007AB1  057E               	dw	1406
   556  007AB3  04B6               	dw	1206
   557  007AB5  03ED               	dw	1005
   558  007AB7  0324               	dw	804
   559  007AB9  025B               	dw	603
   560  007ABB  0192               	dw	402
   561  007ABD  00C9               	dw	201
   562  007ABF  0000               	dw	0
   563  007AC1  FF37               	dw	65335
   564  007AC3  FE6E               	dw	65134
   565  007AC5  FDA5               	dw	64933
   566  007AC7  FCDC               	dw	64732
   567  007AC9  FC13               	dw	64531
   568  007ACB  FB4A               	dw	64330
   569  007ACD  FA82               	dw	64130
   570  007ACF  F9B9               	dw	63929
   571  007AD1  F8F0               	dw	63728
   572  007AD3  F827               	dw	63527
   573  007AD5  F75F               	dw	63327
   574  007AD7  F696               	dw	63126
   575  007AD9  F5CE               	dw	62926
   576  007ADB  F505               	dw	62725
   577  007ADD  F43D               	dw	62525
   578  007ADF  F375               	dw	62325
   579  007AE1  F2AD               	dw	62125
   580  007AE3  F1E5               	dw	61925
   581  007AE5  F11D               	dw	61725
   582  007AE7  F055               	dw	61525
   583  007AE9  EF8E               	dw	61326
   584  007AEB  EEC7               	dw	61127
   585  007AED  EE00               	dw	60928
   586  007AEF  ED39               	dw	60729
   587  007AF1  EC72               	dw	60530
   588  007AF3  EBAB               	dw	60331
   589  007AF5  EAE5               	dw	60133
   590  007AF7  EA1F               	dw	59935
   591  007AF9  E959               	dw	59737
   592  007AFB  E893               	dw	59539
   593  007AFD  E7CD               	dw	59341
   594  007AFF  E708               	dw	59144
   595  007B01  E643               	dw	58947
   596  007B03  E57E               	dw	58750
   597  007B05  E4BA               	dw	58554
   598  007B07  E3F5               	dw	58357
   599  007B09  E331               	dw	58161
   600  007B0B  E26D               	dw	57965
   601  007B0D  E1AA               	dw	57770
   602  007B0F  E0E7               	dw	57575
   603  007B11  E024               	dw	57380
   604  007B13  DF61               	dw	57185
   605  007B15  DE9F               	dw	56991
   606  007B17  DDDD               	dw	56797
   607  007B19  DD1C               	dw	56604
   608  007B1B  DC5A               	dw	56410
   609  007B1D  DB99               	dw	56217
   610  007B1F  DAD9               	dw	56025
   611  007B21  DA19               	dw	55833
   612  007B23  D959               	dw	55641
   613  007B25  D899               	dw	55449
   614  007B27  D7DA               	dw	55258
   615  007B29  D71B               	dw	55067
   616  007B2B  D65D               	dw	54877
   617  007B2D  D59F               	dw	54687
   618  007B2F  D4E2               	dw	54498
   619  007B31  D425               	dw	54309
   620  007B33  D368               	dw	54120
   621  007B35  D2AC               	dw	53932
   622  007B37  D1F0               	dw	53744
   623  007B39  D134               	dw	53556
   624  007B3B  D07A               	dw	53370
   625  007B3D  CFBF               	dw	53183
   626  007B3F  CF05               	dw	52997
   627  007B41  CE4C               	dw	52812
   628  007B43  CD93               	dw	52627
   629  007B45  CCDA               	dw	52442
   630  007B47  CC22               	dw	52258
   631  007B49  CB6A               	dw	52074
   632  007B4B  CAB3               	dw	51891
   633  007B4D  C9FD               	dw	51709
   634  007B4F  C947               	dw	51527
   635  007B51  C891               	dw	51345
   636  007B53  C7DC               	dw	51164
   637  007B55  C728               	dw	50984
   638  007B57  C674               	dw	50804
   639  007B59  C5C1               	dw	50625
   640  007B5B  C50E               	dw	50446
   641  007B5D  C45C               	dw	50268
   642  007B5F  C3AA               	dw	50090
   643  007B61  C2F9               	dw	49913
   644  007B63  C249               	dw	49737
   645  007B65  C199               	dw	49561
   646  007B67  C0EA               	dw	49386
   647  007B69  C03B               	dw	49211
   648  007B6B  BF8D               	dw	49037
   649  007B6D  BEE0               	dw	48864
   650  007B6F  BE33               	dw	48691
   651  007B71  BD87               	dw	48519
   652  007B73  BCDB               	dw	48347
   653  007B75  BC30               	dw	48176
   654  007B77  BB86               	dw	48006
   655  007B79  BADD               	dw	47837
   656  007B7B  BA34               	dw	47668
   657  007B7D  B98C               	dw	47500
   658  007B7F  B8E4               	dw	47332
   659  007B81  B83D               	dw	47165
   660  007B83  B797               	dw	46999
   661  007B85  B6F2               	dw	46834
   662  007B87  B64D               	dw	46669
   663  007B89  B5A9               	dw	46505
   664  007B8B  B506               	dw	46342
   665  007B8D  B463               	dw	46179
   666  007B8F  B3C1               	dw	46017
   667  007B91  B320               	dw	45856
   668  007B93  B280               	dw	45696
   669  007B95  B1E0               	dw	45536
   670  007B97  B141               	dw	45377
   671  007B99  B0A3               	dw	45219
   672  007B9B  B006               	dw	45062
   673  007B9D  AF69               	dw	44905
   674  007B9F  AECD               	dw	44749
   675  007BA1  AE32               	dw	44594
   676  007BA3  AD98               	dw	44440
   677  007BA5  ACFF               	dw	44287
   678  007BA7  AC66               	dw	44134
   679  007BA9  ABCE               	dw	43982
   680  007BAB  AB37               	dw	43831
   681  007BAD  AAA1               	dw	43681
   682  007BAF  AA0C               	dw	43532
   683  007BB1  A977               	dw	43383
   684  007BB3  A8E3               	dw	43235
   685  007BB5  A850               	dw	43088
   686  007BB7  A7BE               	dw	42942
   687  007BB9  A72D               	dw	42797
   688  007BBB  A69D               	dw	42653
   689  007BBD  A60D               	dw	42509
   690  007BBF  A57F               	dw	42367
   691  007BC1  A4F1               	dw	42225
   692  007BC3  A464               	dw	42084
   693  007BC5  A3D8               	dw	41944
   694  007BC7  A34D               	dw	41805
   695  007BC9  A2C3               	dw	41667
   696  007BCB  A23A               	dw	41530
   697  007BCD  A1B1               	dw	41393
   698  007BCF  A12A               	dw	41258
   699  007BD1  A0A3               	dw	41123
   700  007BD3  A01E               	dw	40990
   701  007BD5  9F99               	dw	40857
   702  007BD7  9F15               	dw	40725
   703  007BD9  9E92               	dw	40594
   704  007BDB  9E10               	dw	40464
   705  007BDD  9D8F               	dw	40335
   706  007BDF  9D0F               	dw	40207
   707  007BE1  9C90               	dw	40080
   708  007BE3  9C12               	dw	39954
   709  007BE5  9B95               	dw	39829
   710  007BE7  9B19               	dw	39705
   711  007BE9  9A9E               	dw	39582
   712  007BEB  9A23               	dw	39459
   713  007BED  99AA               	dw	39338
   714  007BEF  9932               	dw	39218
   715  007BF1  98BB               	dw	39099
   716  007BF3  9844               	dw	38980
   717  007BF5  97CF               	dw	38863
   718  007BF7  975B               	dw	38747
   719  007BF9  96E7               	dw	38631
   720  007BFB  9675               	dw	38517
   721  007BFD  9604               	dw	38404
   722  007BFF  9594               	dw	38292
   723  007C01  9525               	dw	38181
   724  007C03  94B6               	dw	38070
   725  007C05  9449               	dw	37961
   726  007C07  93DD               	dw	37853
   727  007C09  9372               	dw	37746
   728  007C0B  9308               	dw	37640
   729  007C0D  929F               	dw	37535
   730  007C0F  9237               	dw	37431
   731  007C11  91D0               	dw	37328
   732  007C13  916B               	dw	37227
   733  007C15  9106               	dw	37126
   734  007C17  90A2               	dw	37026
   735  007C19  9040               	dw	36928
   736  007C1B  8FDE               	dw	36830
   737  007C1D  8F7E               	dw	36734
   738  007C1F  8F1F               	dw	36639
   739  007C21  8EC0               	dw	36544
   740  007C23  8E63               	dw	36451
   741  007C25  8E07               	dw	36359
   742  007C27  8DAC               	dw	36268
   743  007C29  8D52               	dw	36178
   744  007C2B  8CFA               	dw	36090
   745  007C2D  8CA2               	dw	36002
   746  007C2F  8C4B               	dw	35915
   747  007C31  8BF6               	dw	35830
   748  007C33  8BA2               	dw	35746
   749  007C35  8B4F               	dw	35663
   750  007C37  8AFD               	dw	35581
   751  007C39  8AAC               	dw	35500
   752  007C3B  8A5C               	dw	35420
   753  007C3D  8A0D               	dw	35341
   754  007C3F  89C0               	dw	35264
   755  007C41  8973               	dw	35187
   756  007C43  8928               	dw	35112
   757  007C45  88DE               	dw	35038
   758  007C47  8895               	dw	34965
   759  007C49  884D               	dw	34893
   760  007C4B  8807               	dw	34823
   761  007C4D  87C1               	dw	34753
   762  007C4F  877D               	dw	34685
   763  007C51  873A               	dw	34618
   764  007C53  86F8               	dw	34552
   765  007C55  86B7               	dw	34487
   766  007C57  8677               	dw	34423
   767  007C59  8639               	dw	34361
   768  007C5B  85FC               	dw	34300
   769  007C5D  85BF               	dw	34239
   770  007C5F  8584               	dw	34180
   771  007C61  854B               	dw	34123
   772  007C63  8512               	dw	34066
   773  007C65  84DB               	dw	34011
   774  007C67  84A4               	dw	33956
   775  007C69  846F               	dw	33903
   776  007C6B  843C               	dw	33852
   777  007C6D  8409               	dw	33801
   778  007C6F  83D7               	dw	33751
   779  007C71  83A7               	dw	33703
   780  007C73  8378               	dw	33656
   781  007C75  834A               	dw	33610
   782  007C77  831E               	dw	33566
   783  007C79  82F2               	dw	33522
   784  007C7B  82C8               	dw	33480
   785  007C7D  829F               	dw	33439
   786  007C7F  8277               	dw	33399
   787  007C81  8250               	dw	33360
   788  007C83  822B               	dw	33323
   789  007C85  8207               	dw	33287
   790  007C87  81E4               	dw	33252
   791  007C89  81C2               	dw	33218
   792  007C8B  81A2               	dw	33186
   793  007C8D  8182               	dw	33154
   794  007C8F  8164               	dw	33124
   795  007C91  8147               	dw	33095
   796  007C93  812C               	dw	33068
   797  007C95  8111               	dw	33041
   798  007C97  80F8               	dw	33016
   799  007C99  80E0               	dw	32992
   800  007C9B  80C9               	dw	32969
   801  007C9D  80B4               	dw	32948
   802  007C9F  809F               	dw	32927
   803  007CA1  808C               	dw	32908
   804  007CA3  807A               	dw	32890
   805  007CA5  806A               	dw	32874
   806  007CA7  805A               	dw	32858
   807  007CA9  804C               	dw	32844
   808  007CAB  803F               	dw	32831
   809  007CAD  8033               	dw	32819
   810  007CAF  8029               	dw	32809
   811  007CB1  8020               	dw	32800
   812  007CB3  8018               	dw	32792
   813  007CB5  8011               	dw	32785
   814  007CB7  800B               	dw	32779
   815  007CB9  8007               	dw	32775
   816  007CBB  8004               	dw	32772
   817  007CBD  8002               	dw	32770
   818  007CBF                     __end_of_Sinewave:
   819                           	opt stack 0
   820  007CBF                     _FontLookup:
   821                           	opt stack 0
   822  007CBF  00                 	db	0
   823  007CC0  00                 	db	0
   824  007CC1  00                 	db	0
   825  007CC2  00                 	db	0
   826  007CC3  00                 	db	0
   827  007CC4  00                 	db	0
   828  007CC5  00                 	db	0
   829  007CC6  00                 	db	0
   830  007CC7  2F                 	db	47
   831  007CC8  00                 	db	0
   832  007CC9  00                 	db	0
   833  007CCA  00                 	db	0
   834  007CCB  00                 	db	0
   835  007CCC  07                 	db	7
   836  007CCD  00                 	db	0
   837  007CCE  07                 	db	7
   838  007CCF  00                 	db	0
   839  007CD0  00                 	db	0
   840  007CD1  14                 	db	20
   841  007CD2  7F                 	db	127
   842  007CD3  14                 	db	20
   843  007CD4  7F                 	db	127
   844  007CD5  14                 	db	20
   845  007CD6  00                 	db	0
   846  007CD7  24                 	db	36
   847  007CD8  2A                 	db	42
   848  007CD9  7F                 	db	127
   849  007CDA  2A                 	db	42
   850  007CDB  12                 	db	18
   851  007CDC  00                 	db	0
   852  007CDD  C4                 	db	196
   853  007CDE  C8                 	db	200
   854  007CDF  10                 	db	16
   855  007CE0  26                 	db	38
   856  007CE1  46                 	db	70
   857  007CE2  00                 	db	0
   858  007CE3  36                 	db	54
   859  007CE4  49                 	db	73
   860  007CE5  55                 	db	85
   861  007CE6  22                 	db	34
   862  007CE7  50                 	db	80
   863  007CE8  00                 	db	0
   864  007CE9  00                 	db	0
   865  007CEA  05                 	db	5
   866  007CEB  03                 	db	3
   867  007CEC  00                 	db	0
   868  007CED  00                 	db	0
   869  007CEE  00                 	db	0
   870  007CEF  00                 	db	0
   871  007CF0  1C                 	db	28
   872  007CF1  22                 	db	34
   873  007CF2  41                 	db	65
   874  007CF3  00                 	db	0
   875  007CF4  00                 	db	0
   876  007CF5  00                 	db	0
   877  007CF6  41                 	db	65
   878  007CF7  22                 	db	34
   879  007CF8  1C                 	db	28
   880  007CF9  00                 	db	0
   881  007CFA  00                 	db	0
   882  007CFB  14                 	db	20
   883  007CFC  08                 	db	8
   884  007CFD  3E                 	db	62
   885  007CFE  08                 	db	8
   886  007CFF  14                 	db	20
   887  007D00  00                 	db	0
   888  007D01  08                 	db	8
   889  007D02  08                 	db	8
   890  007D03  3E                 	db	62
   891  007D04  08                 	db	8
   892  007D05  08                 	db	8
   893  007D06  00                 	db	0
   894  007D07  00                 	db	0
   895  007D08  00                 	db	0
   896  007D09  50                 	db	80
   897  007D0A  30                 	db	48
   898  007D0B  00                 	db	0
   899  007D0C  00                 	db	0
   900  007D0D  10                 	db	16
   901  007D0E  10                 	db	16
   902  007D0F  10                 	db	16
   903  007D10  10                 	db	16
   904  007D11  10                 	db	16
   905  007D12  00                 	db	0
   906  007D13  00                 	db	0
   907  007D14  60                 	db	96
   908  007D15  60                 	db	96
   909  007D16  00                 	db	0
   910  007D17  00                 	db	0
   911  007D18  00                 	db	0
   912  007D19  20                 	db	32
   913  007D1A  10                 	db	16
   914  007D1B  08                 	db	8
   915  007D1C  04                 	db	4
   916  007D1D  02                 	db	2
   917  007D1E  00                 	db	0
   918  007D1F  3E                 	db	62
   919  007D20  51                 	db	81
   920  007D21  49                 	db	73
   921  007D22  45                 	db	69
   922  007D23  3E                 	db	62
   923  007D24  00                 	db	0
   924  007D25  00                 	db	0
   925  007D26  42                 	db	66
   926  007D27  7F                 	db	127
   927  007D28  40                 	db	64
   928  007D29  00                 	db	0
   929  007D2A  00                 	db	0
   930  007D2B  42                 	db	66
   931  007D2C  61                 	db	97
   932  007D2D  51                 	db	81
   933  007D2E  49                 	db	73
   934  007D2F  46                 	db	70
   935  007D30  00                 	db	0
   936  007D31  21                 	db	33
   937  007D32  41                 	db	65
   938  007D33  45                 	db	69
   939  007D34  4B                 	db	75
   940  007D35  31                 	db	49
   941  007D36  00                 	db	0
   942  007D37  18                 	db	24
   943  007D38  14                 	db	20
   944  007D39  12                 	db	18
   945  007D3A  7F                 	db	127
   946  007D3B  10                 	db	16
   947  007D3C  00                 	db	0
   948  007D3D  27                 	db	39
   949  007D3E  45                 	db	69
   950  007D3F  45                 	db	69
   951  007D40  45                 	db	69
   952  007D41  39                 	db	57
   953  007D42  00                 	db	0
   954  007D43  3C                 	db	60
   955  007D44  4A                 	db	74
   956  007D45  49                 	db	73
   957  007D46  49                 	db	73
   958  007D47  30                 	db	48
   959  007D48  00                 	db	0
   960  007D49  01                 	db	1
   961  007D4A  71                 	db	113
   962  007D4B  09                 	db	9
   963  007D4C  05                 	db	5
   964  007D4D  03                 	db	3
   965  007D4E  00                 	db	0
   966  007D4F  36                 	db	54
   967  007D50  49                 	db	73
   968  007D51  49                 	db	73
   969  007D52  49                 	db	73
   970  007D53  36                 	db	54
   971  007D54  00                 	db	0
   972  007D55  06                 	db	6
   973  007D56  49                 	db	73
   974  007D57  49                 	db	73
   975  007D58  29                 	db	41
   976  007D59  1E                 	db	30
   977  007D5A  00                 	db	0
   978  007D5B  00                 	db	0
   979  007D5C  36                 	db	54
   980  007D5D  36                 	db	54
   981  007D5E  00                 	db	0
   982  007D5F  00                 	db	0
   983  007D60  00                 	db	0
   984  007D61  00                 	db	0
   985  007D62  56                 	db	86
   986  007D63  36                 	db	54
   987  007D64  00                 	db	0
   988  007D65  00                 	db	0
   989  007D66  00                 	db	0
   990  007D67  08                 	db	8
   991  007D68  14                 	db	20
   992  007D69  22                 	db	34
   993  007D6A  41                 	db	65
   994  007D6B  00                 	db	0
   995  007D6C  00                 	db	0
   996  007D6D  14                 	db	20
   997  007D6E  14                 	db	20
   998  007D6F  14                 	db	20
   999  007D70  14                 	db	20
  1000  007D71  14                 	db	20
  1001  007D72  00                 	db	0
  1002  007D73  00                 	db	0
  1003  007D74  41                 	db	65
  1004  007D75  22                 	db	34
  1005  007D76  14                 	db	20
  1006  007D77  08                 	db	8
  1007  007D78  00                 	db	0
  1008  007D79  02                 	db	2
  1009  007D7A  01                 	db	1
  1010  007D7B  51                 	db	81
  1011  007D7C  09                 	db	9
  1012  007D7D  06                 	db	6
  1013  007D7E  00                 	db	0
  1014  007D7F  32                 	db	50
  1015  007D80  49                 	db	73
  1016  007D81  59                 	db	89
  1017  007D82  51                 	db	81
  1018  007D83  3E                 	db	62
  1019  007D84  00                 	db	0
  1020  007D85  7E                 	db	126
  1021  007D86  11                 	db	17
  1022  007D87  11                 	db	17
  1023  007D88  11                 	db	17
  1024  007D89  7E                 	db	126
  1025  007D8A  00                 	db	0
  1026  007D8B  7F                 	db	127
  1027  007D8C  49                 	db	73
  1028  007D8D  49                 	db	73
  1029  007D8E  49                 	db	73
  1030  007D8F  36                 	db	54
  1031  007D90  00                 	db	0
  1032  007D91  3E                 	db	62
  1033  007D92  41                 	db	65
  1034  007D93  41                 	db	65
  1035  007D94  41                 	db	65
  1036  007D95  22                 	db	34
  1037  007D96  00                 	db	0
  1038  007D97  7F                 	db	127
  1039  007D98  41                 	db	65
  1040  007D99  41                 	db	65
  1041  007D9A  22                 	db	34
  1042  007D9B  1C                 	db	28
  1043  007D9C  00                 	db	0
  1044  007D9D  7F                 	db	127
  1045  007D9E  49                 	db	73
  1046  007D9F  49                 	db	73
  1047  007DA0  49                 	db	73
  1048  007DA1  41                 	db	65
  1049  007DA2  00                 	db	0
  1050  007DA3  7F                 	db	127
  1051  007DA4  09                 	db	9
  1052  007DA5  09                 	db	9
  1053  007DA6  09                 	db	9
  1054  007DA7  01                 	db	1
  1055  007DA8  00                 	db	0
  1056  007DA9  3E                 	db	62
  1057  007DAA  41                 	db	65
  1058  007DAB  49                 	db	73
  1059  007DAC  49                 	db	73
  1060  007DAD  7A                 	db	122
  1061  007DAE  00                 	db	0
  1062  007DAF  7F                 	db	127
  1063  007DB0  08                 	db	8
  1064  007DB1  08                 	db	8
  1065  007DB2  08                 	db	8
  1066  007DB3  7F                 	db	127
  1067  007DB4  00                 	db	0
  1068  007DB5  00                 	db	0
  1069  007DB6  41                 	db	65
  1070  007DB7  7F                 	db	127
  1071  007DB8  41                 	db	65
  1072  007DB9  00                 	db	0
  1073  007DBA  00                 	db	0
  1074  007DBB  20                 	db	32
  1075  007DBC  40                 	db	64
  1076  007DBD  41                 	db	65
  1077  007DBE  3F                 	db	63
  1078  007DBF  01                 	db	1
  1079  007DC0  00                 	db	0
  1080  007DC1  7F                 	db	127
  1081  007DC2  08                 	db	8
  1082  007DC3  14                 	db	20
  1083  007DC4  22                 	db	34
  1084  007DC5  41                 	db	65
  1085  007DC6  00                 	db	0
  1086  007DC7  7F                 	db	127
  1087  007DC8  40                 	db	64
  1088  007DC9  40                 	db	64
  1089  007DCA  40                 	db	64
  1090  007DCB  40                 	db	64
  1091  007DCC  00                 	db	0
  1092  007DCD  7F                 	db	127
  1093  007DCE  02                 	db	2
  1094  007DCF  0C                 	db	12
  1095  007DD0  02                 	db	2
  1096  007DD1  7F                 	db	127
  1097  007DD2  00                 	db	0
  1098  007DD3  7F                 	db	127
  1099  007DD4  04                 	db	4
  1100  007DD5  08                 	db	8
  1101  007DD6  10                 	db	16
  1102  007DD7  7F                 	db	127
  1103  007DD8  00                 	db	0
  1104  007DD9  3E                 	db	62
  1105  007DDA  41                 	db	65
  1106  007DDB  41                 	db	65
  1107  007DDC  41                 	db	65
  1108  007DDD  3E                 	db	62
  1109  007DDE  00                 	db	0
  1110  007DDF  7F                 	db	127
  1111  007DE0  09                 	db	9
  1112  007DE1  09                 	db	9
  1113  007DE2  09                 	db	9
  1114  007DE3  06                 	db	6
  1115  007DE4  00                 	db	0
  1116  007DE5  3E                 	db	62
  1117  007DE6  41                 	db	65
  1118  007DE7  51                 	db	81
  1119  007DE8  21                 	db	33
  1120  007DE9  5E                 	db	94
  1121  007DEA  00                 	db	0
  1122  007DEB  7F                 	db	127
  1123  007DEC  09                 	db	9
  1124  007DED  19                 	db	25
  1125  007DEE  29                 	db	41
  1126  007DEF  46                 	db	70
  1127  007DF0  00                 	db	0
  1128  007DF1  46                 	db	70
  1129  007DF2  49                 	db	73
  1130  007DF3  49                 	db	73
  1131  007DF4  49                 	db	73
  1132  007DF5  31                 	db	49
  1133  007DF6  00                 	db	0
  1134  007DF7  01                 	db	1
  1135  007DF8  01                 	db	1
  1136  007DF9  7F                 	db	127
  1137  007DFA  01                 	db	1
  1138  007DFB  01                 	db	1
  1139  007DFC  00                 	db	0
  1140  007DFD  3F                 	db	63
  1141  007DFE  40                 	db	64
  1142  007DFF  40                 	db	64
  1143  007E00  40                 	db	64
  1144  007E01  3F                 	db	63
  1145  007E02  00                 	db	0
  1146  007E03  1F                 	db	31
  1147  007E04  20                 	db	32
  1148  007E05  40                 	db	64
  1149  007E06  20                 	db	32
  1150  007E07  1F                 	db	31
  1151  007E08  00                 	db	0
  1152  007E09  3F                 	db	63
  1153  007E0A  40                 	db	64
  1154  007E0B  38                 	db	56
  1155  007E0C  40                 	db	64
  1156  007E0D  3F                 	db	63
  1157  007E0E  00                 	db	0
  1158  007E0F  63                 	db	99
  1159  007E10  14                 	db	20
  1160  007E11  08                 	db	8
  1161  007E12  14                 	db	20
  1162  007E13  63                 	db	99
  1163  007E14  00                 	db	0
  1164  007E15  07                 	db	7
  1165  007E16  08                 	db	8
  1166  007E17  70                 	db	112
  1167  007E18  08                 	db	8
  1168  007E19  07                 	db	7
  1169  007E1A  00                 	db	0
  1170  007E1B  61                 	db	97
  1171  007E1C  51                 	db	81
  1172  007E1D  49                 	db	73
  1173  007E1E  45                 	db	69
  1174  007E1F  43                 	db	67
  1175  007E20  00                 	db	0
  1176  007E21  00                 	db	0
  1177  007E22  7F                 	db	127
  1178  007E23  41                 	db	65
  1179  007E24  41                 	db	65
  1180  007E25  00                 	db	0
  1181  007E26  00                 	db	0
  1182  007E27  55                 	db	85
  1183  007E28  2A                 	db	42
  1184  007E29  55                 	db	85
  1185  007E2A  2A                 	db	42
  1186  007E2B  55                 	db	85
  1187  007E2C  00                 	db	0
  1188  007E2D  00                 	db	0
  1189  007E2E  41                 	db	65
  1190  007E2F  41                 	db	65
  1191  007E30  7F                 	db	127
  1192  007E31  00                 	db	0
  1193  007E32  00                 	db	0
  1194  007E33  04                 	db	4
  1195  007E34  02                 	db	2
  1196  007E35  01                 	db	1
  1197  007E36  02                 	db	2
  1198  007E37  04                 	db	4
  1199  007E38  00                 	db	0
  1200  007E39  40                 	db	64
  1201  007E3A  40                 	db	64
  1202  007E3B  40                 	db	64
  1203  007E3C  40                 	db	64
  1204  007E3D  40                 	db	64
  1205  007E3E  00                 	db	0
  1206  007E3F  00                 	db	0
  1207  007E40  01                 	db	1
  1208  007E41  02                 	db	2
  1209  007E42  04                 	db	4
  1210  007E43  00                 	db	0
  1211  007E44  00                 	db	0
  1212  007E45  20                 	db	32
  1213  007E46  54                 	db	84
  1214  007E47  54                 	db	84
  1215  007E48  54                 	db	84
  1216  007E49  78                 	db	120
  1217  007E4A  00                 	db	0
  1218  007E4B  7F                 	db	127
  1219  007E4C  48                 	db	72
  1220  007E4D  44                 	db	68
  1221  007E4E  44                 	db	68
  1222  007E4F  38                 	db	56
  1223  007E50  00                 	db	0
  1224  007E51  38                 	db	56
  1225  007E52  44                 	db	68
  1226  007E53  44                 	db	68
  1227  007E54  44                 	db	68
  1228  007E55  20                 	db	32
  1229  007E56  00                 	db	0
  1230  007E57  38                 	db	56
  1231  007E58  44                 	db	68
  1232  007E59  44                 	db	68
  1233  007E5A  48                 	db	72
  1234  007E5B  7F                 	db	127
  1235  007E5C  00                 	db	0
  1236  007E5D  38                 	db	56
  1237  007E5E  54                 	db	84
  1238  007E5F  54                 	db	84
  1239  007E60  54                 	db	84
  1240  007E61  18                 	db	24
  1241  007E62  00                 	db	0
  1242  007E63  08                 	db	8
  1243  007E64  7E                 	db	126
  1244  007E65  09                 	db	9
  1245  007E66  01                 	db	1
  1246  007E67  02                 	db	2
  1247  007E68  00                 	db	0
  1248  007E69  0C                 	db	12
  1249  007E6A  52                 	db	82
  1250  007E6B  52                 	db	82
  1251  007E6C  52                 	db	82
  1252  007E6D  3E                 	db	62
  1253  007E6E  00                 	db	0
  1254  007E6F  7F                 	db	127
  1255  007E70  08                 	db	8
  1256  007E71  04                 	db	4
  1257  007E72  04                 	db	4
  1258  007E73  78                 	db	120
  1259  007E74  00                 	db	0
  1260  007E75  00                 	db	0
  1261  007E76  44                 	db	68
  1262  007E77  7D                 	db	125
  1263  007E78  40                 	db	64
  1264  007E79  00                 	db	0
  1265  007E7A  00                 	db	0
  1266  007E7B  20                 	db	32
  1267  007E7C  40                 	db	64
  1268  007E7D  44                 	db	68
  1269  007E7E  3D                 	db	61
  1270  007E7F  00                 	db	0
  1271  007E80  00                 	db	0
  1272  007E81  7F                 	db	127
  1273  007E82  10                 	db	16
  1274  007E83  28                 	db	40
  1275  007E84  44                 	db	68
  1276  007E85  00                 	db	0
  1277  007E86  00                 	db	0
  1278  007E87  00                 	db	0
  1279  007E88  41                 	db	65
  1280  007E89  7F                 	db	127
  1281  007E8A  40                 	db	64
  1282  007E8B  00                 	db	0
  1283  007E8C  00                 	db	0
  1284  007E8D  7C                 	db	124
  1285  007E8E  04                 	db	4
  1286  007E8F  18                 	db	24
  1287  007E90  04                 	db	4
  1288  007E91  78                 	db	120
  1289  007E92  00                 	db	0
  1290  007E93  7C                 	db	124
  1291  007E94  08                 	db	8
  1292  007E95  04                 	db	4
  1293  007E96  04                 	db	4
  1294  007E97  78                 	db	120
  1295  007E98  00                 	db	0
  1296  007E99  38                 	db	56
  1297  007E9A  44                 	db	68
  1298  007E9B  44                 	db	68
  1299  007E9C  44                 	db	68
  1300  007E9D  38                 	db	56
  1301  007E9E  00                 	db	0
  1302  007E9F  7C                 	db	124
  1303  007EA0  14                 	db	20
  1304  007EA1  14                 	db	20
  1305  007EA2  14                 	db	20
  1306  007EA3  08                 	db	8
  1307  007EA4  00                 	db	0
  1308  007EA5  08                 	db	8
  1309  007EA6  14                 	db	20
  1310  007EA7  14                 	db	20
  1311  007EA8  18                 	db	24
  1312  007EA9  7C                 	db	124
  1313  007EAA  00                 	db	0
  1314  007EAB  7C                 	db	124
  1315  007EAC  08                 	db	8
  1316  007EAD  04                 	db	4
  1317  007EAE  04                 	db	4
  1318  007EAF  08                 	db	8
  1319  007EB0  00                 	db	0
  1320  007EB1  48                 	db	72
  1321  007EB2  54                 	db	84
  1322  007EB3  54                 	db	84
  1323  007EB4  54                 	db	84
  1324  007EB5  20                 	db	32
  1325  007EB6  00                 	db	0
  1326  007EB7  04                 	db	4
  1327  007EB8  3F                 	db	63
  1328  007EB9  44                 	db	68
  1329  007EBA  40                 	db	64
  1330  007EBB  20                 	db	32
  1331  007EBC  00                 	db	0
  1332  007EBD  3C                 	db	60
  1333  007EBE  40                 	db	64
  1334  007EBF  40                 	db	64
  1335  007EC0  20                 	db	32
  1336  007EC1  7C                 	db	124
  1337  007EC2  00                 	db	0
  1338  007EC3  1C                 	db	28
  1339  007EC4  20                 	db	32
  1340  007EC5  40                 	db	64
  1341  007EC6  20                 	db	32
  1342  007EC7  1C                 	db	28
  1343  007EC8  00                 	db	0
  1344  007EC9  3C                 	db	60
  1345  007ECA  40                 	db	64
  1346  007ECB  30                 	db	48
  1347  007ECC  40                 	db	64
  1348  007ECD  3C                 	db	60
  1349  007ECE  00                 	db	0
  1350  007ECF  44                 	db	68
  1351  007ED0  28                 	db	40
  1352  007ED1  10                 	db	16
  1353  007ED2  28                 	db	40
  1354  007ED3  44                 	db	68
  1355  007ED4  00                 	db	0
  1356  007ED5  0C                 	db	12
  1357  007ED6  50                 	db	80
  1358  007ED7  50                 	db	80
  1359  007ED8  50                 	db	80
  1360  007ED9  3C                 	db	60
  1361  007EDA  00                 	db	0
  1362  007EDB  44                 	db	68
  1363  007EDC  64                 	db	100
  1364  007EDD  54                 	db	84
  1365  007EDE  4C                 	db	76
  1366  007EDF  44                 	db	68
  1367  007EE0  00                 	db	0
  1368  007EE1  08                 	db	8
  1369  007EE2  6C                 	db	108
  1370  007EE3  6A                 	db	106
  1371  007EE4  19                 	db	25
  1372  007EE5  08                 	db	8
  1373  007EE6  00                 	db	0
  1374  007EE7  0C                 	db	12
  1375  007EE8  12                 	db	18
  1376  007EE9  24                 	db	36
  1377  007EEA  12                 	db	18
  1378  007EEB  0C                 	db	12
  1379  007EEC  00                 	db	0
  1380  007EED  7E                 	db	126
  1381  007EEE  7E                 	db	126
  1382  007EEF  7E                 	db	126
  1383  007EF0  7E                 	db	126
  1384  007EF1  7E                 	db	126
  1385  007EF2  00                 	db	0
  1386  007EF3                     __end_of_FontLookup:
  1387                           	opt stack 0
  1388  007EF3                     _alarm_prob_weights:
  1389                           	opt stack 0
  1390  007EF3  0000               	dw	0
  1391  007EF5  0000               	dw	0
  1392  007EF7  FFFF               	dw	65535
  1393  007EF9  0000               	dw	0
  1394  007EFB  0000               	dw	0
  1395  007EFD  0000               	dw	0
  1396  007EFF  FFFF               	dw	65535
  1397  007F01  FFFD               	dw	65533
  1398  007F03  FFFF               	dw	65535
  1399  007F05  FFFD               	dw	65533
  1400  007F07  0000               	dw	0
  1401  007F09  FFFD               	dw	65533
  1402  007F0B  0000               	dw	0
  1403  007F0D  0000               	dw	0
  1404  007F0F  0000               	dw	0
  1405  007F11  0000               	dw	0
  1406  007F13  0000               	dw	0
  1407  007F15  0000               	dw	0
  1408  007F17  0000               	dw	0
  1409  007F19  0000               	dw	0
  1410  007F1B  0000               	dw	0
  1411  007F1D  0003               	dw	3
  1412  007F1F  0003               	dw	3
  1413  007F21  0003               	dw	3
  1414  007F23  0002               	dw	2
  1415  007F25  0000               	dw	0
  1416  007F27  0002               	dw	2
  1417  007F29  0002               	dw	2
  1418  007F2B  0000               	dw	0
  1419  007F2D  0000               	dw	0
  1420  007F2F  0000               	dw	0
  1421  007F31                     __end_of_alarm_prob_weights:
  1422                           	opt stack 0
  1423  007F31                     _growl_prob_weights:
  1424                           	opt stack 0
  1425  007F31  0000               	dw	0
  1426  007F33  0003               	dw	3
  1427  007F35  0003               	dw	3
  1428  007F37  0000               	dw	0
  1429  007F39  0000               	dw	0
  1430  007F3B  0000               	dw	0
  1431  007F3D  0000               	dw	0
  1432  007F3F  0000               	dw	0
  1433  007F41  0000               	dw	0
  1434  007F43  0000               	dw	0
  1435  007F45  0000               	dw	0
  1436  007F47  FFFF               	dw	65535
  1437  007F49  FFFD               	dw	65533
  1438  007F4B  FFFD               	dw	65533
  1439  007F4D  FFFD               	dw	65533
  1440  007F4F  FFFF               	dw	65535
  1441  007F51  FFFF               	dw	65535
  1442  007F53  0000               	dw	0
  1443  007F55  0000               	dw	0
  1444  007F57  0000               	dw	0
  1445  007F59  0000               	dw	0
  1446  007F5B  0000               	dw	0
  1447  007F5D  0002               	dw	2
  1448  007F5F  0000               	dw	0
  1449  007F61  0000               	dw	0
  1450  007F63  0000               	dw	0
  1451  007F65  0002               	dw	2
  1452  007F67  0003               	dw	3
  1453  007F69  0002               	dw	2
  1454  007F6B  0000               	dw	0
  1455  007F6D  0000               	dw	0
  1456  007F6F                     __end_of_growl_prob_weights:
  1457                           	opt stack 0
  1458  007F6F                     _horn_prob_weights:
  1459                           	opt stack 0
  1460  007F6F  0000               	dw	0
  1461  007F71  0000               	dw	0
  1462  007F73  0000               	dw	0
  1463  007F75  0000               	dw	0
  1464  007F77  0000               	dw	0
  1465  007F79  0000               	dw	0
  1466  007F7B  0002               	dw	2
  1467  007F7D  0003               	dw	3
  1468  007F7F  0002               	dw	2
  1469  007F81  0000               	dw	0
  1470  007F83  0000               	dw	0
  1471  007F85  0000               	dw	0
  1472  007F87  0000               	dw	0
  1473  007F89  0000               	dw	0
  1474  007F8B  0000               	dw	0
  1475  007F8D  0003               	dw	3
  1476  007F8F  0002               	dw	2
  1477  007F91  0000               	dw	0
  1478  007F93  0000               	dw	0
  1479  007F95  FFFD               	dw	65533
  1480  007F97  FFFF               	dw	65535
  1481  007F99  0000               	dw	0
  1482  007F9B  0000               	dw	0
  1483  007F9D  0003               	dw	3
  1484  007F9F  0000               	dw	0
  1485  007FA1  0000               	dw	0
  1486  007FA3  FFFF               	dw	65535
  1487  007FA5  FFFD               	dw	65533
  1488  007FA7  FFFD               	dw	65533
  1489  007FA9  FFFF               	dw	65535
  1490  007FAB  0000               	dw	0
  1491  007FAD                     __end_of_horn_prob_weights:
  1492                           	opt stack 0
  1493  007FAD                     _scream_prob_weights:
  1494                           	opt stack 0
  1495  007FAD  0000               	dw	0
  1496  007FAF  0003               	dw	3
  1497  007FB1  0000               	dw	0
  1498  007FB3  0000               	dw	0
  1499  007FB5  0003               	dw	3
  1500  007FB7  0002               	dw	2
  1501  007FB9  0002               	dw	2
  1502  007FBB  0003               	dw	3
  1503  007FBD  0002               	dw	2
  1504  007FBF  0000               	dw	0
  1505  007FC1  0000               	dw	0
  1506  007FC3  FFFF               	dw	65535
  1507  007FC5  FFFF               	dw	65535
  1508  007FC7  FFFD               	dw	65533
  1509  007FC9  0000               	dw	0
  1510  007FCB  0000               	dw	0
  1511  007FCD  0000               	dw	0
  1512  007FCF  0000               	dw	0
  1513  007FD1  0000               	dw	0
  1514  007FD3  FFFF               	dw	65535
  1515  007FD5  FFFD               	dw	65533
  1516  007FD7  FFFD               	dw	65533
  1517  007FD9  0000               	dw	0
  1518  007FDB  0000               	dw	0
  1519  007FDD  0000               	dw	0
  1520  007FDF  0000               	dw	0
  1521  007FE1  0000               	dw	0
  1522  007FE3  0000               	dw	0
  1523  007FE5  0000               	dw	0
  1524  007FE7  0000               	dw	0
  1525  007FE9  0000               	dw	0
  1526  007FEB                     __end_of_scream_prob_weights:
  1527                           	opt stack 0
  1528  007FEB                     _dpowers:
  1529                           	opt stack 0
  1530  007FEB  0001               	dw	1
  1531  007FED  000A               	dw	10
  1532  007FEF  0064               	dw	100
  1533  007FF1  03E8               	dw	1000
  1534  007FF3  2710               	dw	10000
  1535  007FF5                     __end_of_dpowers:
  1536                           	opt stack 0
  1537  0000                     _ADCON0	set	4034
  1538  0000                     _ADCON0bits	set	4034
  1539  0000                     _ADCON1	set	4033
  1540  0000                     _ADCON2	set	4032
  1541  0000                     _ADRESH	set	4036
  1542  0000                     _ADRESL	set	4035
  1543  0000                     _ANSELAbits	set	3896
  1544  0000                     _ANSELC	set	3898
  1545  0000                     _INTCONbits	set	4082
  1546  0000                     _LATBbits	set	3978
  1547  0000                     _LATC	set	3979
  1548  0000                     _LATCbits	set	3979
  1549  0000                     _OSCCON2bits	set	4050
  1550  0000                     _OSCCONbits	set	4051
  1551  0000                     _OSCTUNEbits	set	3995
  1552  0000                     _PIE1	set	3997
  1553  0000                     _PIE1bits	set	3997
  1554  0000                     _PIR1bits	set	3998
  1555  0000                     _RCSTA1	set	4011
  1556  0000                     _RCSTA1bits	set	4011
  1557  0000                     _SPBRG1	set	4015
  1558  0000                     _SPBRGH1	set	4016
  1559  0000                     _SSP1BUF	set	4041
  1560  0000                     _SSP1CON1	set	4038
  1561  0000                     _SSP1CON1bits	set	4038
  1562  0000                     _SSP1STAT	set	4039
  1563  0000                     _SSP1STATbits	set	4039
  1564  0000                     _TRISAbits	set	3986
  1565  0000                     _TRISBbits	set	3987
  1566  0000                     _TRISC	set	3988
  1567  0000                     _TRISCbits	set	3988
  1568  0000                     _TXREG1	set	4013
  1569  0000                     _TXSTA1	set	4012
  1570  0000                     _TXSTA1bits	set	4012
  1571  007FF5                     __stringdata:
  1572                           	opt stack 0
  1573  007FF5                     STR_1:
  1574  007FF5  25                 	db	37
  1575  007FF6  63                 	db	99	;'c'
  1576  007FF7  20                 	db	32
  1577  007FF8  25                 	db	37
  1578  007FF9  64                 	db	100	;'d'
  1579  007FFA  20                 	db	32
  1580  007FFB  25                 	db	37
  1581  007FFC  63                 	db	99	;'c'
  1582  007FFD  00                 	db	0
  1583  007FFE                     __end_of__stringdata:
  1584                           	opt stack 0
  1585                           
  1586                           ; #config settings
  1587  007FFE  00                 	db	0	; dummy byte at the end
  1588  0000                     
  1589                           	psect	cinit
  1590  005910                     __pcinit:
  1591                           	opt stack 0
  1592  005910                     start_initialization:
  1593                           	opt stack 0
  1594  005910                     __initialization:
  1595                           	opt stack 0
  1596                           
  1597                           ; Clear objects allocated to BIGRAM (618 bytes)
  1598  005910  EE02  F000         	lfsr	0,__pbssBIGRAM
  1599  005914  EE12 F06A          	lfsr	1,618
  1600  005918                     clear_0:
  1601  005918  6AEE               	clrf	postinc0,c
  1602  00591A  50E5               	movf	postdec1,w,c
  1603  00591C  50E1               	movf	fsr1l,w,c
  1604  00591E  E1FC               	bnz	clear_0
  1605  005920  50E2               	movf	fsr1h,w,c
  1606  005922  E1FA               	bnz	clear_0
  1607                           
  1608                           ; Clear objects allocated to BANK1 (256 bytes)
  1609  005924  EE01  F000         	lfsr	0,__pbssBANK1
  1610  005928  EE11 F000          	lfsr	1,256
  1611  00592C                     clear_1:
  1612  00592C  6AEE               	clrf	postinc0,c
  1613  00592E  50E5               	movf	postdec1,w,c
  1614  005930  50E1               	movf	fsr1l,w,c
  1615  005932  E1FC               	bnz	clear_1
  1616  005934  50E2               	movf	fsr1h,w,c
  1617  005936  E1FA               	bnz	clear_1
  1618                           
  1619                           ; Clear objects allocated to BANK0 (101 bytes)
  1620  005938  EE00  F060         	lfsr	0,__pbssBANK0
  1621  00593C  0E65               	movlw	101
  1622  00593E                     clear_2:
  1623  00593E  6AEE               	clrf	postinc0,c
  1624  005940  06E8               	decf	wreg,f,c
  1625  005942  E1FD               	bnz	clear_2
  1626                           
  1627                           ; Clear objects allocated to COMRAM (6 bytes)
  1628  005944  6A5F               	clrf	(__pbssCOMRAM+5)& (0+255),c
  1629  005946  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
  1630  005948  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1631  00594A  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1632  00594C  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1633  00594E  6A5A               	clrf	__pbssCOMRAM& (0+255),c
  1634  005950                     end_of_initialization:
  1635                           	opt stack 0
  1636  005950                     __end_of__initialization:
  1637                           	opt stack 0
  1638  005950  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1639  005952  6EF8               	movwf	tblptru,c
  1640  005954  0100               	movlb	0
  1641  005956  EFEC  F033         	goto	_main	;jump to C main() function
  1642                           tblptru	equ	0xFF8
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1h	equ	0xFE2
  1647                           fsr1l	equ	0xFE1
  1648                           
  1649                           	psect	bssCOMRAM
  1650  00005A                     __pbssCOMRAM:
  1651                           	opt stack 0
  1652  00005A                     _LcdMemIdx:
  1653                           	opt stack 0
  1654  00005A                     	ds	2
  1655  00005C                     _i:
  1656                           	opt stack 0
  1657  00005C                     	ds	2
  1658  00005E                     _USART1_Status:
  1659                           	opt stack 0
  1660  00005E                     	ds	1
  1661  00005F                     _input:
  1662                           	opt stack 0
  1663  00005F                     	ds	1
  1664                           tblptru	equ	0xFF8
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           
  1671                           	psect	bssBANK0
  1672  000060                     __pbssBANK0:
  1673                           	opt stack 0
  1674  000060                     _oldRealNumbers:
  1675                           	opt stack 0
  1676  000060                     	ds	62
  1677  00009E                     _data:
  1678                           	opt stack 0
  1679  00009E                     	ds	5
  1680  0000A3                     _baud_rate:
  1681                           	opt stack 0
  1682  0000A3                     	ds	4
  1683  0000A7                     _alarm_prob:
  1684                           	opt stack 0
  1685  0000A7                     	ds	2
  1686  0000A9                     _growl_prob:
  1687                           	opt stack 0
  1688  0000A9                     	ds	2
  1689  0000AB                     _horn_prob:
  1690                           	opt stack 0
  1691  0000AB                     	ds	2
  1692  0000AD                     _max_tally:
  1693                           	opt stack 0
  1694  0000AD                     	ds	2
  1695  0000AF                     _scream_prob:
  1696                           	opt stack 0
  1697  0000AF                     	ds	2
  1698  0000B1                     _total_tally:
  1699                           	opt stack 0
  1700  0000B1                     	ds	2
  1701  0000B3                     _guesses:
  1702                           	opt stack 0
  1703  0000B3                     	ds	10
  1704  0000BD                     _alarm_tally:
  1705                           	opt stack 0
  1706  0000BD                     	ds	2
  1707  0000BF                     _growl_tally:
  1708                           	opt stack 0
  1709  0000BF                     	ds	2
  1710  0000C1                     _horn_tally:
  1711                           	opt stack 0
  1712  0000C1                     	ds	2
  1713  0000C3                     _scream_tally:
  1714                           	opt stack 0
  1715  0000C3                     	ds	2
  1716                           tblptru	equ	0xFF8
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	bssBANK1
  1724  000100                     __pbssBANK1:
  1725                           	opt stack 0
  1726  000100                     _imaginary_numbers:
  1727                           	opt stack 0
  1728  000100                     	ds	128
  1729  000180                     _real_numbers:
  1730                           	opt stack 0
  1731  000180                     	ds	128
  1732                           tblptru	equ	0xFF8
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           
  1739                           	psect	bssBIGRAM
  1740  000200                     __pbssBIGRAM:
  1741                           	opt stack 0
  1742  000200                     _LcdMemory:
  1743                           	opt stack 0
  1744  000200                     	ds	618
  1745                           tblptru	equ	0xFF8
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postdec1	equ	0xFE5
  1749                           fsr1h	equ	0xFE2
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	cstackBANK0
  1753  0000C5                     __pcstackBANK0:
  1754                           	opt stack 0
  1755  0000C5                     main@adc_value:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x0
  1759  0000C5                     	ds	2
  1760  0000C7                     main@root:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x2
  1764  0000C7                     	ds	4
  1765  0000CB                     main@place:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x6
  1769  0000CB                     	ds	4
  1770  0000CF                     main@k:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0xA
  1774  0000CF                     	ds	2
  1775  0000D1                     main@i:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0xC
  1779  0000D1                     	ds	2
  1780                           tblptru	equ	0xFF8
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1h	equ	0xFE2
  1785                           fsr1l	equ	0xFE1
  1786                           
  1787                           	psect	cstackCOMRAM
  1788  000001                     __pcstackCOMRAM:
  1789                           	opt stack 0
  1790  000001                     ?___wmul:
  1791                           	opt stack 0
  1792  000001                     ?___lwdiv:
  1793                           	opt stack 0
  1794  000001                     ?___lmul:
  1795                           	opt stack 0
  1796  000001                     OpenADC@config2:
  1797                           	opt stack 0
  1798  000001                     OpenSPI1@bus_mode:
  1799                           	opt stack 0
  1800  000001                     WriteSPI1@TempVar:
  1801                           	opt stack 0
  1802  000001                     Write1USART@data:
  1803                           	opt stack 0
  1804  000001                     Delay10TCYx@unit:
  1805                           	opt stack 0
  1806  000001                     LCDClear@i:
  1807                           	opt stack 0
  1808  000001                     Open1USART@spbrg:
  1809                           	opt stack 0
  1810  000001                     ___wmul@multiplier:
  1811                           	opt stack 0
  1812  000001                     ___lwdiv@dividend:
  1813                           	opt stack 0
  1814  000001                     Delay@a:
  1815                           	opt stack 0
  1816  000001                     ___lmul@multiplier:
  1817                           	opt stack 0
  1818                           
  1819                           ; 4 bytes @ 0x0
  1820  000001                     	ds	1
  1821  000002                     sendChar@character:
  1822                           	opt stack 0
  1823  000002                     OpenADC@config3:
  1824                           	opt stack 0
  1825  000002                     OpenSPI1@smp_phase:
  1826                           	opt stack 0
  1827  000002                     WriteSPI1@data_out:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x1
  1831  000002                     	ds	1
  1832  000003                     ??_OpenADC:
  1833  000003                     ??_Open1USART:
  1834  000003                     OpenSPI1@sync_mode:
  1835                           	opt stack 0
  1836  000003                     sendIntArray@array:
  1837                           	opt stack 0
  1838  000003                     ___wmul@multiplicand:
  1839                           	opt stack 0
  1840  000003                     ___lwdiv@divisor:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x2
  1844  000003                     	ds	2
  1845  000005                     OpenADC@config:
  1846                           	opt stack 0
  1847  000005                     sendIntArray@size:
  1848                           	opt stack 0
  1849  000005                     ___wmul@product:
  1850                           	opt stack 0
  1851  000005                     ___lwdiv@quotient:
  1852                           	opt stack 0
  1853  000005                     ___lmul@multiplicand:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x4
  1857  000005                     	ds	1
  1858  000006                     Open1USART@config:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x5
  1862  000006                     	ds	1
  1863  000007                     ?___awdiv:
  1864                           	opt stack 0
  1865  000007                     LCDSend@cd:
  1866                           	opt stack 0
  1867  000007                     ___lwdiv@counter:
  1868                           	opt stack 0
  1869  000007                     ___awdiv@dividend:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x6
  1873  000007                     	ds	1
  1874  000008                     ?___lwmod:
  1875                           	opt stack 0
  1876  000008                     LCDSend@data:
  1877                           	opt stack 0
  1878  000008                     ___lwmod@dividend:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x7
  1882  000008                     	ds	1
  1883  000009                     LCDUpdate@x:
  1884                           	opt stack 0
  1885  000009                     ___awdiv@divisor:
  1886                           	opt stack 0
  1887  000009                     ___lmul@product:
  1888                           	opt stack 0
  1889                           
  1890                           ; 4 bytes @ 0x8
  1891  000009                     	ds	1
  1892  00000A                     ___lwmod@divisor:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x9
  1896  00000A                     	ds	1
  1897  00000B                     ___awdiv@counter:
  1898                           	opt stack 0
  1899  00000B                     LCDUpdate@y:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0xA
  1903  00000B                     	ds	1
  1904  00000C                     ___awdiv@sign:
  1905                           	opt stack 0
  1906  00000C                     ___lwmod@counter:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0xB
  1910  00000C                     	ds	1
  1911  00000D                     ?_sprintf:
  1912                           	opt stack 0
  1913  00000D                     LCDChrXY@y:
  1914                           	opt stack 0
  1915  00000D                     fix_fft@fr:
  1916                           	opt stack 0
  1917  00000D                     sprintf@sp:
  1918                           	opt stack 0
  1919  00000D                     ___awdiv@quotient:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0xC
  1923  00000D                     	ds	1
  1924  00000E                     LCDChrXY@ch:
  1925                           	opt stack 0
  1926                           
  1927                           ; 1 bytes @ 0xD
  1928  00000E                     	ds	1
  1929  00000F                     ??_LCDChrXY:
  1930  00000F                     fix_fft@fi:
  1931                           	opt stack 0
  1932  00000F                     sprintf@f:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0xE
  1936  00000F                     	ds	2
  1937  000011                     fix_fft@m:
  1938                           	opt stack 0
  1939  000011                     LCDChrXY@offset:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x10
  1943  000011                     	ds	2
  1944  000013                     ??_fix_fft:
  1945  000013                     LCDChrXY@x:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x12
  1949  000013                     	ds	1
  1950  000014                     LCDChrXY@mid_shift:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x13
  1954  000014                     	ds	2
  1955  000016                     LCDChrXY@i:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x15
  1959  000016                     	ds	1
  1960  000017                     ??_sprintf:
  1961                           
  1962                           ; 0 bytes @ 0x16
  1963  000017                     	ds	1
  1964  000018                     LCDChrXY@index:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x17
  1968  000018                     	ds	1
  1969  000019                     sprintf@flag:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x18
  1973  000019                     	ds	1
  1974  00001A                     sprintf@prec:
  1975                           	opt stack 0
  1976  00001A                     LCDStr@dataPtr:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x19
  1980  00001A                     	ds	1
  1981  00001B                     sprintf@ap:
  1982                           	opt stack 0
  1983  00001B                     fix_fft@k:
  1984                           	opt stack 0
  1985                           
  1986                           ; 4 bytes @ 0x1A
  1987  00001B                     	ds	1
  1988  00001C                     LCDStr@inv:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x1B
  1992  00001C                     	ds	1
  1993  00001D                     LCDStr@row:
  1994                           	opt stack 0
  1995  00001D                     sprintf@_val:
  1996                           	opt stack 0
  1997                           
  1998                           ; 5 bytes @ 0x1C
  1999  00001D                     	ds	1
  2000  00001E                     LCDStr@x:
  2001                           	opt stack 0
  2002                           
  2003                           ; 1 bytes @ 0x1D
  2004  00001E                     	ds	1
  2005  00001F                     fix_fft@nn:
  2006                           	opt stack 0
  2007                           
  2008                           ; 4 bytes @ 0x1E
  2009  00001F                     	ds	3
  2010  000022                     sprintf@c:
  2011                           	opt stack 0
  2012                           
  2013                           ; 1 bytes @ 0x21
  2014  000022                     	ds	1
  2015  000023                     writeGuess@prob:
  2016                           	opt stack 0
  2017  000023                     fix_fft@istep:
  2018                           	opt stack 0
  2019                           
  2020                           ; 4 bytes @ 0x22
  2021  000023                     	ds	2
  2022  000025                     writeGuess@row:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x24
  2026  000025                     	ds	2
  2027  000027                     fix_fft@qr:
  2028                           	opt stack 0
  2029  000027                     writeGuess@percent:
  2030                           	opt stack 0
  2031                           
  2032                           ; 8 bytes @ 0x26
  2033  000027                     	ds	2
  2034  000029                     fix_fft@qi:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x28
  2038  000029                     	ds	2
  2039  00002B                     fix_fft@wr:
  2040                           	opt stack 0
  2041                           
  2042                           ; 2 bytes @ 0x2A
  2043  00002B                     	ds	2
  2044  00002D                     fix_fft@wi:
  2045                           	opt stack 0
  2046                           
  2047                           ; 2 bytes @ 0x2C
  2048  00002D                     	ds	2
  2049  00002F                     writeGuess@guess:
  2050                           	opt stack 0
  2051  00002F                     fix_fft@n:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x2E
  2055  00002F                     	ds	4
  2056  000033                     fix_fft@tr:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x32
  2060  000033                     	ds	2
  2061  000035                     fix_fft@ti:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x34
  2065  000035                     	ds	2
  2066  000037                     fix_fft@b:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x36
  2070  000037                     	ds	2
  2071  000039                     fix_fft@i:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x38
  2075  000039                     	ds	4
  2076  00003D                     fix_fft@mr:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x3C
  2080  00003D                     	ds	4
  2081  000041                     fix_fft@l:
  2082                           	opt stack 0
  2083                           
  2084                           ; 4 bytes @ 0x40
  2085  000041                     	ds	4
  2086  000045                     fix_fft@j:
  2087                           	opt stack 0
  2088                           
  2089                           ; 4 bytes @ 0x44
  2090  000045                     	ds	4
  2091  000049                     fix_fft@c:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0x48
  2095  000049                     	ds	4
  2096  00004D                     ??_main:
  2097                           
  2098                           ; 0 bytes @ 0x4C
  2099  00004D                     	ds	13
  2100                           tblptru	equ	0xFF8
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           postdec1	equ	0xFE5
  2104                           fsr1h	equ	0xFE2
  2105                           fsr1l	equ	0xFE1
  2106                           
  2107 ;;
  2108 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2109 ;;
  2110 ;; *************** function _main *****************
  2111 ;; Defined at:
  2112 ;;		line 71 in file "main pic18.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  place           4    6[BANK0 ] long 
  2117 ;;  root            4    2[BANK0 ] long 
  2118 ;;  i               2   12[BANK0 ] short 
  2119 ;;  k               2   10[BANK0 ] int 
  2120 ;;  adc_value       2    0[BANK0 ] unsigned int 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2130 ;;      Params:         0       0       0       0       0       0       0
  2131 ;;      Locals:         0      14       0       0       0       0       0
  2132 ;;      Temps:         13       0       0       0       0       0       0
  2133 ;;      Totals:        13      14       0       0       0       0       0
  2134 ;;Total ram usage:       27 bytes
  2135 ;; Hardware stack levels required when called:    5
  2136 ;; This function calls:
  2137 ;;		_BusyADC
  2138 ;;		_ConvertADC
  2139 ;;		___awdiv
  2140 ;;		___wmul
  2141 ;;		_fix_fft
  2142 ;;		_sendIntArray
  2143 ;;		_setup
  2144 ;;		_writeGuess
  2145 ;; This function is called by:
  2146 ;;		Startup code after reset
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text0
  2151  0067D8                     __ptext0:
  2152                           	opt stack 0
  2153  0067D8                     _main:
  2154                           	opt stack 26
  2155                           
  2156                           ;main pic18.c: 72: unsigned int adc_value;
  2157                           ;main pic18.c: 75: setup();
  2158                           
  2159                           ;incstack = 0
  2160  0067D8  ECC4  F02D         	call	_setup	;wreg free
  2161  0067DC                     l2495:
  2162                           
  2163                           ;main pic18.c: 78: short i = 0;
  2164  0067DC  0E00               	movlw	0
  2165  0067DE  0100               	movlb	0	; () banked
  2166  0067E0  6FD2               	movwf	(main@i+1)& (0+255),b
  2167  0067E2  0E00               	movlw	0
  2168  0067E4  0100               	movlb	0	; () banked
  2169  0067E6  6FD1               	movwf	main@i& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;main pic18.c: 79: for (i = 0; i < 64; i++) {
  2173  0067E8  0E00               	movlw	0
  2174  0067EA  0100               	movlb	0	; () banked
  2175  0067EC  6FD2               	movwf	(main@i+1)& (0+255),b
  2176  0067EE  0E00               	movlw	0
  2177  0067F0  0100               	movlb	0	; () banked
  2178  0067F2  6FD1               	movwf	main@i& (0+255),b
  2179  0067F4                     
  2180                           ; BSR set to: 0
  2181  0067F4  0100               	movlb	0	; () banked
  2182  0067F6  51D2               	movf	(main@i+1)& (0+255),w,b
  2183  0067F8  0A80               	xorlw	128
  2184  0067FA  0F80               	addlw	-128
  2185  0067FC  0E40               	movlw	64
  2186  0067FE  B4D8               	btfsc	status,2,c
  2187  006800  5DD1               	subwf	main@i& (0+255),w,b
  2188  006802  B0D8               	btfsc	status,0,c
  2189  006804  D04A               	goto	l2517
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main pic18.c: 80: ConvertADC();
  2193                           
  2194                           ; BSR set to: 0
  2195                           
  2196                           ; BSR set to: 0
  2197  006806  EC98  F02B         	call	_ConvertADC	;wreg free
  2198  00680A                     l2505:
  2199  00680A  EC9A  F02B         	call	_BusyADC	;wreg free
  2200  00680E  0900               	iorlw	0
  2201  006810  A4D8               	btfss	status,2,c
  2202  006812  D7FB               	goto	l2505
  2203                           
  2204                           ;main pic18.c: 86: adc_value = ((short)(ADRESH << 8) + (short)ADRESL) - 512;
  2205  006814  50C3               	movf	4035,w,c	;volatile
  2206  006816  CFC4 F04D          	movff	4036,??_main	;volatile
  2207  00681A  6A4E               	clrf	(??_main+1)& (0+255),c
  2208  00681C  C04D  F04E         	movff	??_main,??_main+1
  2209  006820  6A4D               	clrf	??_main,c
  2210  006822  264D               	addwf	??_main,f,c
  2211  006824  0E00               	movlw	0
  2212  006826  224E               	addwfc	??_main+1,f,c
  2213  006828  0E00               	movlw	0
  2214  00682A  244D               	addwf	??_main,w,c
  2215  00682C  0100               	movlb	0	; () banked
  2216  00682E  6FC5               	movwf	main@adc_value& (0+255),b
  2217  006830  0EFE               	movlw	254
  2218  006832  204E               	addwfc	??_main+1,w,c
  2219  006834  0100               	movlb	0	; () banked
  2220  006836  6FC6               	movwf	(main@adc_value+1)& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main pic18.c: 87: real_numbers[i] = adc_value;
  2224  006838  0E80               	movlw	low _real_numbers
  2225  00683A  6E4D               	movwf	??_main& (0+255),c
  2226  00683C  0E01               	movlw	high _real_numbers
  2227  00683E  6E4E               	movwf	(??_main+1)& (0+255),c
  2228  006840  90D8               	bcf	status,0,c
  2229  006842  0100               	movlb	0	; () banked
  2230  006844  35D1               	rlcf	main@i& (0+255),w,b
  2231  006846  6ED9               	movwf	fsr2l,c
  2232  006848  0100               	movlb	0	; () banked
  2233  00684A  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2234  00684C  6EDA               	movwf	fsr2h,c
  2235  00684E  504D               	movf	??_main,w,c
  2236  006850  26D9               	addwf	fsr2l,f,c
  2237  006852  504E               	movf	??_main+1,w,c
  2238  006854  22DA               	addwfc	fsr2h,f,c
  2239  006856  0100               	movlb	0	; () banked
  2240  006858  C0C5  FFDE         	movff	main@adc_value,postinc2
  2241  00685C  0100               	movlb	0	; () banked
  2242  00685E  C0C6  FFDD         	movff	main@adc_value+1,postdec2
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main pic18.c: 91: imaginary_numbers[i] = 0;
  2246  006862  0E00               	movlw	low _imaginary_numbers
  2247  006864  6E4D               	movwf	??_main& (0+255),c
  2248  006866  0E01               	movlw	high _imaginary_numbers
  2249  006868  6E4E               	movwf	(??_main+1)& (0+255),c
  2250  00686A  90D8               	bcf	status,0,c
  2251  00686C  0100               	movlb	0	; () banked
  2252  00686E  35D1               	rlcf	main@i& (0+255),w,b
  2253  006870  6ED9               	movwf	fsr2l,c
  2254  006872  0100               	movlb	0	; () banked
  2255  006874  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2256  006876  6EDA               	movwf	fsr2h,c
  2257  006878  504D               	movf	??_main,w,c
  2258  00687A  26D9               	addwf	fsr2l,f,c
  2259  00687C  504E               	movf	??_main+1,w,c
  2260  00687E  22DA               	addwfc	fsr2h,f,c
  2261  006880  0E00               	movlw	0
  2262  006882  6EDE               	movwf	postinc2,c
  2263  006884  0E00               	movlw	0
  2264  006886  6EDD               	movwf	postdec2,c
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main pic18.c: 92: _delay(1500);
  2268  006888  0EFA               	movlw	250
  2269  00688A                     u2567:
  2270  00688A  D000               	nop2	
  2271  00688C  F000               	nop	
  2272  00688E  2EE8               	decfsz	wreg,f,c
  2273  006890  D7FC               	goto	u2567
  2274  006892  0100               	movlb	0	; () banked
  2275  006894  4BD1               	infsnz	main@i& (0+255),f,b
  2276  006896  2BD2               	incf	(main@i+1)& (0+255),f,b
  2277  006898  D7AD               	goto	L1
  2278  00689A                     l2517:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main pic18.c: 93: }
  2282                           ;main pic18.c: 98: fix_fft(real_numbers, imaginary_numbers, 6);
  2283  00689A  0101               	movlb	1	; () banked
  2284  00689C  0E01               	movlw	high _real_numbers
  2285  00689E  6E0E               	movwf	fix_fft@fr+1,c
  2286  0068A0  0101               	movlb	1	; () banked
  2287  0068A2  0E80               	movlw	low _real_numbers
  2288  0068A4  6E0D               	movwf	fix_fft@fr,c
  2289  0068A6  0101               	movlb	1	; () banked
  2290  0068A8  0E01               	movlw	high _imaginary_numbers
  2291  0068AA  6E10               	movwf	fix_fft@fi+1,c
  2292  0068AC  0101               	movlb	1	; () banked
  2293  0068AE  0E00               	movlw	low _imaginary_numbers
  2294  0068B0  6E0F               	movwf	fix_fft@fi,c
  2295  0068B2  0E00               	movlw	0
  2296  0068B4  6E12               	movwf	fix_fft@m+1,c
  2297  0068B6  0E06               	movlw	6
  2298  0068B8  6E11               	movwf	fix_fft@m,c
  2299  0068BA  EC26  F030         	call	_fix_fft	;wreg free
  2300                           
  2301                           ;main pic18.c: 100: long place, root;
  2302                           ;main pic18.c: 101: int k = 0;
  2303  0068BE  0E00               	movlw	0
  2304  0068C0  0100               	movlb	0	; () banked
  2305  0068C2  6FD0               	movwf	(main@k+1)& (0+255),b
  2306  0068C4  0E00               	movlw	0
  2307  0068C6  0100               	movlb	0	; () banked
  2308  0068C8  6FCF               	movwf	main@k& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;main pic18.c: 102: for (k=0; k < 32; k++) {
  2312  0068CA  0E00               	movlw	0
  2313  0068CC  0100               	movlb	0	; () banked
  2314  0068CE  6FD0               	movwf	(main@k+1)& (0+255),b
  2315  0068D0  0E00               	movlw	0
  2316  0068D2  0100               	movlb	0	; () banked
  2317  0068D4  6FCF               	movwf	main@k& (0+255),b
  2318  0068D6                     
  2319                           ; BSR set to: 0
  2320  0068D6  0100               	movlb	0	; () banked
  2321  0068D8  51D0               	movf	(main@k+1)& (0+255),w,b
  2322  0068DA  0A80               	xorlw	128
  2323  0068DC  0F80               	addlw	-128
  2324  0068DE  0E20               	movlw	32
  2325  0068E0  B4D8               	btfsc	status,2,c
  2326  0068E2  5DCF               	subwf	main@k& (0+255),w,b
  2327  0068E4  B0D8               	btfsc	status,0,c
  2328  0068E6  D1B7               	goto	l2559
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main pic18.c: 103: real_numbers[k] = (real_numbers[k] * real_numbers[k] +
  2332                           ;main pic18.c: 104: imaginary_numbers[k] * imaginary_numbers[k]);
  2333                           
  2334                           ; BSR set to: 0
  2335                           
  2336                           ; BSR set to: 0
  2337  0068E8  0E80               	movlw	low _real_numbers
  2338  0068EA  6E4D               	movwf	??_main& (0+255),c
  2339  0068EC  0E01               	movlw	high _real_numbers
  2340  0068EE  6E4E               	movwf	(??_main+1)& (0+255),c
  2341  0068F0  90D8               	bcf	status,0,c
  2342  0068F2  0100               	movlb	0	; () banked
  2343  0068F4  35CF               	rlcf	main@k& (0+255),w,b
  2344  0068F6  6ED9               	movwf	fsr2l,c
  2345  0068F8  0100               	movlb	0	; () banked
  2346  0068FA  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2347  0068FC  6EDA               	movwf	fsr2h,c
  2348  0068FE  504D               	movf	??_main,w,c
  2349  006900  26D9               	addwf	fsr2l,f,c
  2350  006902  504E               	movf	??_main+1,w,c
  2351  006904  22DA               	addwfc	fsr2h,f,c
  2352  006906  CFDE F001          	movff	postinc2,___wmul@multiplier
  2353  00690A  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2354  00690E  0E80               	movlw	low _real_numbers
  2355  006910  6E4F               	movwf	(??_main+2)& (0+255),c
  2356  006912  0E01               	movlw	high _real_numbers
  2357  006914  6E50               	movwf	(??_main+3)& (0+255),c
  2358  006916  90D8               	bcf	status,0,c
  2359  006918  0100               	movlb	0	; () banked
  2360  00691A  35CF               	rlcf	main@k& (0+255),w,b
  2361  00691C  6ED9               	movwf	fsr2l,c
  2362  00691E  0100               	movlb	0	; () banked
  2363  006920  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2364  006922  6EDA               	movwf	fsr2h,c
  2365  006924  504F               	movf	??_main+2,w,c
  2366  006926  26D9               	addwf	fsr2l,f,c
  2367  006928  5050               	movf	??_main+3,w,c
  2368  00692A  22DA               	addwfc	fsr2h,f,c
  2369  00692C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2370  006930  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2371  006934  ECE7  F02B         	call	___wmul	;wreg free
  2372  006938  C001  F051         	movff	?___wmul,??_main+4
  2373  00693C  C002  F052         	movff	?___wmul+1,??_main+5
  2374  006940  0E00               	movlw	low _imaginary_numbers
  2375  006942  6E53               	movwf	(??_main+6)& (0+255),c
  2376  006944  0E01               	movlw	high _imaginary_numbers
  2377  006946  6E54               	movwf	(??_main+7)& (0+255),c
  2378  006948  90D8               	bcf	status,0,c
  2379  00694A  0100               	movlb	0	; () banked
  2380  00694C  35CF               	rlcf	main@k& (0+255),w,b
  2381  00694E  6ED9               	movwf	fsr2l,c
  2382  006950  0100               	movlb	0	; () banked
  2383  006952  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2384  006954  6EDA               	movwf	fsr2h,c
  2385  006956  5053               	movf	??_main+6,w,c
  2386  006958  26D9               	addwf	fsr2l,f,c
  2387  00695A  5054               	movf	??_main+7,w,c
  2388  00695C  22DA               	addwfc	fsr2h,f,c
  2389  00695E  CFDE F001          	movff	postinc2,___wmul@multiplier
  2390  006962  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2391  006966  0E00               	movlw	low _imaginary_numbers
  2392  006968  6E55               	movwf	(??_main+8)& (0+255),c
  2393  00696A  0E01               	movlw	high _imaginary_numbers
  2394  00696C  6E56               	movwf	(??_main+9)& (0+255),c
  2395  00696E  90D8               	bcf	status,0,c
  2396  006970  0100               	movlb	0	; () banked
  2397  006972  35CF               	rlcf	main@k& (0+255),w,b
  2398  006974  6ED9               	movwf	fsr2l,c
  2399  006976  0100               	movlb	0	; () banked
  2400  006978  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2401  00697A  6EDA               	movwf	fsr2h,c
  2402  00697C  5055               	movf	??_main+8,w,c
  2403  00697E  26D9               	addwf	fsr2l,f,c
  2404  006980  5056               	movf	??_main+9,w,c
  2405  006982  22DA               	addwfc	fsr2h,f,c
  2406  006984  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2407  006988  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2408  00698C  ECE7  F02B         	call	___wmul	;wreg free
  2409  006990  5001               	movf	?___wmul,w,c
  2410  006992  2651               	addwf	??_main+4,f,c
  2411  006994  5002               	movf	?___wmul+1,w,c
  2412  006996  2252               	addwfc	??_main+5,f,c
  2413  006998  0E80               	movlw	low _real_numbers
  2414  00699A  6E57               	movwf	(??_main+10)& (0+255),c
  2415  00699C  0E01               	movlw	high _real_numbers
  2416  00699E  6E58               	movwf	(??_main+11)& (0+255),c
  2417  0069A0  90D8               	bcf	status,0,c
  2418  0069A2  0100               	movlb	0	; () banked
  2419  0069A4  35CF               	rlcf	main@k& (0+255),w,b
  2420  0069A6  6ED9               	movwf	fsr2l,c
  2421  0069A8  0100               	movlb	0	; () banked
  2422  0069AA  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2423  0069AC  6EDA               	movwf	fsr2h,c
  2424  0069AE  5057               	movf	??_main+10,w,c
  2425  0069B0  26D9               	addwf	fsr2l,f,c
  2426  0069B2  5058               	movf	??_main+11,w,c
  2427  0069B4  22DA               	addwfc	fsr2h,f,c
  2428  0069B6  C051  FFDE         	movff	??_main+4,postinc2
  2429  0069BA  C052  FFDD         	movff	??_main+5,postdec2
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;main pic18.c: 106: place = 0x40000000;
  2433  0069BE  0E00               	movlw	0
  2434  0069C0  0100               	movlb	0	; () banked
  2435  0069C2  6FCB               	movwf	main@place& (0+255),b
  2436  0069C4  0E00               	movlw	0
  2437  0069C6  0100               	movlb	0	; () banked
  2438  0069C8  6FCC               	movwf	(main@place+1)& (0+255),b
  2439  0069CA  0E00               	movlw	0
  2440  0069CC  0100               	movlb	0	; () banked
  2441  0069CE  6FCD               	movwf	(main@place+2)& (0+255),b
  2442  0069D0  0E40               	movlw	64
  2443  0069D2  0100               	movlb	0	; () banked
  2444  0069D4  6FCE               	movwf	(main@place+3)& (0+255),b
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;main pic18.c: 107: root = 0;
  2448  0069D6  0E00               	movlw	0
  2449  0069D8  0100               	movlb	0	; () banked
  2450  0069DA  6FC7               	movwf	main@root& (0+255),b
  2451  0069DC  0E00               	movlw	0
  2452  0069DE  0100               	movlb	0	; () banked
  2453  0069E0  6FC8               	movwf	(main@root+1)& (0+255),b
  2454  0069E2  0E00               	movlw	0
  2455  0069E4  0100               	movlb	0	; () banked
  2456  0069E6  6FC9               	movwf	(main@root+2)& (0+255),b
  2457  0069E8  0E00               	movlw	0
  2458  0069EA  0100               	movlb	0	; () banked
  2459  0069EC  6FCA               	movwf	(main@root+3)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main pic18.c: 109: if (real_numbers[k] >= 0) {
  2463  0069EE  0E80               	movlw	low _real_numbers
  2464  0069F0  6E4D               	movwf	??_main& (0+255),c
  2465  0069F2  0E01               	movlw	high _real_numbers
  2466  0069F4  6E4E               	movwf	(??_main+1)& (0+255),c
  2467  0069F6  90D8               	bcf	status,0,c
  2468  0069F8  0100               	movlb	0	; () banked
  2469  0069FA  35CF               	rlcf	main@k& (0+255),w,b
  2470  0069FC  6ED9               	movwf	fsr2l,c
  2471  0069FE  0100               	movlb	0	; () banked
  2472  006A00  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2473  006A02  6EDA               	movwf	fsr2h,c
  2474  006A04  504D               	movf	??_main,w,c
  2475  006A06  26D9               	addwf	fsr2l,f,c
  2476  006A08  504E               	movf	??_main+1,w,c
  2477  006A0A  22DA               	addwfc	fsr2h,f,c
  2478  006A0C  CFDE F04F          	movff	postinc2,??_main+2
  2479  006A10  CFDD F050          	movff	postdec2,??_main+3
  2480  006A14  AE50               	btfss	??_main+3,7,c
  2481  006A16  D021               	goto	l2539
  2482  006A18  D105               	goto	l2553
  2483  006A1A                     l2537:
  2484                           
  2485                           ; BSR set to: 0
  2486  006A1A  0E02               	movlw	2
  2487  006A1C  6E4D               	movwf	??_main& (0+255),c
  2488  006A1E  0100               	movlb	0	; () banked
  2489  006A20  C0CB  F04E         	movff	main@place,??_main+1
  2490  006A24  0100               	movlb	0	; () banked
  2491  006A26  C0CC  F04F         	movff	main@place+1,??_main+2
  2492  006A2A  0100               	movlb	0	; () banked
  2493  006A2C  C0CD  F050         	movff	main@place+2,??_main+3
  2494  006A30  0100               	movlb	0	; () banked
  2495  006A32  C0CE  F051         	movff	main@place+3,??_main+4
  2496  006A36                     u2025:
  2497  006A36  664D               	tstfsz	??_main,c
  2498  006A38  D001               	goto	u2026
  2499  006A3A  D007               	goto	u2027
  2500  006A3C                     u2026:
  2501  006A3C  3451               	rlcf	??_main+4,w,c
  2502  006A3E  3251               	rrcf	??_main+4,f,c
  2503  006A40  3250               	rrcf	??_main+3,f,c
  2504  006A42  324F               	rrcf	??_main+2,f,c
  2505  006A44  324E               	rrcf	??_main+1,f,c
  2506  006A46  2E4D               	decfsz	??_main,f,c
  2507  006A48  D7F6               	goto	u2025
  2508  006A4A                     u2027:
  2509  006A4A  C04E  F0CB         	movff	??_main+1,main@place
  2510  006A4E  C04F  F0CC         	movff	??_main+2,main@place+1
  2511  006A52  C050  F0CD         	movff	??_main+3,main@place+2
  2512  006A56  C051  F0CE         	movff	??_main+4,main@place+3
  2513  006A5A                     l2539:
  2514                           
  2515                           ; BSR set to: 0
  2516  006A5A  0E80               	movlw	low _real_numbers
  2517  006A5C  6E4D               	movwf	??_main& (0+255),c
  2518  006A5E  0E01               	movlw	high _real_numbers
  2519  006A60  6E4E               	movwf	(??_main+1)& (0+255),c
  2520  006A62  90D8               	bcf	status,0,c
  2521  006A64  0100               	movlb	0	; () banked
  2522  006A66  35CF               	rlcf	main@k& (0+255),w,b
  2523  006A68  6ED9               	movwf	fsr2l,c
  2524  006A6A  0100               	movlb	0	; () banked
  2525  006A6C  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2526  006A6E  6EDA               	movwf	fsr2h,c
  2527  006A70  504D               	movf	??_main,w,c
  2528  006A72  26D9               	addwf	fsr2l,f,c
  2529  006A74  504E               	movf	??_main+1,w,c
  2530  006A76  22DA               	addwfc	fsr2h,f,c
  2531  006A78  CFDE F04F          	movff	postinc2,??_main+2
  2532  006A7C  CFDD F050          	movff	postdec2,??_main+3
  2533  006A80  C04F  F051         	movff	??_main+2,??_main+4
  2534  006A84  C050  F052         	movff	??_main+3,??_main+5
  2535  006A88  0E00               	movlw	0
  2536  006A8A  BE52               	btfsc	(??_main+5)& (0+255),7,c
  2537  006A8C  0EFF               	movlw	255
  2538  006A8E  6E53               	movwf	(??_main+6)& (0+255),c
  2539  006A90  6E54               	movwf	(??_main+7)& (0+255),c
  2540  006A92  5054               	movf	??_main+7,w,c
  2541  006A94  0A80               	xorlw	128
  2542  006A96  6E55               	movwf	(??_main+8)& (0+255),c
  2543  006A98  0100               	movlb	0	; () banked
  2544  006A9A  51CB               	movf	main@place& (0+255),w,b
  2545  006A9C  5C51               	subwf	??_main+4,w,c
  2546  006A9E  0100               	movlb	0	; () banked
  2547  006AA0  51CC               	movf	(main@place+1)& (0+255),w,b
  2548  006AA2  5852               	subwfb	??_main+5,w,c
  2549  006AA4  0100               	movlb	0	; () banked
  2550  006AA6  51CD               	movf	(main@place+2)& (0+255),w,b
  2551  006AA8  5853               	subwfb	??_main+6,w,c
  2552  006AAA  0100               	movlb	0	; () banked
  2553  006AAC  51CE               	movf	(main@place+3)& (0+255),w,b
  2554  006AAE  0A80               	xorlw	128
  2555  006AB0  5855               	subwfb	(??_main+8)& (0+255),w,c
  2556  006AB2  B0D8               	btfsc	status,0,c
  2557  006AB4  D0B0               	goto	l2551
  2558  006AB6  D7B1               	goto	l2537
  2559  006AB8                     l2541:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main pic18.c: 114: if (real_numbers[k] >= root + place) {
  2563  006AB8  0100               	movlb	0	; () banked
  2564  006ABA  51CB               	movf	main@place& (0+255),w,b
  2565  006ABC  0100               	movlb	0	; () banked
  2566  006ABE  25C7               	addwf	main@root& (0+255),w,b
  2567  006AC0  6E4D               	movwf	??_main& (0+255),c
  2568  006AC2  0100               	movlb	0	; () banked
  2569  006AC4  51CC               	movf	(main@place+1)& (0+255),w,b
  2570  006AC6  0100               	movlb	0	; () banked
  2571  006AC8  21C8               	addwfc	(main@root+1)& (0+255),w,b
  2572  006ACA  6E4E               	movwf	(??_main+1)& (0+255),c
  2573  006ACC  0100               	movlb	0	; () banked
  2574  006ACE  51CD               	movf	(main@place+2)& (0+255),w,b
  2575  006AD0  0100               	movlb	0	; () banked
  2576  006AD2  21C9               	addwfc	(main@root+2)& (0+255),w,b
  2577  006AD4  6E4F               	movwf	(??_main+2)& (0+255),c
  2578  006AD6  0100               	movlb	0	; () banked
  2579  006AD8  51CE               	movf	(main@place+3)& (0+255),w,b
  2580  006ADA  0100               	movlb	0	; () banked
  2581  006ADC  21CA               	addwfc	(main@root+3)& (0+255),w,b
  2582  006ADE  6E50               	movwf	(??_main+3)& (0+255),c
  2583  006AE0  0E80               	movlw	low _real_numbers
  2584  006AE2  6E51               	movwf	(??_main+4)& (0+255),c
  2585  006AE4  0E01               	movlw	high _real_numbers
  2586  006AE6  6E52               	movwf	(??_main+5)& (0+255),c
  2587  006AE8  90D8               	bcf	status,0,c
  2588  006AEA  0100               	movlb	0	; () banked
  2589  006AEC  35CF               	rlcf	main@k& (0+255),w,b
  2590  006AEE  6ED9               	movwf	fsr2l,c
  2591  006AF0  0100               	movlb	0	; () banked
  2592  006AF2  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2593  006AF4  6EDA               	movwf	fsr2h,c
  2594  006AF6  5051               	movf	??_main+4,w,c
  2595  006AF8  26D9               	addwf	fsr2l,f,c
  2596  006AFA  5052               	movf	??_main+5,w,c
  2597  006AFC  22DA               	addwfc	fsr2h,f,c
  2598  006AFE  CFDE F053          	movff	postinc2,??_main+6
  2599  006B02  CFDD F054          	movff	postdec2,??_main+7
  2600  006B06  C053  F055         	movff	??_main+6,??_main+8
  2601  006B0A  C054  F056         	movff	??_main+7,??_main+9
  2602  006B0E  0E00               	movlw	0
  2603  006B10  BE56               	btfsc	(??_main+9)& (0+255),7,c
  2604  006B12  0EFF               	movlw	255
  2605  006B14  6E57               	movwf	(??_main+10)& (0+255),c
  2606  006B16  6E58               	movwf	(??_main+11)& (0+255),c
  2607  006B18  5058               	movf	??_main+11,w,c
  2608  006B1A  0A80               	xorlw	128
  2609  006B1C  6E59               	movwf	(??_main+12)& (0+255),c
  2610  006B1E  504D               	movf	??_main,w,c
  2611  006B20  5C55               	subwf	??_main+8,w,c
  2612  006B22  504E               	movf	??_main+1,w,c
  2613  006B24  5856               	subwfb	??_main+9,w,c
  2614  006B26  504F               	movf	??_main+2,w,c
  2615  006B28  5857               	subwfb	??_main+10,w,c
  2616  006B2A  5050               	movf	??_main+3,w,c
  2617  006B2C  0A80               	xorlw	128
  2618  006B2E  5859               	subwfb	(??_main+12)& (0+255),w,c
  2619  006B30  A0D8               	btfss	status,0,c
  2620  006B32  D038               	goto	l2547
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;main pic18.c: 115: real_numbers[k] -= root + place;
  2624  006B34  0100               	movlb	0	; () banked
  2625  006B36  C0C7  F04D         	movff	main@root,??_main
  2626  006B3A  0100               	movlb	0	; () banked
  2627  006B3C  C0C8  F04E         	movff	main@root+1,??_main+1
  2628  006B40  0100               	movlb	0	; () banked
  2629  006B42  51CB               	movf	main@place& (0+255),w,b
  2630  006B44  264D               	addwf	??_main,f,c
  2631  006B46  0100               	movlb	0	; () banked
  2632  006B48  51CC               	movf	(main@place+1)& (0+255),w,b
  2633  006B4A  224E               	addwfc	??_main+1,f,c
  2634  006B4C  0E80               	movlw	low _real_numbers
  2635  006B4E  6E4F               	movwf	(??_main+2)& (0+255),c
  2636  006B50  0E01               	movlw	high _real_numbers
  2637  006B52  6E50               	movwf	(??_main+3)& (0+255),c
  2638  006B54  90D8               	bcf	status,0,c
  2639  006B56  0100               	movlb	0	; () banked
  2640  006B58  35CF               	rlcf	main@k& (0+255),w,b
  2641  006B5A  6ED9               	movwf	fsr2l,c
  2642  006B5C  0100               	movlb	0	; () banked
  2643  006B5E  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2644  006B60  6EDA               	movwf	fsr2h,c
  2645  006B62  504F               	movf	??_main+2,w,c
  2646  006B64  26D9               	addwf	fsr2l,f,c
  2647  006B66  5050               	movf	??_main+3,w,c
  2648  006B68  22DA               	addwfc	fsr2h,f,c
  2649  006B6A  504D               	movf	??_main,w,c
  2650  006B6C  5EDE               	subwf	postinc2,f,c
  2651  006B6E  504E               	movf	??_main+1,w,c
  2652  006B70  5ADD               	subwfb	postdec2,f,c
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main pic18.c: 116: root += place * 2;
  2656  006B72  90D8               	bcf	status,0,c
  2657  006B74  0100               	movlb	0	; () banked
  2658  006B76  35CB               	rlcf	main@place& (0+255),w,b
  2659  006B78  6E4D               	movwf	??_main& (0+255),c
  2660  006B7A  0100               	movlb	0	; () banked
  2661  006B7C  35CC               	rlcf	(main@place+1)& (0+255),w,b
  2662  006B7E  6E4E               	movwf	(??_main+1)& (0+255),c
  2663  006B80  0100               	movlb	0	; () banked
  2664  006B82  35CD               	rlcf	(main@place+2)& (0+255),w,b
  2665  006B84  6E4F               	movwf	(??_main+2)& (0+255),c
  2666  006B86  0100               	movlb	0	; () banked
  2667  006B88  35CE               	rlcf	(main@place+3)& (0+255),w,b
  2668  006B8A  6E50               	movwf	(??_main+3)& (0+255),c
  2669  006B8C  504D               	movf	??_main,w,c
  2670  006B8E  0100               	movlb	0	; () banked
  2671  006B90  27C7               	addwf	main@root& (0+255),f,b
  2672  006B92  504E               	movf	??_main+1,w,c
  2673  006B94  0100               	movlb	0	; () banked
  2674  006B96  23C8               	addwfc	(main@root+1)& (0+255),f,b
  2675  006B98  504F               	movf	??_main+2,w,c
  2676  006B9A  0100               	movlb	0	; () banked
  2677  006B9C  23C9               	addwfc	(main@root+2)& (0+255),f,b
  2678  006B9E  5050               	movf	??_main+3,w,c
  2679  006BA0  0100               	movlb	0	; () banked
  2680  006BA2  23CA               	addwfc	(main@root+3)& (0+255),f,b
  2681  006BA4                     l2547:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main pic18.c: 117: }
  2685                           ;main pic18.c: 119: root = root >> 1;
  2686  006BA4  0100               	movlb	0	; () banked
  2687  006BA6  C0C7  F04D         	movff	main@root,??_main
  2688  006BAA  0100               	movlb	0	; () banked
  2689  006BAC  C0C8  F04E         	movff	main@root+1,??_main+1
  2690  006BB0  0100               	movlb	0	; () banked
  2691  006BB2  C0C9  F04F         	movff	main@root+2,??_main+2
  2692  006BB6  0100               	movlb	0	; () banked
  2693  006BB8  C0CA  F050         	movff	main@root+3,??_main+3
  2694  006BBC  3450               	rlcf	??_main+3,w,c
  2695  006BBE  3250               	rrcf	??_main+3,f,c
  2696  006BC0  324F               	rrcf	??_main+2,f,c
  2697  006BC2  324E               	rrcf	??_main+1,f,c
  2698  006BC4  324D               	rrcf	??_main,f,c
  2699  006BC6  C04D  F0C7         	movff	??_main,main@root
  2700  006BCA  C04E  F0C8         	movff	??_main+1,main@root+1
  2701  006BCE  C04F  F0C9         	movff	??_main+2,main@root+2
  2702  006BD2  C050  F0CA         	movff	??_main+3,main@root+3
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main pic18.c: 120: place = place >> 2;
  2706  006BD6  0E02               	movlw	2
  2707  006BD8  6E4D               	movwf	??_main& (0+255),c
  2708  006BDA  0100               	movlb	0	; () banked
  2709  006BDC  C0CB  F04E         	movff	main@place,??_main+1
  2710  006BE0  0100               	movlb	0	; () banked
  2711  006BE2  C0CC  F04F         	movff	main@place+1,??_main+2
  2712  006BE6  0100               	movlb	0	; () banked
  2713  006BE8  C0CD  F050         	movff	main@place+2,??_main+3
  2714  006BEC  0100               	movlb	0	; () banked
  2715  006BEE  C0CE  F051         	movff	main@place+3,??_main+4
  2716  006BF2                     u2055:
  2717  006BF2  664D               	tstfsz	??_main,c
  2718  006BF4  D001               	goto	u2056
  2719  006BF6  D007               	goto	u2057
  2720  006BF8                     u2056:
  2721  006BF8  3451               	rlcf	??_main+4,w,c
  2722  006BFA  3251               	rrcf	??_main+4,f,c
  2723  006BFC  3250               	rrcf	??_main+3,f,c
  2724  006BFE  324F               	rrcf	??_main+2,f,c
  2725  006C00  324E               	rrcf	??_main+1,f,c
  2726  006C02  2E4D               	decfsz	??_main,f,c
  2727  006C04  D7F6               	goto	u2055
  2728  006C06                     u2057:
  2729  006C06  C04E  F0CB         	movff	??_main+1,main@place
  2730  006C0A  C04F  F0CC         	movff	??_main+2,main@place+1
  2731  006C0E  C050  F0CD         	movff	??_main+3,main@place+2
  2732  006C12  C051  F0CE         	movff	??_main+4,main@place+3
  2733  006C16                     l2551:
  2734                           
  2735                           ; BSR set to: 0
  2736  006C16  0100               	movlb	0	; () banked
  2737  006C18  51CE               	movf	(main@place+3)& (0+255),w,b
  2738  006C1A  11CB               	iorwf	main@place& (0+255),w,b
  2739  006C1C  11CC               	iorwf	(main@place+1)& (0+255),w,b
  2740  006C1E  11CD               	iorwf	(main@place+2)& (0+255),w,b
  2741  006C20  A4D8               	btfss	status,2,c
  2742  006C22  D74A               	goto	l2541
  2743  006C24                     l2553:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main pic18.c: 121: }
  2747                           ;main pic18.c: 122: }
  2748                           ;main pic18.c: 124: real_numbers[k] = root;
  2749  006C24  0E80               	movlw	low _real_numbers
  2750  006C26  6E4D               	movwf	??_main& (0+255),c
  2751  006C28  0E01               	movlw	high _real_numbers
  2752  006C2A  6E4E               	movwf	(??_main+1)& (0+255),c
  2753  006C2C  90D8               	bcf	status,0,c
  2754  006C2E  0100               	movlb	0	; () banked
  2755  006C30  35CF               	rlcf	main@k& (0+255),w,b
  2756  006C32  6ED9               	movwf	fsr2l,c
  2757  006C34  0100               	movlb	0	; () banked
  2758  006C36  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2759  006C38  6EDA               	movwf	fsr2h,c
  2760  006C3A  504D               	movf	??_main,w,c
  2761  006C3C  26D9               	addwf	fsr2l,f,c
  2762  006C3E  504E               	movf	??_main+1,w,c
  2763  006C40  22DA               	addwfc	fsr2h,f,c
  2764  006C42  0100               	movlb	0	; () banked
  2765  006C44  C0C7  FFDE         	movff	main@root,postinc2
  2766  006C48  0100               	movlb	0	; () banked
  2767  006C4A  C0C8  FFDD         	movff	main@root+1,postdec2
  2768                           
  2769                           ; BSR set to: 0
  2770  006C4E  0100               	movlb	0	; () banked
  2771  006C50  4BCF               	infsnz	main@k& (0+255),f,b
  2772  006C52  2BD0               	incf	(main@k+1)& (0+255),f,b
  2773  006C54  D640               	goto	L2
  2774  006C56                     l2559:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main pic18.c: 125: }
  2778                           ;main pic18.c: 127: for(i = 1; i < 33; i++) {
  2779  006C56  0E00               	movlw	0
  2780  006C58  0100               	movlb	0	; () banked
  2781  006C5A  6FD2               	movwf	(main@i+1)& (0+255),b
  2782  006C5C  0E01               	movlw	1
  2783  006C5E  0100               	movlb	0	; () banked
  2784  006C60  6FD1               	movwf	main@i& (0+255),b
  2785  006C62                     
  2786                           ; BSR set to: 0
  2787  006C62  0100               	movlb	0	; () banked
  2788  006C64  51D2               	movf	(main@i+1)& (0+255),w,b
  2789  006C66  0A80               	xorlw	128
  2790  006C68  0F80               	addlw	-128
  2791  006C6A  0E21               	movlw	33
  2792  006C6C  B4D8               	btfsc	status,2,c
  2793  006C6E  5DD1               	subwf	main@i& (0+255),w,b
  2794  006C70  B0D8               	btfsc	status,0,c
  2795  006C72  D06F               	goto	l2571
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main pic18.c: 128: real_numbers[i] = oldRealNumbers[i - 1] * 10 / 16 +
  2799                           ;main pic18.c: 129: real_numbers[i] * 6 / 16;
  2800                           
  2801                           ; BSR set to: 0
  2802                           
  2803                           ; BSR set to: 0
  2804  006C74  0EFE               	movlw	254
  2805  006C76  6E4D               	movwf	??_main& (0+255),c
  2806  006C78  0EFF               	movlw	255
  2807  006C7A  6E4E               	movwf	(??_main+1)& (0+255),c
  2808  006C7C  0100               	movlb	0	; () banked
  2809  006C7E  C0D1  F04F         	movff	main@i,??_main+2
  2810  006C82  0100               	movlb	0	; () banked
  2811  006C84  C0D2  F050         	movff	main@i+1,??_main+3
  2812  006C88  90D8               	bcf	status,0,c
  2813  006C8A  364F               	rlcf	??_main+2,f,c
  2814  006C8C  3650               	rlcf	??_main+3,f,c
  2815  006C8E  504D               	movf	??_main,w,c
  2816  006C90  264F               	addwf	??_main+2,f,c
  2817  006C92  504E               	movf	??_main+1,w,c
  2818  006C94  2250               	addwfc	??_main+3,f,c
  2819  006C96  0100               	movlb	0	; () banked
  2820  006C98  0E60               	movlw	low _oldRealNumbers
  2821  006C9A  244F               	addwf	??_main+2,w,c
  2822  006C9C  6ED9               	movwf	fsr2l,c
  2823  006C9E  0100               	movlb	0	; () banked
  2824  006CA0  0E00               	movlw	high _oldRealNumbers
  2825  006CA2  2050               	addwfc	??_main+3,w,c
  2826  006CA4  6EDA               	movwf	fsr2h,c
  2827  006CA6  CFDE F001          	movff	postinc2,___wmul@multiplier
  2828  006CAA  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2829  006CAE  0E00               	movlw	0
  2830  006CB0  6E04               	movwf	___wmul@multiplicand+1,c
  2831  006CB2  0E0A               	movlw	10
  2832  006CB4  6E03               	movwf	___wmul@multiplicand,c
  2833  006CB6  ECE7  F02B         	call	___wmul	;wreg free
  2834  006CBA  C001  F007         	movff	?___wmul,___awdiv@dividend
  2835  006CBE  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2836  006CC2  0E00               	movlw	0
  2837  006CC4  6E0A               	movwf	___awdiv@divisor+1,c
  2838  006CC6  0E10               	movlw	16
  2839  006CC8  6E09               	movwf	___awdiv@divisor,c
  2840  006CCA  EC0C  F02E         	call	___awdiv	;wreg free
  2841  006CCE  C007  F051         	movff	?___awdiv,??_main+4
  2842  006CD2  C008  F052         	movff	?___awdiv+1,??_main+5
  2843  006CD6  0E80               	movlw	low _real_numbers
  2844  006CD8  6E53               	movwf	(??_main+6)& (0+255),c
  2845  006CDA  0E01               	movlw	high _real_numbers
  2846  006CDC  6E54               	movwf	(??_main+7)& (0+255),c
  2847  006CDE  90D8               	bcf	status,0,c
  2848  006CE0  0100               	movlb	0	; () banked
  2849  006CE2  35D1               	rlcf	main@i& (0+255),w,b
  2850  006CE4  6ED9               	movwf	fsr2l,c
  2851  006CE6  0100               	movlb	0	; () banked
  2852  006CE8  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2853  006CEA  6EDA               	movwf	fsr2h,c
  2854  006CEC  5053               	movf	??_main+6,w,c
  2855  006CEE  26D9               	addwf	fsr2l,f,c
  2856  006CF0  5054               	movf	??_main+7,w,c
  2857  006CF2  22DA               	addwfc	fsr2h,f,c
  2858  006CF4  CFDE F001          	movff	postinc2,___wmul@multiplier
  2859  006CF8  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2860  006CFC  0E00               	movlw	0
  2861  006CFE  6E04               	movwf	___wmul@multiplicand+1,c
  2862  006D00  0E06               	movlw	6
  2863  006D02  6E03               	movwf	___wmul@multiplicand,c
  2864  006D04  ECE7  F02B         	call	___wmul	;wreg free
  2865  006D08  C001  F007         	movff	?___wmul,___awdiv@dividend
  2866  006D0C  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2867  006D10  0E00               	movlw	0
  2868  006D12  6E0A               	movwf	___awdiv@divisor+1,c
  2869  006D14  0E10               	movlw	16
  2870  006D16  6E09               	movwf	___awdiv@divisor,c
  2871  006D18  EC0C  F02E         	call	___awdiv	;wreg free
  2872  006D1C  5007               	movf	?___awdiv,w,c
  2873  006D1E  2651               	addwf	??_main+4,f,c
  2874  006D20  5008               	movf	?___awdiv+1,w,c
  2875  006D22  2252               	addwfc	??_main+5,f,c
  2876  006D24  0E80               	movlw	low _real_numbers
  2877  006D26  6E55               	movwf	(??_main+8)& (0+255),c
  2878  006D28  0E01               	movlw	high _real_numbers
  2879  006D2A  6E56               	movwf	(??_main+9)& (0+255),c
  2880  006D2C  90D8               	bcf	status,0,c
  2881  006D2E  0100               	movlb	0	; () banked
  2882  006D30  35D1               	rlcf	main@i& (0+255),w,b
  2883  006D32  6ED9               	movwf	fsr2l,c
  2884  006D34  0100               	movlb	0	; () banked
  2885  006D36  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2886  006D38  6EDA               	movwf	fsr2h,c
  2887  006D3A  5055               	movf	??_main+8,w,c
  2888  006D3C  26D9               	addwf	fsr2l,f,c
  2889  006D3E  5056               	movf	??_main+9,w,c
  2890  006D40  22DA               	addwfc	fsr2h,f,c
  2891  006D42  C051  FFDE         	movff	??_main+4,postinc2
  2892  006D46  C052  FFDD         	movff	??_main+5,postdec2
  2893                           
  2894                           ; BSR set to: 0
  2895  006D4A  0100               	movlb	0	; () banked
  2896  006D4C  4BD1               	infsnz	main@i& (0+255),f,b
  2897  006D4E  2BD2               	incf	(main@i+1)& (0+255),f,b
  2898  006D50  D788               	goto	L3
  2899  006D52                     l2571:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main pic18.c: 130: }
  2903                           ;main pic18.c: 132: for (i = 1; i < 33; i++) {
  2904  006D52  0E00               	movlw	0
  2905  006D54  0100               	movlb	0	; () banked
  2906  006D56  6FD2               	movwf	(main@i+1)& (0+255),b
  2907  006D58  0E01               	movlw	1
  2908  006D5A  0100               	movlb	0	; () banked
  2909  006D5C  6FD1               	movwf	main@i& (0+255),b
  2910  006D5E                     
  2911                           ; BSR set to: 0
  2912  006D5E  0100               	movlb	0	; () banked
  2913  006D60  51D2               	movf	(main@i+1)& (0+255),w,b
  2914  006D62  0A80               	xorlw	128
  2915  006D64  0F80               	addlw	-128
  2916  006D66  0E21               	movlw	33
  2917  006D68  B4D8               	btfsc	status,2,c
  2918  006D6A  5DD1               	subwf	main@i& (0+255),w,b
  2919  006D6C  B0D8               	btfsc	status,0,c
  2920  006D6E  D030               	goto	l2583
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;main pic18.c: 133: oldRealNumbers[i - 1] = real_numbers[i];
  2924                           
  2925                           ; BSR set to: 0
  2926                           
  2927                           ; BSR set to: 0
  2928  006D70  0E80               	movlw	low _real_numbers
  2929  006D72  6E4D               	movwf	??_main& (0+255),c
  2930  006D74  0E01               	movlw	high _real_numbers
  2931  006D76  6E4E               	movwf	(??_main+1)& (0+255),c
  2932  006D78  90D8               	bcf	status,0,c
  2933  006D7A  0100               	movlb	0	; () banked
  2934  006D7C  35D1               	rlcf	main@i& (0+255),w,b
  2935  006D7E  6ED9               	movwf	fsr2l,c
  2936  006D80  0100               	movlb	0	; () banked
  2937  006D82  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2938  006D84  6EDA               	movwf	fsr2h,c
  2939  006D86  504D               	movf	??_main,w,c
  2940  006D88  26D9               	addwf	fsr2l,f,c
  2941  006D8A  504E               	movf	??_main+1,w,c
  2942  006D8C  22DA               	addwfc	fsr2h,f,c
  2943  006D8E  0EFE               	movlw	254
  2944  006D90  6E4F               	movwf	(??_main+2)& (0+255),c
  2945  006D92  0EFF               	movlw	255
  2946  006D94  6E50               	movwf	(??_main+3)& (0+255),c
  2947  006D96  0100               	movlb	0	; () banked
  2948  006D98  C0D1  F051         	movff	main@i,??_main+4
  2949  006D9C  0100               	movlb	0	; () banked
  2950  006D9E  C0D2  F052         	movff	main@i+1,??_main+5
  2951  006DA2  90D8               	bcf	status,0,c
  2952  006DA4  3651               	rlcf	??_main+4,f,c
  2953  006DA6  3652               	rlcf	??_main+5,f,c
  2954  006DA8  504F               	movf	??_main+2,w,c
  2955  006DAA  2651               	addwf	??_main+4,f,c
  2956  006DAC  5050               	movf	??_main+3,w,c
  2957  006DAE  2252               	addwfc	??_main+5,f,c
  2958  006DB0  0100               	movlb	0	; () banked
  2959  006DB2  0E60               	movlw	low _oldRealNumbers
  2960  006DB4  2451               	addwf	??_main+4,w,c
  2961  006DB6  6EE1               	movwf	fsr1l,c
  2962  006DB8  0100               	movlb	0	; () banked
  2963  006DBA  0E00               	movlw	high _oldRealNumbers
  2964  006DBC  2052               	addwfc	??_main+5,w,c
  2965  006DBE  6EE2               	movwf	fsr1h,c
  2966  006DC0  CFDE FFE6          	movff	postinc2,postinc1
  2967  006DC4  CFDD FFE5          	movff	postdec2,postdec1
  2968                           
  2969                           ; BSR set to: 0
  2970  006DC8  0100               	movlb	0	; () banked
  2971  006DCA  4BD1               	infsnz	main@i& (0+255),f,b
  2972  006DCC  2BD2               	incf	(main@i+1)& (0+255),f,b
  2973  006DCE  D7C7               	goto	L4
  2974  006DD0                     l2583:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main pic18.c: 134: }
  2978                           ;main pic18.c: 138: alarm_tally = 0;
  2979  006DD0  0E00               	movlw	0
  2980  006DD2  0100               	movlb	0	; () banked
  2981  006DD4  6FBE               	movwf	(_alarm_tally+1)& (0+255),b
  2982  006DD6  0E00               	movlw	0
  2983  006DD8  0100               	movlb	0	; () banked
  2984  006DDA  6FBD               	movwf	_alarm_tally& (0+255),b
  2985                           
  2986                           ;main pic18.c: 139: growl_tally = 0;
  2987  006DDC  0E00               	movlw	0
  2988  006DDE  0100               	movlb	0	; () banked
  2989  006DE0  6FC0               	movwf	(_growl_tally+1)& (0+255),b
  2990  006DE2  0E00               	movlw	0
  2991  006DE4  0100               	movlb	0	; () banked
  2992  006DE6  6FBF               	movwf	_growl_tally& (0+255),b
  2993                           
  2994                           ;main pic18.c: 140: horn_tally = 0;
  2995  006DE8  0E00               	movlw	0
  2996  006DEA  0100               	movlb	0	; () banked
  2997  006DEC  6FC2               	movwf	(_horn_tally+1)& (0+255),b
  2998  006DEE  0E00               	movlw	0
  2999  006DF0  0100               	movlb	0	; () banked
  3000  006DF2  6FC1               	movwf	_horn_tally& (0+255),b
  3001                           
  3002                           ;main pic18.c: 141: scream_tally = 0;
  3003  006DF4  0E00               	movlw	0
  3004  006DF6  0100               	movlb	0	; () banked
  3005  006DF8  6FC4               	movwf	(_scream_tally+1)& (0+255),b
  3006  006DFA  0E00               	movlw	0
  3007  006DFC  0100               	movlb	0	; () banked
  3008  006DFE  6FC3               	movwf	_scream_tally& (0+255),b
  3009                           
  3010                           ;main pic18.c: 144: for(i = 0; i < 31; i++) {
  3011  006E00  0E00               	movlw	0
  3012  006E02  0100               	movlb	0	; () banked
  3013  006E04  6FD2               	movwf	(main@i+1)& (0+255),b
  3014  006E06  0E00               	movlw	0
  3015  006E08  0100               	movlb	0	; () banked
  3016  006E0A  6FD1               	movwf	main@i& (0+255),b
  3017  006E0C                     
  3018                           ; BSR set to: 0
  3019  006E0C  0100               	movlb	0	; () banked
  3020  006E0E  51D2               	movf	(main@i+1)& (0+255),w,b
  3021  006E10  0A80               	xorlw	128
  3022  006E12  0F80               	addlw	-128
  3023  006E14  0E1F               	movlw	31
  3024  006E16  B4D8               	btfsc	status,2,c
  3025  006E18  5DD1               	subwf	main@i& (0+255),w,b
  3026  006E1A  B0D8               	btfsc	status,0,c
  3027  006E1C  D03A               	goto	l2595
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main pic18.c: 145: alarm_tally += (alarm_prob_weights[i] * real_numbers[i+1]);
  3031                           
  3032                           ; BSR set to: 0
  3033                           
  3034                           ; BSR set to: 0
  3035  006E1E  0100               	movlb	0	; () banked
  3036  006E20  C0D1  F04D         	movff	main@i,??_main
  3037  006E24  0100               	movlb	0	; () banked
  3038  006E26  C0D2  F04E         	movff	main@i+1,??_main+1
  3039  006E2A  90D8               	bcf	status,0,c
  3040  006E2C  364D               	rlcf	??_main,f,c
  3041  006E2E  364E               	rlcf	??_main+1,f,c
  3042  006E30  0EF3               	movlw	low _alarm_prob_weights
  3043  006E32  244D               	addwf	??_main,w,c
  3044  006E34  6EF6               	movwf	tblptrl,c
  3045  006E36  0E7E               	movlw	high _alarm_prob_weights
  3046  006E38  204E               	addwfc	??_main+1,w,c
  3047  006E3A  6EF7               	movwf	tblptrh,c
  3048  006E3C                     	if	0	;There are less than 3 active tblptr bytes
  3049  006E3C                     	endif
  3050  006E3C  0009               	tblrd		*+
  3051  006E3E  CFF5 F001          	movff	tablat,___wmul@multiplier
  3052  006E42  000A               	tblrd		*-
  3053  006E44  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3054  006E48  0100               	movlb	0	; () banked
  3055  006E4A  C0D1  F04F         	movff	main@i,??_main+2
  3056  006E4E  0100               	movlb	0	; () banked
  3057  006E50  C0D2  F050         	movff	main@i+1,??_main+3
  3058  006E54  90D8               	bcf	status,0,c
  3059  006E56  364F               	rlcf	??_main+2,f,c
  3060  006E58  3650               	rlcf	??_main+3,f,c
  3061  006E5A  0E02               	movlw	2
  3062  006E5C  264F               	addwf	??_main+2,f,c
  3063  006E5E  0E00               	movlw	0
  3064  006E60  2250               	addwfc	??_main+3,f,c
  3065  006E62  0101               	movlb	1	; () banked
  3066  006E64  0E80               	movlw	low _real_numbers
  3067  006E66  244F               	addwf	??_main+2,w,c
  3068  006E68  6ED9               	movwf	fsr2l,c
  3069  006E6A  0101               	movlb	1	; () banked
  3070  006E6C  0E01               	movlw	high _real_numbers
  3071  006E6E  2050               	addwfc	??_main+3,w,c
  3072  006E70  6EDA               	movwf	fsr2h,c
  3073  006E72  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3074  006E76  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3075  006E7A  ECE7  F02B         	call	___wmul	;wreg free
  3076  006E7E  5001               	movf	?___wmul,w,c
  3077  006E80  0100               	movlb	0	; () banked
  3078  006E82  27BD               	addwf	_alarm_tally& (0+255),f,b
  3079  006E84  5002               	movf	?___wmul+1,w,c
  3080  006E86  0100               	movlb	0	; () banked
  3081  006E88  23BE               	addwfc	(_alarm_tally+1)& (0+255),f,b
  3082                           
  3083                           ; BSR set to: 0
  3084  006E8A  0100               	movlb	0	; () banked
  3085  006E8C  4BD1               	infsnz	main@i& (0+255),f,b
  3086  006E8E  2BD2               	incf	(main@i+1)& (0+255),f,b
  3087  006E90  D7BD               	goto	L5
  3088  006E92                     l2595:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main pic18.c: 146: }
  3092                           ;main pic18.c: 148: if(alarm_tally < 0) {
  3093  006E92  0100               	movlb	0	; () banked
  3094  006E94  51BE               	movf	(_alarm_tally+1)& (0+255),w,b
  3095  006E96  0A80               	xorlw	128
  3096  006E98  6EF3               	movwf	prodl,c
  3097  006E9A  0E80               	movlw	128
  3098  006E9C  5CF3               	subwf	prodl,w,c
  3099  006E9E  0E00               	movlw	0
  3100  006EA0  B4D8               	btfsc	status,2,c
  3101  006EA2  5DBD               	subwf	_alarm_tally& (0+255),w,b
  3102  006EA4  B0D8               	btfsc	status,0,c
  3103  006EA6  D007               	goto	l2599
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main pic18.c: 149: alarm_tally = 0;
  3107  006EA8  0E00               	movlw	0
  3108  006EAA  0100               	movlb	0	; () banked
  3109  006EAC  6FBE               	movwf	(_alarm_tally+1)& (0+255),b
  3110  006EAE  0E00               	movlw	0
  3111  006EB0  0100               	movlb	0	; () banked
  3112  006EB2  6FBD               	movwf	_alarm_tally& (0+255),b
  3113                           
  3114                           ;main pic18.c: 150: } else if(real_numbers[16] > real_numbers[3] &&
  3115  006EB4  D034               	goto	l2605
  3116  006EB6                     l2599:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main pic18.c: 151: real_numbers[13] > real_numbers[23]) {
  3120  006EB6  0101               	movlb	1	; () banked
  3121  006EB8  EE21  F0A0         	lfsr	2,_real_numbers+32
  3122  006EBC  0101               	movlb	1	; () banked
  3123  006EBE  EE11  F086         	lfsr	1,_real_numbers+6
  3124  006EC2  52E6               	movf	postinc1,f,c
  3125  006EC4  52DE               	movf	postinc2,f,c
  3126  006EC6  50E5               	movf	postdec1,w,c
  3127  006EC8  0A80               	xorlw	128
  3128  006ECA  6E4D               	movwf	??_main& (0+255),c
  3129  006ECC  50DD               	movf	postdec2,w,c
  3130  006ECE  0A80               	xorlw	128
  3131  006ED0  5C4D               	subwf	??_main& (0+255),w,c
  3132  006ED2  E102               	bnz	u2155
  3133  006ED4  50DF               	movf	indf2,w,c
  3134  006ED6  5CE7               	subwf	indf1,w,c
  3135  006ED8                     u2155:
  3136  006ED8  B0D8               	btfsc	status,0,c
  3137  006EDA  D021               	goto	l2605
  3138                           
  3139                           ; BSR set to: 1
  3140  006EDC  0101               	movlb	1	; () banked
  3141  006EDE  EE21  F09A         	lfsr	2,_real_numbers+26
  3142  006EE2  0101               	movlb	1	; () banked
  3143  006EE4  EE11  F0AE         	lfsr	1,_real_numbers+46
  3144  006EE8  52E6               	movf	postinc1,f,c
  3145  006EEA  52DE               	movf	postinc2,f,c
  3146  006EEC  50E5               	movf	postdec1,w,c
  3147  006EEE  0A80               	xorlw	128
  3148  006EF0  6E4D               	movwf	??_main& (0+255),c
  3149  006EF2  50DD               	movf	postdec2,w,c
  3150  006EF4  0A80               	xorlw	128
  3151  006EF6  5C4D               	subwf	??_main& (0+255),w,c
  3152  006EF8  E102               	bnz	u2165
  3153  006EFA  50DF               	movf	indf2,w,c
  3154  006EFC  5CE7               	subwf	indf1,w,c
  3155  006EFE                     u2165:
  3156  006EFE  B0D8               	btfsc	status,0,c
  3157  006F00  D00E               	goto	l2605
  3158                           
  3159                           ; BSR set to: 1
  3160                           ;main pic18.c: 152: alarm_tally = alarm_tally / 4;
  3161  006F02  C0BD  F007         	movff	_alarm_tally,___awdiv@dividend
  3162  006F06  C0BE  F008         	movff	_alarm_tally+1,___awdiv@dividend+1
  3163  006F0A  0E00               	movlw	0
  3164  006F0C  6E0A               	movwf	___awdiv@divisor+1,c
  3165  006F0E  0E04               	movlw	4
  3166  006F10  6E09               	movwf	___awdiv@divisor,c
  3167  006F12  EC0C  F02E         	call	___awdiv	;wreg free
  3168  006F16  C007  F0BD         	movff	?___awdiv,_alarm_tally
  3169  006F1A  C008  F0BE         	movff	?___awdiv+1,_alarm_tally+1
  3170  006F1E                     l2605:
  3171                           
  3172                           ;main pic18.c: 153: }
  3173                           ;main pic18.c: 156: for(i = 0; i < 31; i++) {
  3174  006F1E  0E00               	movlw	0
  3175  006F20  0100               	movlb	0	; () banked
  3176  006F22  6FD2               	movwf	(main@i+1)& (0+255),b
  3177  006F24  0E00               	movlw	0
  3178  006F26  0100               	movlb	0	; () banked
  3179  006F28  6FD1               	movwf	main@i& (0+255),b
  3180  006F2A                     
  3181                           ; BSR set to: 0
  3182  006F2A  0100               	movlb	0	; () banked
  3183  006F2C  51D2               	movf	(main@i+1)& (0+255),w,b
  3184  006F2E  0A80               	xorlw	128
  3185  006F30  0F80               	addlw	-128
  3186  006F32  0E1F               	movlw	31
  3187  006F34  B4D8               	btfsc	status,2,c
  3188  006F36  5DD1               	subwf	main@i& (0+255),w,b
  3189  006F38  B0D8               	btfsc	status,0,c
  3190  006F3A  D03A               	goto	l2617
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main pic18.c: 157: growl_tally += (growl_prob_weights[i] * real_numbers[i+1]);
  3194                           
  3195                           ; BSR set to: 0
  3196                           
  3197                           ; BSR set to: 0
  3198  006F3C  0100               	movlb	0	; () banked
  3199  006F3E  C0D1  F04D         	movff	main@i,??_main
  3200  006F42  0100               	movlb	0	; () banked
  3201  006F44  C0D2  F04E         	movff	main@i+1,??_main+1
  3202  006F48  90D8               	bcf	status,0,c
  3203  006F4A  364D               	rlcf	??_main,f,c
  3204  006F4C  364E               	rlcf	??_main+1,f,c
  3205  006F4E  0E31               	movlw	low _growl_prob_weights
  3206  006F50  244D               	addwf	??_main,w,c
  3207  006F52  6EF6               	movwf	tblptrl,c
  3208  006F54  0E7F               	movlw	high _growl_prob_weights
  3209  006F56  204E               	addwfc	??_main+1,w,c
  3210  006F58  6EF7               	movwf	tblptrh,c
  3211  006F5A                     	if	0	;There are less than 3 active tblptr bytes
  3212  006F5A                     	endif
  3213  006F5A  0009               	tblrd		*+
  3214  006F5C  CFF5 F001          	movff	tablat,___wmul@multiplier
  3215  006F60  000A               	tblrd		*-
  3216  006F62  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3217  006F66  0100               	movlb	0	; () banked
  3218  006F68  C0D1  F04F         	movff	main@i,??_main+2
  3219  006F6C  0100               	movlb	0	; () banked
  3220  006F6E  C0D2  F050         	movff	main@i+1,??_main+3
  3221  006F72  90D8               	bcf	status,0,c
  3222  006F74  364F               	rlcf	??_main+2,f,c
  3223  006F76  3650               	rlcf	??_main+3,f,c
  3224  006F78  0E02               	movlw	2
  3225  006F7A  264F               	addwf	??_main+2,f,c
  3226  006F7C  0E00               	movlw	0
  3227  006F7E  2250               	addwfc	??_main+3,f,c
  3228  006F80  0101               	movlb	1	; () banked
  3229  006F82  0E80               	movlw	low _real_numbers
  3230  006F84  244F               	addwf	??_main+2,w,c
  3231  006F86  6ED9               	movwf	fsr2l,c
  3232  006F88  0101               	movlb	1	; () banked
  3233  006F8A  0E01               	movlw	high _real_numbers
  3234  006F8C  2050               	addwfc	??_main+3,w,c
  3235  006F8E  6EDA               	movwf	fsr2h,c
  3236  006F90  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3237  006F94  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3238  006F98  ECE7  F02B         	call	___wmul	;wreg free
  3239  006F9C  5001               	movf	?___wmul,w,c
  3240  006F9E  0100               	movlb	0	; () banked
  3241  006FA0  27BF               	addwf	_growl_tally& (0+255),f,b
  3242  006FA2  5002               	movf	?___wmul+1,w,c
  3243  006FA4  0100               	movlb	0	; () banked
  3244  006FA6  23C0               	addwfc	(_growl_tally+1)& (0+255),f,b
  3245                           
  3246                           ; BSR set to: 0
  3247  006FA8  0100               	movlb	0	; () banked
  3248  006FAA  4BD1               	infsnz	main@i& (0+255),f,b
  3249  006FAC  2BD2               	incf	(main@i+1)& (0+255),f,b
  3250  006FAE  D7BD               	goto	L6
  3251  006FB0                     l2617:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main pic18.c: 158: }
  3255                           ;main pic18.c: 160: if(growl_tally < 0) {
  3256  006FB0  0100               	movlb	0	; () banked
  3257  006FB2  51C0               	movf	(_growl_tally+1)& (0+255),w,b
  3258  006FB4  0A80               	xorlw	128
  3259  006FB6  6EF3               	movwf	prodl,c
  3260  006FB8  0E80               	movlw	128
  3261  006FBA  5CF3               	subwf	prodl,w,c
  3262  006FBC  0E00               	movlw	0
  3263  006FBE  B4D8               	btfsc	status,2,c
  3264  006FC0  5DBF               	subwf	_growl_tally& (0+255),w,b
  3265  006FC2  B0D8               	btfsc	status,0,c
  3266  006FC4  D007               	goto	l2621
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main pic18.c: 161: growl_tally = 0;
  3270  006FC6  0E00               	movlw	0
  3271  006FC8  0100               	movlb	0	; () banked
  3272  006FCA  6FC0               	movwf	(_growl_tally+1)& (0+255),b
  3273  006FCC  0E00               	movlw	0
  3274  006FCE  0100               	movlb	0	; () banked
  3275  006FD0  6FBF               	movwf	_growl_tally& (0+255),b
  3276                           
  3277                           ;main pic18.c: 162: } else if(real_numbers[30] > real_numbers[24] &&
  3278  006FD2  D047               	goto	l2629
  3279  006FD4                     l2621:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main pic18.c: 163: real_numbers[15] > real_numbers[1] &&
  3283                           ;main pic18.c: 164: real_numbers[29] > real_numbers[8]) {
  3284  006FD4  0101               	movlb	1	; () banked
  3285  006FD6  EE21  F0BC         	lfsr	2,_real_numbers+60
  3286  006FDA  0101               	movlb	1	; () banked
  3287  006FDC  EE11  F0B0         	lfsr	1,_real_numbers+48
  3288  006FE0  52E6               	movf	postinc1,f,c
  3289  006FE2  52DE               	movf	postinc2,f,c
  3290  006FE4  50E5               	movf	postdec1,w,c
  3291  006FE6  0A80               	xorlw	128
  3292  006FE8  6E4D               	movwf	??_main& (0+255),c
  3293  006FEA  50DD               	movf	postdec2,w,c
  3294  006FEC  0A80               	xorlw	128
  3295  006FEE  5C4D               	subwf	??_main& (0+255),w,c
  3296  006FF0  E102               	bnz	u2205
  3297  006FF2  50DF               	movf	indf2,w,c
  3298  006FF4  5CE7               	subwf	indf1,w,c
  3299  006FF6                     u2205:
  3300  006FF6  B0D8               	btfsc	status,0,c
  3301  006FF8  D034               	goto	l2629
  3302                           
  3303                           ; BSR set to: 1
  3304  006FFA  0101               	movlb	1	; () banked
  3305  006FFC  EE21  F09E         	lfsr	2,_real_numbers+30
  3306  007000  0101               	movlb	1	; () banked
  3307  007002  EE11  F082         	lfsr	1,_real_numbers+2
  3308  007006  52E6               	movf	postinc1,f,c
  3309  007008  52DE               	movf	postinc2,f,c
  3310  00700A  50E5               	movf	postdec1,w,c
  3311  00700C  0A80               	xorlw	128
  3312  00700E  6E4D               	movwf	??_main& (0+255),c
  3313  007010  50DD               	movf	postdec2,w,c
  3314  007012  0A80               	xorlw	128
  3315  007014  5C4D               	subwf	??_main& (0+255),w,c
  3316  007016  E102               	bnz	u2215
  3317  007018  50DF               	movf	indf2,w,c
  3318  00701A  5CE7               	subwf	indf1,w,c
  3319  00701C                     u2215:
  3320  00701C  B0D8               	btfsc	status,0,c
  3321  00701E  D021               	goto	l2629
  3322                           
  3323                           ; BSR set to: 1
  3324  007020  0101               	movlb	1	; () banked
  3325  007022  EE21  F0BA         	lfsr	2,_real_numbers+58
  3326  007026  0101               	movlb	1	; () banked
  3327  007028  EE11  F090         	lfsr	1,_real_numbers+16
  3328  00702C  52E6               	movf	postinc1,f,c
  3329  00702E  52DE               	movf	postinc2,f,c
  3330  007030  50E5               	movf	postdec1,w,c
  3331  007032  0A80               	xorlw	128
  3332  007034  6E4D               	movwf	??_main& (0+255),c
  3333  007036  50DD               	movf	postdec2,w,c
  3334  007038  0A80               	xorlw	128
  3335  00703A  5C4D               	subwf	??_main& (0+255),w,c
  3336  00703C  E102               	bnz	u2225
  3337  00703E  50DF               	movf	indf2,w,c
  3338  007040  5CE7               	subwf	indf1,w,c
  3339  007042                     u2225:
  3340  007042  B0D8               	btfsc	status,0,c
  3341  007044  D00E               	goto	l2629
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;main pic18.c: 165: growl_tally = growl_tally / 4;
  3345  007046  C0BF  F007         	movff	_growl_tally,___awdiv@dividend
  3346  00704A  C0C0  F008         	movff	_growl_tally+1,___awdiv@dividend+1
  3347  00704E  0E00               	movlw	0
  3348  007050  6E0A               	movwf	___awdiv@divisor+1,c
  3349  007052  0E04               	movlw	4
  3350  007054  6E09               	movwf	___awdiv@divisor,c
  3351  007056  EC0C  F02E         	call	___awdiv	;wreg free
  3352  00705A  C007  F0BF         	movff	?___awdiv,_growl_tally
  3353  00705E  C008  F0C0         	movff	?___awdiv+1,_growl_tally+1
  3354  007062                     l2629:
  3355                           
  3356                           ;main pic18.c: 166: }
  3357                           ;main pic18.c: 169: for(i = 0; i < 31; i++) {
  3358  007062  0E00               	movlw	0
  3359  007064  0100               	movlb	0	; () banked
  3360  007066  6FD2               	movwf	(main@i+1)& (0+255),b
  3361  007068  0E00               	movlw	0
  3362  00706A  0100               	movlb	0	; () banked
  3363  00706C  6FD1               	movwf	main@i& (0+255),b
  3364  00706E                     
  3365                           ; BSR set to: 0
  3366  00706E  0100               	movlb	0	; () banked
  3367  007070  51D2               	movf	(main@i+1)& (0+255),w,b
  3368  007072  0A80               	xorlw	128
  3369  007074  0F80               	addlw	-128
  3370  007076  0E1F               	movlw	31
  3371  007078  B4D8               	btfsc	status,2,c
  3372  00707A  5DD1               	subwf	main@i& (0+255),w,b
  3373  00707C  B0D8               	btfsc	status,0,c
  3374  00707E  D03A               	goto	l2641
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main pic18.c: 170: horn_tally += (horn_prob_weights[i] * real_numbers[i+1]);
  3378                           
  3379                           ; BSR set to: 0
  3380                           
  3381                           ; BSR set to: 0
  3382  007080  0100               	movlb	0	; () banked
  3383  007082  C0D1  F04D         	movff	main@i,??_main
  3384  007086  0100               	movlb	0	; () banked
  3385  007088  C0D2  F04E         	movff	main@i+1,??_main+1
  3386  00708C  90D8               	bcf	status,0,c
  3387  00708E  364D               	rlcf	??_main,f,c
  3388  007090  364E               	rlcf	??_main+1,f,c
  3389  007092  0E6F               	movlw	low _horn_prob_weights
  3390  007094  244D               	addwf	??_main,w,c
  3391  007096  6EF6               	movwf	tblptrl,c
  3392  007098  0E7F               	movlw	high _horn_prob_weights
  3393  00709A  204E               	addwfc	??_main+1,w,c
  3394  00709C  6EF7               	movwf	tblptrh,c
  3395  00709E                     	if	0	;There are less than 3 active tblptr bytes
  3396  00709E                     	endif
  3397  00709E  0009               	tblrd		*+
  3398  0070A0  CFF5 F001          	movff	tablat,___wmul@multiplier
  3399  0070A4  000A               	tblrd		*-
  3400  0070A6  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3401  0070AA  0100               	movlb	0	; () banked
  3402  0070AC  C0D1  F04F         	movff	main@i,??_main+2
  3403  0070B0  0100               	movlb	0	; () banked
  3404  0070B2  C0D2  F050         	movff	main@i+1,??_main+3
  3405  0070B6  90D8               	bcf	status,0,c
  3406  0070B8  364F               	rlcf	??_main+2,f,c
  3407  0070BA  3650               	rlcf	??_main+3,f,c
  3408  0070BC  0E02               	movlw	2
  3409  0070BE  264F               	addwf	??_main+2,f,c
  3410  0070C0  0E00               	movlw	0
  3411  0070C2  2250               	addwfc	??_main+3,f,c
  3412  0070C4  0101               	movlb	1	; () banked
  3413  0070C6  0E80               	movlw	low _real_numbers
  3414  0070C8  244F               	addwf	??_main+2,w,c
  3415  0070CA  6ED9               	movwf	fsr2l,c
  3416  0070CC  0101               	movlb	1	; () banked
  3417  0070CE  0E01               	movlw	high _real_numbers
  3418  0070D0  2050               	addwfc	??_main+3,w,c
  3419  0070D2  6EDA               	movwf	fsr2h,c
  3420  0070D4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3421  0070D8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3422  0070DC  ECE7  F02B         	call	___wmul	;wreg free
  3423  0070E0  5001               	movf	?___wmul,w,c
  3424  0070E2  0100               	movlb	0	; () banked
  3425  0070E4  27C1               	addwf	_horn_tally& (0+255),f,b
  3426  0070E6  5002               	movf	?___wmul+1,w,c
  3427  0070E8  0100               	movlb	0	; () banked
  3428  0070EA  23C2               	addwfc	(_horn_tally+1)& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431  0070EC  0100               	movlb	0	; () banked
  3432  0070EE  4BD1               	infsnz	main@i& (0+255),f,b
  3433  0070F0  2BD2               	incf	(main@i+1)& (0+255),f,b
  3434  0070F2  D7BD               	goto	L7
  3435  0070F4                     l2641:
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main pic18.c: 171: }
  3439                           ;main pic18.c: 173: if(horn_tally < 0) {
  3440  0070F4  0100               	movlb	0	; () banked
  3441  0070F6  51C2               	movf	(_horn_tally+1)& (0+255),w,b
  3442  0070F8  0A80               	xorlw	128
  3443  0070FA  6EF3               	movwf	prodl,c
  3444  0070FC  0E80               	movlw	128
  3445  0070FE  5CF3               	subwf	prodl,w,c
  3446  007100  0E00               	movlw	0
  3447  007102  B4D8               	btfsc	status,2,c
  3448  007104  5DC1               	subwf	_horn_tally& (0+255),w,b
  3449  007106  B0D8               	btfsc	status,0,c
  3450  007108  D007               	goto	l2645
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main pic18.c: 174: horn_tally = 5;
  3454  00710A  0E00               	movlw	0
  3455  00710C  0100               	movlb	0	; () banked
  3456  00710E  6FC2               	movwf	(_horn_tally+1)& (0+255),b
  3457  007110  0E05               	movlw	5
  3458  007112  0100               	movlb	0	; () banked
  3459  007114  6FC1               	movwf	_horn_tally& (0+255),b
  3460                           
  3461                           ;main pic18.c: 175: } else if(real_numbers[21] > real_numbers[7] &&
  3462  007116  D080               	goto	l2659
  3463  007118                     l2645:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;main pic18.c: 176: real_numbers[16] > real_numbers[10] &&
  3467                           ;main pic18.c: 177: real_numbers[25] > real_numbers[1] &&
  3468                           ;main pic18.c: 178: real_numbers[20] > real_numbers[24] &&
  3469                           ;main pic18.c: 179: real_numbers[12] > real_numbers[5] &&
  3470                           ;main pic18.c: 180: real_numbers[27] > real_numbers[10]) {
  3471  007118  0101               	movlb	1	; () banked
  3472  00711A  EE21  F0AA         	lfsr	2,_real_numbers+42
  3473  00711E  0101               	movlb	1	; () banked
  3474  007120  EE11  F08E         	lfsr	1,_real_numbers+14
  3475  007124  52E6               	movf	postinc1,f,c
  3476  007126  52DE               	movf	postinc2,f,c
  3477  007128  50E5               	movf	postdec1,w,c
  3478  00712A  0A80               	xorlw	128
  3479  00712C  6E4D               	movwf	??_main& (0+255),c
  3480  00712E  50DD               	movf	postdec2,w,c
  3481  007130  0A80               	xorlw	128
  3482  007132  5C4D               	subwf	??_main& (0+255),w,c
  3483  007134  E102               	bnz	u2265
  3484  007136  50DF               	movf	indf2,w,c
  3485  007138  5CE7               	subwf	indf1,w,c
  3486  00713A                     u2265:
  3487  00713A  B0D8               	btfsc	status,0,c
  3488  00713C  D06D               	goto	l2659
  3489                           
  3490                           ; BSR set to: 1
  3491  00713E  0101               	movlb	1	; () banked
  3492  007140  EE21  F0A0         	lfsr	2,_real_numbers+32
  3493  007144  0101               	movlb	1	; () banked
  3494  007146  EE11  F094         	lfsr	1,_real_numbers+20
  3495  00714A  52E6               	movf	postinc1,f,c
  3496  00714C  52DE               	movf	postinc2,f,c
  3497  00714E  50E5               	movf	postdec1,w,c
  3498  007150  0A80               	xorlw	128
  3499  007152  6E4D               	movwf	??_main& (0+255),c
  3500  007154  50DD               	movf	postdec2,w,c
  3501  007156  0A80               	xorlw	128
  3502  007158  5C4D               	subwf	??_main& (0+255),w,c
  3503  00715A  E102               	bnz	u2275
  3504  00715C  50DF               	movf	indf2,w,c
  3505  00715E  5CE7               	subwf	indf1,w,c
  3506  007160                     u2275:
  3507  007160  B0D8               	btfsc	status,0,c
  3508  007162  D05A               	goto	l2659
  3509                           
  3510                           ; BSR set to: 1
  3511  007164  0101               	movlb	1	; () banked
  3512  007166  EE21  F0B2         	lfsr	2,_real_numbers+50
  3513  00716A  0101               	movlb	1	; () banked
  3514  00716C  EE11  F082         	lfsr	1,_real_numbers+2
  3515  007170  52E6               	movf	postinc1,f,c
  3516  007172  52DE               	movf	postinc2,f,c
  3517  007174  50E5               	movf	postdec1,w,c
  3518  007176  0A80               	xorlw	128
  3519  007178  6E4D               	movwf	??_main& (0+255),c
  3520  00717A  50DD               	movf	postdec2,w,c
  3521  00717C  0A80               	xorlw	128
  3522  00717E  5C4D               	subwf	??_main& (0+255),w,c
  3523  007180  E102               	bnz	u2285
  3524  007182  50DF               	movf	indf2,w,c
  3525  007184  5CE7               	subwf	indf1,w,c
  3526  007186                     u2285:
  3527  007186  B0D8               	btfsc	status,0,c
  3528  007188  D047               	goto	l2659
  3529                           
  3530                           ; BSR set to: 1
  3531  00718A  0101               	movlb	1	; () banked
  3532  00718C  EE21  F0A8         	lfsr	2,_real_numbers+40
  3533  007190  0101               	movlb	1	; () banked
  3534  007192  EE11  F0B0         	lfsr	1,_real_numbers+48
  3535  007196  52E6               	movf	postinc1,f,c
  3536  007198  52DE               	movf	postinc2,f,c
  3537  00719A  50E5               	movf	postdec1,w,c
  3538  00719C  0A80               	xorlw	128
  3539  00719E  6E4D               	movwf	??_main& (0+255),c
  3540  0071A0  50DD               	movf	postdec2,w,c
  3541  0071A2  0A80               	xorlw	128
  3542  0071A4  5C4D               	subwf	??_main& (0+255),w,c
  3543  0071A6  E102               	bnz	u2295
  3544  0071A8  50DF               	movf	indf2,w,c
  3545  0071AA  5CE7               	subwf	indf1,w,c
  3546  0071AC                     u2295:
  3547  0071AC  B0D8               	btfsc	status,0,c
  3548  0071AE  D034               	goto	l2659
  3549                           
  3550                           ; BSR set to: 1
  3551  0071B0  0101               	movlb	1	; () banked
  3552  0071B2  EE21  F098         	lfsr	2,_real_numbers+24
  3553  0071B6  0101               	movlb	1	; () banked
  3554  0071B8  EE11  F08A         	lfsr	1,_real_numbers+10
  3555  0071BC  52E6               	movf	postinc1,f,c
  3556  0071BE  52DE               	movf	postinc2,f,c
  3557  0071C0  50E5               	movf	postdec1,w,c
  3558  0071C2  0A80               	xorlw	128
  3559  0071C4  6E4D               	movwf	??_main& (0+255),c
  3560  0071C6  50DD               	movf	postdec2,w,c
  3561  0071C8  0A80               	xorlw	128
  3562  0071CA  5C4D               	subwf	??_main& (0+255),w,c
  3563  0071CC  E102               	bnz	u2305
  3564  0071CE  50DF               	movf	indf2,w,c
  3565  0071D0  5CE7               	subwf	indf1,w,c
  3566  0071D2                     u2305:
  3567  0071D2  B0D8               	btfsc	status,0,c
  3568  0071D4  D021               	goto	l2659
  3569                           
  3570                           ; BSR set to: 1
  3571  0071D6  0101               	movlb	1	; () banked
  3572  0071D8  EE21  F0B6         	lfsr	2,_real_numbers+54
  3573  0071DC  0101               	movlb	1	; () banked
  3574  0071DE  EE11  F094         	lfsr	1,_real_numbers+20
  3575  0071E2  52E6               	movf	postinc1,f,c
  3576  0071E4  52DE               	movf	postinc2,f,c
  3577  0071E6  50E5               	movf	postdec1,w,c
  3578  0071E8  0A80               	xorlw	128
  3579  0071EA  6E4D               	movwf	??_main& (0+255),c
  3580  0071EC  50DD               	movf	postdec2,w,c
  3581  0071EE  0A80               	xorlw	128
  3582  0071F0  5C4D               	subwf	??_main& (0+255),w,c
  3583  0071F2  E102               	bnz	u2315
  3584  0071F4  50DF               	movf	indf2,w,c
  3585  0071F6  5CE7               	subwf	indf1,w,c
  3586  0071F8                     u2315:
  3587  0071F8  B0D8               	btfsc	status,0,c
  3588  0071FA  D00E               	goto	l2659
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;main pic18.c: 181: horn_tally = horn_tally / 4;
  3592  0071FC  C0C1  F007         	movff	_horn_tally,___awdiv@dividend
  3593  007200  C0C2  F008         	movff	_horn_tally+1,___awdiv@dividend+1
  3594  007204  0E00               	movlw	0
  3595  007206  6E0A               	movwf	___awdiv@divisor+1,c
  3596  007208  0E04               	movlw	4
  3597  00720A  6E09               	movwf	___awdiv@divisor,c
  3598  00720C  EC0C  F02E         	call	___awdiv	;wreg free
  3599  007210  C007  F0C1         	movff	?___awdiv,_horn_tally
  3600  007214  C008  F0C2         	movff	?___awdiv+1,_horn_tally+1
  3601  007218                     l2659:
  3602                           
  3603                           ;main pic18.c: 182: }
  3604                           ;main pic18.c: 185: for(i = 0; i < 31; i++) {
  3605  007218  0E00               	movlw	0
  3606  00721A  0100               	movlb	0	; () banked
  3607  00721C  6FD2               	movwf	(main@i+1)& (0+255),b
  3608  00721E  0E00               	movlw	0
  3609  007220  0100               	movlb	0	; () banked
  3610  007222  6FD1               	movwf	main@i& (0+255),b
  3611  007224                     
  3612                           ; BSR set to: 0
  3613  007224  0100               	movlb	0	; () banked
  3614  007226  51D2               	movf	(main@i+1)& (0+255),w,b
  3615  007228  0A80               	xorlw	128
  3616  00722A  0F80               	addlw	-128
  3617  00722C  0E1F               	movlw	31
  3618  00722E  B4D8               	btfsc	status,2,c
  3619  007230  5DD1               	subwf	main@i& (0+255),w,b
  3620  007232  B0D8               	btfsc	status,0,c
  3621  007234  D03A               	goto	l2671
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;main pic18.c: 186: scream_tally += (scream_prob_weights[i] * real_numbers[i+1]);
  3625                           
  3626                           ; BSR set to: 0
  3627                           
  3628                           ; BSR set to: 0
  3629  007236  0100               	movlb	0	; () banked
  3630  007238  C0D1  F04D         	movff	main@i,??_main
  3631  00723C  0100               	movlb	0	; () banked
  3632  00723E  C0D2  F04E         	movff	main@i+1,??_main+1
  3633  007242  90D8               	bcf	status,0,c
  3634  007244  364D               	rlcf	??_main,f,c
  3635  007246  364E               	rlcf	??_main+1,f,c
  3636  007248  0EAD               	movlw	low _scream_prob_weights
  3637  00724A  244D               	addwf	??_main,w,c
  3638  00724C  6EF6               	movwf	tblptrl,c
  3639  00724E  0E7F               	movlw	high _scream_prob_weights
  3640  007250  204E               	addwfc	??_main+1,w,c
  3641  007252  6EF7               	movwf	tblptrh,c
  3642  007254                     	if	0	;There are less than 3 active tblptr bytes
  3643  007254                     	endif
  3644  007254  0009               	tblrd		*+
  3645  007256  CFF5 F001          	movff	tablat,___wmul@multiplier
  3646  00725A  000A               	tblrd		*-
  3647  00725C  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3648  007260  0100               	movlb	0	; () banked
  3649  007262  C0D1  F04F         	movff	main@i,??_main+2
  3650  007266  0100               	movlb	0	; () banked
  3651  007268  C0D2  F050         	movff	main@i+1,??_main+3
  3652  00726C  90D8               	bcf	status,0,c
  3653  00726E  364F               	rlcf	??_main+2,f,c
  3654  007270  3650               	rlcf	??_main+3,f,c
  3655  007272  0E02               	movlw	2
  3656  007274  264F               	addwf	??_main+2,f,c
  3657  007276  0E00               	movlw	0
  3658  007278  2250               	addwfc	??_main+3,f,c
  3659  00727A  0101               	movlb	1	; () banked
  3660  00727C  0E80               	movlw	low _real_numbers
  3661  00727E  244F               	addwf	??_main+2,w,c
  3662  007280  6ED9               	movwf	fsr2l,c
  3663  007282  0101               	movlb	1	; () banked
  3664  007284  0E01               	movlw	high _real_numbers
  3665  007286  2050               	addwfc	??_main+3,w,c
  3666  007288  6EDA               	movwf	fsr2h,c
  3667  00728A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3668  00728E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3669  007292  ECE7  F02B         	call	___wmul	;wreg free
  3670  007296  5001               	movf	?___wmul,w,c
  3671  007298  0100               	movlb	0	; () banked
  3672  00729A  27C3               	addwf	_scream_tally& (0+255),f,b
  3673  00729C  5002               	movf	?___wmul+1,w,c
  3674  00729E  0100               	movlb	0	; () banked
  3675  0072A0  23C4               	addwfc	(_scream_tally+1)& (0+255),f,b
  3676                           
  3677                           ; BSR set to: 0
  3678  0072A2  0100               	movlb	0	; () banked
  3679  0072A4  4BD1               	infsnz	main@i& (0+255),f,b
  3680  0072A6  2BD2               	incf	(main@i+1)& (0+255),f,b
  3681  0072A8  D7BD               	goto	L8
  3682  0072AA                     l2671:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main pic18.c: 187: }
  3686                           ;main pic18.c: 189: if(scream_tally < 0) {
  3687  0072AA  0100               	movlb	0	; () banked
  3688  0072AC  51C4               	movf	(_scream_tally+1)& (0+255),w,b
  3689  0072AE  0A80               	xorlw	128
  3690  0072B0  6EF3               	movwf	prodl,c
  3691  0072B2  0E80               	movlw	128
  3692  0072B4  5CF3               	subwf	prodl,w,c
  3693  0072B6  0E00               	movlw	0
  3694  0072B8  B4D8               	btfsc	status,2,c
  3695  0072BA  5DC3               	subwf	_scream_tally& (0+255),w,b
  3696  0072BC  B0D8               	btfsc	status,0,c
  3697  0072BE  D007               	goto	l2675
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main pic18.c: 190: scream_tally = 0;
  3701  0072C0  0E00               	movlw	0
  3702  0072C2  0100               	movlb	0	; () banked
  3703  0072C4  6FC4               	movwf	(_scream_tally+1)& (0+255),b
  3704  0072C6  0E00               	movlw	0
  3705  0072C8  0100               	movlb	0	; () banked
  3706  0072CA  6FC3               	movwf	_scream_tally& (0+255),b
  3707                           
  3708                           ;main pic18.c: 191: } else if(real_numbers[28] > real_numbers[8] &&
  3709  0072CC  D05A               	goto	l2685
  3710  0072CE                     l2675:
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;main pic18.c: 192: real_numbers[17] > real_numbers[27] &&
  3714                           ;main pic18.c: 193: real_numbers[29] > real_numbers[1] &&
  3715                           ;main pic18.c: 194: real_numbers[21] > real_numbers[2]) {
  3716  0072CE  0101               	movlb	1	; () banked
  3717  0072D0  EE21  F0B8         	lfsr	2,_real_numbers+56
  3718  0072D4  0101               	movlb	1	; () banked
  3719  0072D6  EE11  F090         	lfsr	1,_real_numbers+16
  3720  0072DA  52E6               	movf	postinc1,f,c
  3721  0072DC  52DE               	movf	postinc2,f,c
  3722  0072DE  50E5               	movf	postdec1,w,c
  3723  0072E0  0A80               	xorlw	128
  3724  0072E2  6E4D               	movwf	??_main& (0+255),c
  3725  0072E4  50DD               	movf	postdec2,w,c
  3726  0072E6  0A80               	xorlw	128
  3727  0072E8  5C4D               	subwf	??_main& (0+255),w,c
  3728  0072EA  E102               	bnz	u2355
  3729  0072EC  50DF               	movf	indf2,w,c
  3730  0072EE  5CE7               	subwf	indf1,w,c
  3731  0072F0                     u2355:
  3732  0072F0  B0D8               	btfsc	status,0,c
  3733  0072F2  D047               	goto	l2685
  3734                           
  3735                           ; BSR set to: 1
  3736  0072F4  0101               	movlb	1	; () banked
  3737  0072F6  EE21  F0A2         	lfsr	2,_real_numbers+34
  3738  0072FA  0101               	movlb	1	; () banked
  3739  0072FC  EE11  F0B6         	lfsr	1,_real_numbers+54
  3740  007300  52E6               	movf	postinc1,f,c
  3741  007302  52DE               	movf	postinc2,f,c
  3742  007304  50E5               	movf	postdec1,w,c
  3743  007306  0A80               	xorlw	128
  3744  007308  6E4D               	movwf	??_main& (0+255),c
  3745  00730A  50DD               	movf	postdec2,w,c
  3746  00730C  0A80               	xorlw	128
  3747  00730E  5C4D               	subwf	??_main& (0+255),w,c
  3748  007310  E102               	bnz	u2365
  3749  007312  50DF               	movf	indf2,w,c
  3750  007314  5CE7               	subwf	indf1,w,c
  3751  007316                     u2365:
  3752  007316  B0D8               	btfsc	status,0,c
  3753  007318  D034               	goto	l2685
  3754                           
  3755                           ; BSR set to: 1
  3756  00731A  0101               	movlb	1	; () banked
  3757  00731C  EE21  F0BA         	lfsr	2,_real_numbers+58
  3758  007320  0101               	movlb	1	; () banked
  3759  007322  EE11  F082         	lfsr	1,_real_numbers+2
  3760  007326  52E6               	movf	postinc1,f,c
  3761  007328  52DE               	movf	postinc2,f,c
  3762  00732A  50E5               	movf	postdec1,w,c
  3763  00732C  0A80               	xorlw	128
  3764  00732E  6E4D               	movwf	??_main& (0+255),c
  3765  007330  50DD               	movf	postdec2,w,c
  3766  007332  0A80               	xorlw	128
  3767  007334  5C4D               	subwf	??_main& (0+255),w,c
  3768  007336  E102               	bnz	u2375
  3769  007338  50DF               	movf	indf2,w,c
  3770  00733A  5CE7               	subwf	indf1,w,c
  3771  00733C                     u2375:
  3772  00733C  B0D8               	btfsc	status,0,c
  3773  00733E  D021               	goto	l2685
  3774                           
  3775                           ; BSR set to: 1
  3776  007340  0101               	movlb	1	; () banked
  3777  007342  EE21  F0AA         	lfsr	2,_real_numbers+42
  3778  007346  0101               	movlb	1	; () banked
  3779  007348  EE11  F084         	lfsr	1,_real_numbers+4
  3780  00734C  52E6               	movf	postinc1,f,c
  3781  00734E  52DE               	movf	postinc2,f,c
  3782  007350  50E5               	movf	postdec1,w,c
  3783  007352  0A80               	xorlw	128
  3784  007354  6E4D               	movwf	??_main& (0+255),c
  3785  007356  50DD               	movf	postdec2,w,c
  3786  007358  0A80               	xorlw	128
  3787  00735A  5C4D               	subwf	??_main& (0+255),w,c
  3788  00735C  E102               	bnz	u2385
  3789  00735E  50DF               	movf	indf2,w,c
  3790  007360  5CE7               	subwf	indf1,w,c
  3791  007362                     u2385:
  3792  007362  B0D8               	btfsc	status,0,c
  3793  007364  D00E               	goto	l2685
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;main pic18.c: 195: scream_tally = scream_tally / 4;
  3797  007366  C0C3  F007         	movff	_scream_tally,___awdiv@dividend
  3798  00736A  C0C4  F008         	movff	_scream_tally+1,___awdiv@dividend+1
  3799  00736E  0E00               	movlw	0
  3800  007370  6E0A               	movwf	___awdiv@divisor+1,c
  3801  007372  0E04               	movlw	4
  3802  007374  6E09               	movwf	___awdiv@divisor,c
  3803  007376  EC0C  F02E         	call	___awdiv	;wreg free
  3804  00737A  C007  F0C3         	movff	?___awdiv,_scream_tally
  3805  00737E  C008  F0C4         	movff	?___awdiv+1,_scream_tally+1
  3806  007382                     l2685:
  3807                           
  3808                           ;main pic18.c: 196: }
  3809                           ;main pic18.c: 198: guesses[0] = 255;
  3810  007382  0E00               	movlw	0
  3811  007384  0100               	movlb	0	; () banked
  3812  007386  6FB4               	movwf	(_guesses+1)& (0+255),b
  3813  007388  0100               	movlb	0	; () banked
  3814  00738A  69B3               	setf	_guesses& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main pic18.c: 199: guesses[1] = alarm_tally;
  3818  00738C  C0BD  F0B5         	movff	_alarm_tally,_guesses+2
  3819  007390  C0BE  F0B6         	movff	_alarm_tally+1,_guesses+3
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;main pic18.c: 200: guesses[2] = growl_tally;
  3823  007394  C0BF  F0B7         	movff	_growl_tally,_guesses+4
  3824  007398  C0C0  F0B8         	movff	_growl_tally+1,_guesses+5
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main pic18.c: 201: guesses[3] = horn_tally;
  3828  00739C  C0C1  F0B9         	movff	_horn_tally,_guesses+6
  3829  0073A0  C0C2  F0BA         	movff	_horn_tally+1,_guesses+7
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main pic18.c: 202: guesses[4] = scream_tally;
  3833  0073A4  C0C3  F0BB         	movff	_scream_tally,_guesses+8
  3834  0073A8  C0C4  F0BC         	movff	_scream_tally+1,_guesses+9
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main pic18.c: 204: max_tally = 0;
  3838  0073AC  0E00               	movlw	0
  3839  0073AE  0100               	movlb	0	; () banked
  3840  0073B0  6FAE               	movwf	(_max_tally+1)& (0+255),b
  3841  0073B2  0E00               	movlw	0
  3842  0073B4  0100               	movlb	0	; () banked
  3843  0073B6  6FAD               	movwf	_max_tally& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main pic18.c: 205: for(i = 1; i < 5; i++) {
  3847  0073B8  0E00               	movlw	0
  3848  0073BA  0100               	movlb	0	; () banked
  3849  0073BC  6FD2               	movwf	(main@i+1)& (0+255),b
  3850  0073BE  0E01               	movlw	1
  3851  0073C0  0100               	movlb	0	; () banked
  3852  0073C2  6FD1               	movwf	main@i& (0+255),b
  3853  0073C4                     
  3854                           ; BSR set to: 0
  3855  0073C4  0100               	movlb	0	; () banked
  3856  0073C6  51D2               	movf	(main@i+1)& (0+255),w,b
  3857  0073C8  0A80               	xorlw	128
  3858  0073CA  0F80               	addlw	-128
  3859  0073CC  0E05               	movlw	5
  3860  0073CE  B4D8               	btfsc	status,2,c
  3861  0073D0  5DD1               	subwf	main@i& (0+255),w,b
  3862  0073D2  B0D8               	btfsc	status,0,c
  3863  0073D4  D038               	goto	l2711
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;main pic18.c: 206: if(guesses[i] > max_tally) {
  3867                           
  3868                           ; BSR set to: 0
  3869                           
  3870                           ; BSR set to: 0
  3871  0073D6  0EB3               	movlw	low _guesses
  3872  0073D8  6E4D               	movwf	??_main& (0+255),c
  3873  0073DA  0E00               	movlw	high _guesses
  3874  0073DC  6E4E               	movwf	(??_main+1)& (0+255),c
  3875  0073DE  90D8               	bcf	status,0,c
  3876  0073E0  0100               	movlb	0	; () banked
  3877  0073E2  35D1               	rlcf	main@i& (0+255),w,b
  3878  0073E4  6ED9               	movwf	fsr2l,c
  3879  0073E6  0100               	movlb	0	; () banked
  3880  0073E8  35D2               	rlcf	(main@i+1)& (0+255),w,b
  3881  0073EA  6EDA               	movwf	fsr2h,c
  3882  0073EC  504D               	movf	??_main,w,c
  3883  0073EE  26D9               	addwf	fsr2l,f,c
  3884  0073F0  504E               	movf	??_main+1,w,c
  3885  0073F2  22DA               	addwfc	fsr2h,f,c
  3886  0073F4  CFDE F04F          	movff	postinc2,??_main+2
  3887  0073F8  CFDD F050          	movff	postdec2,??_main+3
  3888  0073FC  0100               	movlb	0	; () banked
  3889  0073FE  51AE               	movf	(_max_tally+1)& (0+255),w,b
  3890  007400  0A80               	xorlw	128
  3891  007402  6E51               	movwf	(??_main+4)& (0+255),c
  3892  007404  504F               	movf	??_main+2,w,c
  3893  007406  0100               	movlb	0	; () banked
  3894  007408  5DAD               	subwf	_max_tally& (0+255),w,b
  3895  00740A  5050               	movf	??_main+3,w,c
  3896  00740C  0A80               	xorlw	128
  3897  00740E  5851               	subwfb	(??_main+4)& (0+255),w,c
  3898  007410  B0D8               	btfsc	status,0,c
  3899  007412  D015               	goto	l2707
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;main pic18.c: 207: max_tally = guesses[i];
  3903  007414  0EB3               	movlw	low _guesses
  3904  007416  6E4D               	movwf	??_main& (0+255),c
  3905  007418  0E00               	movlw	high _guesses
  3906  00741A  6E4E               	movwf	(??_main+1)& (0+255),c
  3907  00741C  90D8               	bcf	status,0,c
  3908  00741E  0100               	movlb	0	; () banked
  3909  007420  35D1               	rlcf	main@i& (0+255),w,b
  3910  007422  6ED9               	movwf	fsr2l,c
  3911  007424  0100               	movlb	0	; () banked
  3912  007426  35D2               	rlcf	(main@i+1)& (0+255),w,b
  3913  007428  6EDA               	movwf	fsr2h,c
  3914  00742A  504D               	movf	??_main,w,c
  3915  00742C  26D9               	addwf	fsr2l,f,c
  3916  00742E  504E               	movf	??_main+1,w,c
  3917  007430  22DA               	addwfc	fsr2h,f,c
  3918  007432  0100               	movlb	0	; () banked
  3919  007434  CFDE F0AD          	movff	postinc2,_max_tally
  3920  007438  0100               	movlb	0	; () banked
  3921  00743A  CFDD F0AE          	movff	postdec2,_max_tally+1
  3922  00743E                     l2707:
  3923                           
  3924                           ; BSR set to: 0
  3925  00743E  0100               	movlb	0	; () banked
  3926  007440  4BD1               	infsnz	main@i& (0+255),f,b
  3927  007442  2BD2               	incf	(main@i+1)& (0+255),f,b
  3928  007444  D7BF               	goto	L9
  3929  007446                     l2711:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main pic18.c: 208: }
  3933                           ;main pic18.c: 209: }
  3934                           ;main pic18.c: 211: alarm_prob = 0;
  3935  007446  0E00               	movlw	0
  3936  007448  0100               	movlb	0	; () banked
  3937  00744A  6FA8               	movwf	(_alarm_prob+1)& (0+255),b
  3938  00744C  0E00               	movlw	0
  3939  00744E  0100               	movlb	0	; () banked
  3940  007450  6FA7               	movwf	_alarm_prob& (0+255),b
  3941                           
  3942                           ;main pic18.c: 212: growl_prob = 0;
  3943  007452  0E00               	movlw	0
  3944  007454  0100               	movlb	0	; () banked
  3945  007456  6FAA               	movwf	(_growl_prob+1)& (0+255),b
  3946  007458  0E00               	movlw	0
  3947  00745A  0100               	movlb	0	; () banked
  3948  00745C  6FA9               	movwf	_growl_prob& (0+255),b
  3949                           
  3950                           ;main pic18.c: 213: horn_prob = 0;
  3951  00745E  0E00               	movlw	0
  3952  007460  0100               	movlb	0	; () banked
  3953  007462  6FAC               	movwf	(_horn_prob+1)& (0+255),b
  3954  007464  0E00               	movlw	0
  3955  007466  0100               	movlb	0	; () banked
  3956  007468  6FAB               	movwf	_horn_prob& (0+255),b
  3957                           
  3958                           ;main pic18.c: 214: scream_prob = 0;
  3959  00746A  0E00               	movlw	0
  3960  00746C  0100               	movlb	0	; () banked
  3961  00746E  6FB0               	movwf	(_scream_prob+1)& (0+255),b
  3962  007470  0E00               	movlw	0
  3963  007472  0100               	movlb	0	; () banked
  3964  007474  6FAF               	movwf	_scream_prob& (0+255),b
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;main pic18.c: 216: if(max_tally > 20) {
  3968  007476  0100               	movlb	0	; () banked
  3969  007478  51AE               	movf	(_max_tally+1)& (0+255),w,b
  3970  00747A  0A80               	xorlw	128
  3971  00747C  0F80               	addlw	-128
  3972  00747E  0E15               	movlw	21
  3973  007480  B4D8               	btfsc	status,2,c
  3974  007482  5DAD               	subwf	_max_tally& (0+255),w,b
  3975  007484  A0D8               	btfss	status,0,c
  3976  007486  D10D               	goto	l2765
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;main pic18.c: 217: LATBbits.LATB1 = 1;
  3980  007488  828A               	bsf	3978,1,c	;volatile
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main pic18.c: 218: total_tally = alarm_tally + growl_tally + horn_tally + scream_tally;
  3984  00748A  0100               	movlb	0	; () banked
  3985  00748C  C0BD  F04D         	movff	_alarm_tally,??_main
  3986  007490  0100               	movlb	0	; () banked
  3987  007492  C0BE  F04E         	movff	_alarm_tally+1,??_main+1
  3988  007496  0100               	movlb	0	; () banked
  3989  007498  51BF               	movf	_growl_tally& (0+255),w,b
  3990  00749A  264D               	addwf	??_main,f,c
  3991  00749C  0100               	movlb	0	; () banked
  3992  00749E  51C0               	movf	(_growl_tally+1)& (0+255),w,b
  3993  0074A0  224E               	addwfc	??_main+1,f,c
  3994  0074A2  0100               	movlb	0	; () banked
  3995  0074A4  51C1               	movf	_horn_tally& (0+255),w,b
  3996  0074A6  264D               	addwf	??_main,f,c
  3997  0074A8  0100               	movlb	0	; () banked
  3998  0074AA  51C2               	movf	(_horn_tally+1)& (0+255),w,b
  3999  0074AC  224E               	addwfc	??_main+1,f,c
  4000  0074AE  0100               	movlb	0	; () banked
  4001  0074B0  51C3               	movf	_scream_tally& (0+255),w,b
  4002  0074B2  244D               	addwf	??_main,w,c
  4003  0074B4  0100               	movlb	0	; () banked
  4004  0074B6  6FB1               	movwf	_total_tally& (0+255),b
  4005  0074B8  0100               	movlb	0	; () banked
  4006  0074BA  51C4               	movf	(_scream_tally+1)& (0+255),w,b
  4007  0074BC  204E               	addwfc	??_main+1,w,c
  4008  0074BE  0100               	movlb	0	; () banked
  4009  0074C0  6FB2               	movwf	(_total_tally+1)& (0+255),b
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;main pic18.c: 219: alarm_prob = 100 * alarm_tally / total_tally;
  4013  0074C2  C0BD  F001         	movff	_alarm_tally,___wmul@multiplier
  4014  0074C6  C0BE  F002         	movff	_alarm_tally+1,___wmul@multiplier+1
  4015  0074CA  0E00               	movlw	0
  4016  0074CC  6E04               	movwf	___wmul@multiplicand+1,c
  4017  0074CE  0E64               	movlw	100
  4018  0074D0  6E03               	movwf	___wmul@multiplicand,c
  4019  0074D2  ECE7  F02B         	call	___wmul	;wreg free
  4020  0074D6  C001  F007         	movff	?___wmul,___awdiv@dividend
  4021  0074DA  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4022  0074DE  C0B1  F009         	movff	_total_tally,___awdiv@divisor
  4023  0074E2  C0B2  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4024  0074E6  EC0C  F02E         	call	___awdiv	;wreg free
  4025  0074EA  C007  F0A7         	movff	?___awdiv,_alarm_prob
  4026  0074EE  C008  F0A8         	movff	?___awdiv+1,_alarm_prob+1
  4027                           
  4028                           ;main pic18.c: 220: growl_prob = 100 * growl_tally / total_tally;
  4029  0074F2  C0BF  F001         	movff	_growl_tally,___wmul@multiplier
  4030  0074F6  C0C0  F002         	movff	_growl_tally+1,___wmul@multiplier+1
  4031  0074FA  0E00               	movlw	0
  4032  0074FC  6E04               	movwf	___wmul@multiplicand+1,c
  4033  0074FE  0E64               	movlw	100
  4034  007500  6E03               	movwf	___wmul@multiplicand,c
  4035  007502  ECE7  F02B         	call	___wmul	;wreg free
  4036  007506  C001  F007         	movff	?___wmul,___awdiv@dividend
  4037  00750A  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4038  00750E  C0B1  F009         	movff	_total_tally,___awdiv@divisor
  4039  007512  C0B2  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4040  007516  EC0C  F02E         	call	___awdiv	;wreg free
  4041  00751A  C007  F0A9         	movff	?___awdiv,_growl_prob
  4042  00751E  C008  F0AA         	movff	?___awdiv+1,_growl_prob+1
  4043                           
  4044                           ;main pic18.c: 221: horn_prob = 100 * horn_tally / total_tally;
  4045  007522  C0C1  F001         	movff	_horn_tally,___wmul@multiplier
  4046  007526  C0C2  F002         	movff	_horn_tally+1,___wmul@multiplier+1
  4047  00752A  0E00               	movlw	0
  4048  00752C  6E04               	movwf	___wmul@multiplicand+1,c
  4049  00752E  0E64               	movlw	100
  4050  007530  6E03               	movwf	___wmul@multiplicand,c
  4051  007532  ECE7  F02B         	call	___wmul	;wreg free
  4052  007536  C001  F007         	movff	?___wmul,___awdiv@dividend
  4053  00753A  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4054  00753E  C0B1  F009         	movff	_total_tally,___awdiv@divisor
  4055  007542  C0B2  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4056  007546  EC0C  F02E         	call	___awdiv	;wreg free
  4057  00754A  C007  F0AB         	movff	?___awdiv,_horn_prob
  4058  00754E  C008  F0AC         	movff	?___awdiv+1,_horn_prob+1
  4059                           
  4060                           ;main pic18.c: 222: scream_prob = 100 * scream_tally / total_tally;
  4061  007552  C0C3  F001         	movff	_scream_tally,___wmul@multiplier
  4062  007556  C0C4  F002         	movff	_scream_tally+1,___wmul@multiplier+1
  4063  00755A  0E00               	movlw	0
  4064  00755C  6E04               	movwf	___wmul@multiplicand+1,c
  4065  00755E  0E64               	movlw	100
  4066  007560  6E03               	movwf	___wmul@multiplicand,c
  4067  007562  ECE7  F02B         	call	___wmul	;wreg free
  4068  007566  C001  F007         	movff	?___wmul,___awdiv@dividend
  4069  00756A  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  4070  00756E  C0B1  F009         	movff	_total_tally,___awdiv@divisor
  4071  007572  C0B2  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4072  007576  EC0C  F02E         	call	___awdiv	;wreg free
  4073  00757A  C007  F0AF         	movff	?___awdiv,_scream_prob
  4074  00757E  C008  F0B0         	movff	?___awdiv+1,_scream_prob+1
  4075                           
  4076                           ;main pic18.c: 225: if(max_tally == alarm_tally) {
  4077  007582  0100               	movlb	0	; () banked
  4078  007584  51BE               	movf	(_alarm_tally+1)& (0+255),w,b
  4079  007586  0100               	movlb	0	; () banked
  4080  007588  19AE               	xorwf	(_max_tally+1)& (0+255),w,b
  4081  00758A  E104               	bnz	u2435
  4082  00758C  0100               	movlb	0	; () banked
  4083  00758E  51BD               	movf	_alarm_tally& (0+255),w,b
  4084  007590  0100               	movlb	0	; () banked
  4085  007592  19AD               	xorwf	_max_tally& (0+255),w,b
  4086  007594                     u2435:
  4087  007594  A4D8               	btfss	status,2,c
  4088  007596  D00C               	goto	l2729
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;main pic18.c: 226: writeGuess('A', alarm_prob, 1);
  4092  007598  C0A7  F023         	movff	_alarm_prob,writeGuess@prob
  4093  00759C  C0A8  F024         	movff	_alarm_prob+1,writeGuess@prob+1
  4094  0075A0  0E00               	movlw	0
  4095  0075A2  6E26               	movwf	writeGuess@row+1,c
  4096  0075A4  0E01               	movlw	1
  4097  0075A6  6E25               	movwf	writeGuess@row,c
  4098  0075A8  0E41               	movlw	65
  4099  0075AA  EC47  F02C         	call	_writeGuess
  4100                           
  4101                           ;main pic18.c: 227: } else if(max_tally == growl_tally) {
  4102  0075AE  D044               	goto	l2741
  4103  0075B0                     l2729:
  4104  0075B0  0100               	movlb	0	; () banked
  4105  0075B2  51C0               	movf	(_growl_tally+1)& (0+255),w,b
  4106  0075B4  0100               	movlb	0	; () banked
  4107  0075B6  19AE               	xorwf	(_max_tally+1)& (0+255),w,b
  4108  0075B8  E104               	bnz	u2445
  4109  0075BA  0100               	movlb	0	; () banked
  4110  0075BC  51BF               	movf	_growl_tally& (0+255),w,b
  4111  0075BE  0100               	movlb	0	; () banked
  4112  0075C0  19AD               	xorwf	_max_tally& (0+255),w,b
  4113  0075C2                     u2445:
  4114  0075C2  A4D8               	btfss	status,2,c
  4115  0075C4  D00C               	goto	l2733
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;main pic18.c: 228: writeGuess('G', growl_prob, 1);
  4119  0075C6  C0A9  F023         	movff	_growl_prob,writeGuess@prob
  4120  0075CA  C0AA  F024         	movff	_growl_prob+1,writeGuess@prob+1
  4121  0075CE  0E00               	movlw	0
  4122  0075D0  6E26               	movwf	writeGuess@row+1,c
  4123  0075D2  0E01               	movlw	1
  4124  0075D4  6E25               	movwf	writeGuess@row,c
  4125  0075D6  0E47               	movlw	71
  4126  0075D8  EC47  F02C         	call	_writeGuess
  4127                           
  4128                           ;main pic18.c: 229: } else if(max_tally == horn_tally) {
  4129  0075DC  D02D               	goto	l2741
  4130  0075DE                     l2733:
  4131  0075DE  0100               	movlb	0	; () banked
  4132  0075E0  51C2               	movf	(_horn_tally+1)& (0+255),w,b
  4133  0075E2  0100               	movlb	0	; () banked
  4134  0075E4  19AE               	xorwf	(_max_tally+1)& (0+255),w,b
  4135  0075E6  E104               	bnz	u2455
  4136  0075E8  0100               	movlb	0	; () banked
  4137  0075EA  51C1               	movf	_horn_tally& (0+255),w,b
  4138  0075EC  0100               	movlb	0	; () banked
  4139  0075EE  19AD               	xorwf	_max_tally& (0+255),w,b
  4140  0075F0                     u2455:
  4141  0075F0  A4D8               	btfss	status,2,c
  4142  0075F2  D00C               	goto	l2737
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;main pic18.c: 230: writeGuess('H', horn_prob, 1);
  4146  0075F4  C0AB  F023         	movff	_horn_prob,writeGuess@prob
  4147  0075F8  C0AC  F024         	movff	_horn_prob+1,writeGuess@prob+1
  4148  0075FC  0E00               	movlw	0
  4149  0075FE  6E26               	movwf	writeGuess@row+1,c
  4150  007600  0E01               	movlw	1
  4151  007602  6E25               	movwf	writeGuess@row,c
  4152  007604  0E48               	movlw	72
  4153  007606  EC47  F02C         	call	_writeGuess
  4154                           
  4155                           ;main pic18.c: 231: } else if(max_tally == scream_tally) {
  4156  00760A  D016               	goto	l2741
  4157  00760C                     l2737:
  4158  00760C  0100               	movlb	0	; () banked
  4159  00760E  51C4               	movf	(_scream_tally+1)& (0+255),w,b
  4160  007610  0100               	movlb	0	; () banked
  4161  007612  19AE               	xorwf	(_max_tally+1)& (0+255),w,b
  4162  007614  E104               	bnz	u2465
  4163  007616  0100               	movlb	0	; () banked
  4164  007618  51C3               	movf	_scream_tally& (0+255),w,b
  4165  00761A  0100               	movlb	0	; () banked
  4166  00761C  19AD               	xorwf	_max_tally& (0+255),w,b
  4167  00761E                     u2465:
  4168  00761E  A4D8               	btfss	status,2,c
  4169  007620  D00B               	goto	l2741
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;main pic18.c: 232: writeGuess('S', scream_prob, 1);
  4173  007622  C0AF  F023         	movff	_scream_prob,writeGuess@prob
  4174  007626  C0B0  F024         	movff	_scream_prob+1,writeGuess@prob+1
  4175  00762A  0E00               	movlw	0
  4176  00762C  6E26               	movwf	writeGuess@row+1,c
  4177  00762E  0E01               	movlw	1
  4178  007630  6E25               	movwf	writeGuess@row,c
  4179  007632  0E53               	movlw	83
  4180  007634  EC47  F02C         	call	_writeGuess
  4181  007638                     l2741:
  4182                           
  4183                           ;main pic18.c: 233: }
  4184                           ;main pic18.c: 235: for(i = 0; i < 10; i++) {
  4185  007638  0E00               	movlw	0
  4186  00763A  0100               	movlb	0	; () banked
  4187  00763C  6FD2               	movwf	(main@i+1)& (0+255),b
  4188  00763E  0E00               	movlw	0
  4189  007640  0100               	movlb	0	; () banked
  4190  007642  6FD1               	movwf	main@i& (0+255),b
  4191  007644                     
  4192                           ; BSR set to: 0
  4193  007644  0100               	movlb	0	; () banked
  4194  007646  51D2               	movf	(main@i+1)& (0+255),w,b
  4195  007648  0A80               	xorlw	128
  4196  00764A  0F80               	addlw	-128
  4197  00764C  0E0A               	movlw	10
  4198  00764E  B4D8               	btfsc	status,2,c
  4199  007650  5DD1               	subwf	main@i& (0+255),w,b
  4200  007652  B0D8               	btfsc	status,0,c
  4201  007654  D00B               	goto	l163
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;main pic18.c: 236: _delay(100000);
  4205                           
  4206                           ; BSR set to: 0
  4207                           
  4208                           ; BSR set to: 0
  4209  007656  0E82               	movlw	130
  4210  007658  6E4D               	movwf	??_main& (0+255),c
  4211  00765A  0EDE               	movlw	222
  4212  00765C                     u2577:
  4213  00765C  2EE8               	decfsz	wreg,f,c
  4214  00765E  D7FE               	goto	u2577
  4215  007660  2E4D               	decfsz	??_main& (0+255),f,c
  4216  007662  D7FC               	goto	u2577
  4217  007664  0100               	movlb	0	; () banked
  4218  007666  4BD1               	infsnz	main@i& (0+255),f,b
  4219  007668  2BD2               	incf	(main@i+1)& (0+255),f,b
  4220  00766A  D7EC               	goto	L10
  4221  00766C                     l163:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;main pic18.c: 237: }
  4225                           ;main pic18.c: 238: LATBbits.LATB1 = 0;
  4226  00766C  928A               	bcf	3978,1,c	;volatile
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;main pic18.c: 239: for(i = 0; i < 10; i++) {
  4230  00766E  0E00               	movlw	0
  4231  007670  0100               	movlb	0	; () banked
  4232  007672  6FD2               	movwf	(main@i+1)& (0+255),b
  4233  007674  0E00               	movlw	0
  4234  007676  0100               	movlb	0	; () banked
  4235  007678  6FD1               	movwf	main@i& (0+255),b
  4236  00767A                     
  4237                           ; BSR set to: 0
  4238  00767A  0100               	movlb	0	; () banked
  4239  00767C  51D2               	movf	(main@i+1)& (0+255),w,b
  4240  00767E  0A80               	xorlw	128
  4241  007680  0F80               	addlw	-128
  4242  007682  0E0A               	movlw	10
  4243  007684  B4D8               	btfsc	status,2,c
  4244  007686  5DD1               	subwf	main@i& (0+255),w,b
  4245  007688  B0D8               	btfsc	status,0,c
  4246  00768A  D00B               	goto	l2765
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;main pic18.c: 240: _delay(100000);
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ; BSR set to: 0
  4254  00768C  0E82               	movlw	130
  4255  00768E  6E4D               	movwf	??_main& (0+255),c
  4256  007690  0EDE               	movlw	222
  4257  007692                     u2587:
  4258  007692  2EE8               	decfsz	wreg,f,c
  4259  007694  D7FE               	goto	u2587
  4260  007696  2E4D               	decfsz	??_main& (0+255),f,c
  4261  007698  D7FC               	goto	u2587
  4262  00769A  0100               	movlb	0	; () banked
  4263  00769C  4BD1               	infsnz	main@i& (0+255),f,b
  4264  00769E  2BD2               	incf	(main@i+1)& (0+255),f,b
  4265  0076A0  D7EC               	goto	L11
  4266  0076A2                     l2765:
  4267                           
  4268                           ;main pic18.c: 249: sendIntArray(guesses, 5);
  4269  0076A2  0100               	movlb	0	; () banked
  4270  0076A4  0E00               	movlw	high _guesses
  4271  0076A6  6E04               	movwf	sendIntArray@array+1,c
  4272  0076A8  0100               	movlb	0	; () banked
  4273  0076AA  0EB3               	movlw	low _guesses
  4274  0076AC  6E03               	movwf	sendIntArray@array,c
  4275  0076AE  0E00               	movlw	0
  4276  0076B0  6E06               	movwf	sendIntArray@size+1,c
  4277  0076B2  0E05               	movlw	5
  4278  0076B4  6E05               	movwf	sendIntArray@size,c
  4279  0076B6  EC11  F02C         	call	_sendIntArray	;wreg free
  4280  0076BA  EFEE  F033         	goto	l2495
  4281  0076BE                     __end_of_main:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodl	equ	0xFF3
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           indf1	equ	0xFE7
  4291                           postinc1	equ	0xFE6
  4292                           postdec1	equ	0xFE5
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _writeGuess *****************
  4303 ;; Defined at:
  4304 ;;		line 309 in file "main pic18.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  guess           1    wreg     unsigned char 
  4307 ;;  prob            2   34[COMRAM] int 
  4308 ;;  row             2   36[COMRAM] int 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  guess           1   46[COMRAM] unsigned char 
  4311 ;;  percent         8   38[COMRAM] unsigned char [8]
  4312 ;; Return value:  Size  Location     Type
  4313 ;;		None               void
  4314 ;; Registers used:
  4315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4321 ;;      Params:         4       0       0       0       0       0       0
  4322 ;;      Locals:         9       0       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0
  4324 ;;      Totals:        13       0       0       0       0       0       0
  4325 ;;Total ram usage:       13 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    4
  4328 ;; This function calls:
  4329 ;;		_LCDStr
  4330 ;;		_sprintf
  4331 ;; This function is called by:
  4332 ;;		_main
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text1
  4337  00588E                     __ptext1:
  4338                           	opt stack 0
  4339  00588E                     _writeGuess:
  4340                           	opt stack 26
  4341                           
  4342                           ;incstack = 0
  4343                           ;writeGuess@guess stored from wreg
  4344  00588E  6E2F               	movwf	writeGuess@guess,c
  4345                           
  4346                           ;main pic18.c: 310: char percent[8];
  4347                           ;main pic18.c: 311: sprintf(percent, "%c %d %c", guess, prob, '%');
  4348  005890  0E00               	movlw	high writeGuess@percent
  4349  005892  6E0E               	movwf	sprintf@sp+1,c
  4350  005894  0E27               	movlw	low writeGuess@percent
  4351  005896  6E0D               	movwf	sprintf@sp,c
  4352  005898  0E7F               	movlw	high STR_1
  4353  00589A  6E10               	movwf	sprintf@f+1,c
  4354  00589C  0EF5               	movlw	low STR_1
  4355  00589E  6E0F               	movwf	sprintf@f,c
  4356  0058A0  C02F  F011         	movff	writeGuess@guess,?_sprintf+4
  4357  0058A4  6A12               	clrf	?_sprintf+5,c
  4358  0058A6  C023  F013         	movff	writeGuess@prob,?_sprintf+6
  4359  0058AA  C024  F014         	movff	writeGuess@prob+1,?_sprintf+7
  4360  0058AE  0E00               	movlw	0
  4361  0058B0  6E16               	movwf	?_sprintf+9,c
  4362  0058B2  0E25               	movlw	37
  4363  0058B4  6E15               	movwf	?_sprintf+8,c
  4364  0058B6  EC69  F02F         	call	_sprintf	;wreg free
  4365                           
  4366                           ;main pic18.c: 312: LCDStr(1, percent, 0);
  4367  0058BA  0E00               	movlw	high writeGuess@percent
  4368  0058BC  6E1B               	movwf	LCDStr@dataPtr+1,c
  4369  0058BE  0E27               	movlw	low writeGuess@percent
  4370  0058C0  6E1A               	movwf	LCDStr@dataPtr,c
  4371  0058C2  0E00               	movlw	0
  4372  0058C4  6E1C               	movwf	LCDStr@inv,c
  4373  0058C6  0E01               	movlw	1
  4374  0058C8  EC2B  F02C         	call	_LCDStr
  4375  0058CC  0012               	return	
  4376  0058CE                     __end_of_writeGuess:
  4377                           	opt stack 0
  4378                           tblptru	equ	0xFF8
  4379                           tblptrh	equ	0xFF7
  4380                           tblptrl	equ	0xFF6
  4381                           tablat	equ	0xFF5
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           postinc1	equ	0xFE6
  4387                           postdec1	equ	0xFE5
  4388                           fsr1h	equ	0xFE2
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _sprintf *****************
  4398 ;; Defined at:
  4399 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4402 ;;		 -> writeGuess@percent(8), 
  4403 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4404 ;;		 -> STR_1(9), 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  _val            5   28[COMRAM] struct .
  4407 ;;  ap              2   26[COMRAM] PTR void [1]
  4408 ;;		 -> ?_sprintf(2), 
  4409 ;;  c               1   33[COMRAM] char 
  4410 ;;  prec            1   25[COMRAM] char 
  4411 ;;  flag            1   24[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  2   12[COMRAM] int 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4421 ;;      Params:        10       0       0       0       0       0       0
  4422 ;;      Locals:        10       0       0       0       0       0       0
  4423 ;;      Temps:          2       0       0       0       0       0       0
  4424 ;;      Totals:        22       0       0       0       0       0       0
  4425 ;;Total ram usage:       22 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    1
  4428 ;; This function calls:
  4429 ;;		___lwdiv
  4430 ;;		___lwmod
  4431 ;; This function is called by:
  4432 ;;		_writeGuess
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text2
  4437  005ED2                     __ptext2:
  4438                           	opt stack 0
  4439  005ED2                     _sprintf:
  4440                           	opt stack 28
  4441                           
  4442                           ;doprnt.c: 494: va_list ap;
  4443                           ;doprnt.c: 499: signed char c;
  4444                           ;doprnt.c: 506: signed char prec;
  4445                           ;doprnt.c: 508: unsigned char flag;
  4446                           ;doprnt.c: 527: union {
  4447                           ;doprnt.c: 528: unsigned int _val;
  4448                           ;doprnt.c: 529: struct {
  4449                           ;doprnt.c: 530: const char * _cp;
  4450                           ;doprnt.c: 531: unsigned _len;
  4451                           ;doprnt.c: 532: } _str;
  4452                           ;doprnt.c: 533: } _val;
  4453                           ;doprnt.c: 542: *ap = __va_start();
  4454                           
  4455                           ;incstack = 0
  4456  005ED2  0E00               	movlw	high (?_sprintf+4)
  4457  005ED4  6E1C               	movwf	sprintf@ap+1,c
  4458  005ED6  0E11               	movlw	low (?_sprintf+4)
  4459  005ED8  6E1B               	movwf	sprintf@ap,c
  4460                           
  4461                           ;doprnt.c: 545: while(c = *f++) {
  4462  005EDA  D0A6               	goto	l2269
  4463  005EDC                     l2209:
  4464                           
  4465                           ;doprnt.c: 547: if(c != '%')
  4466  005EDC  5022               	movf	sprintf@c,w,c
  4467  005EDE  0A25               	xorlw	37
  4468  005EE0  A4D8               	btfss	status,2,c
  4469  005EE2  D00D               	goto	l2221
  4470                           
  4471                           ;doprnt.c: 552: }
  4472                           ;doprnt.c: 557: flag = 0;
  4473                           
  4474                           ;doprnt.c: 551: continue;
  4475                           
  4476                           ;doprnt.c: 549: {
  4477                           ;doprnt.c: 550: ((*sp++ = (c)));
  4478  005EE4  0E00               	movlw	0
  4479  005EE6  6E19               	movwf	sprintf@flag,c
  4480                           
  4481                           ;doprnt.c: 644: switch(c = *f++) {
  4482  005EE8  D013               	goto	l2227
  4483  005EEA                     l2217:
  4484                           
  4485                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4486  005EEA  C01B  FFD9         	movff	sprintf@ap,fsr2l
  4487  005EEE  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  4488  005EF2  50DF               	movf	indf2,w,c
  4489  005EF4  6E22               	movwf	sprintf@c,c
  4490  005EF6  0E02               	movlw	2
  4491  005EF8  261B               	addwf	sprintf@ap,f,c
  4492  005EFA  0E00               	movlw	0
  4493  005EFC  221C               	addwfc	sprintf@ap+1,f,c
  4494  005EFE                     l2221:
  4495                           
  4496                           ;doprnt.c: 818: ((*sp++ = (c)));
  4497  005EFE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4498  005F02  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4499  005F06  C022  FFDF         	movff	sprintf@c,indf2
  4500  005F0A  4A0D               	infsnz	sprintf@sp,f,c
  4501  005F0C  2A0E               	incf	sprintf@sp+1,f,c
  4502                           
  4503                           ;doprnt.c: 819: continue;
  4504  005F0E  D08C               	goto	l2269
  4505  005F10                     l2227:
  4506  005F10  C00F  FFF6         	movff	sprintf@f,tblptrl
  4507  005F14  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4508  005F18  4A0F               	infsnz	sprintf@f,f,c
  4509  005F1A  2A10               	incf	sprintf@f+1,f,c
  4510  005F1C                     	if	0	;tblptru may be non-zero
  4511  005F1C                     	endif
  4512  005F1C                     	if	0	;tblptru may be non-zero
  4513  005F1C                     	endif
  4514  005F1C  0008               	tblrd		*
  4515  005F1E  CFF5 F022          	movff	tablat,sprintf@c
  4516  005F22  5022               	movf	sprintf@c& (0+255),w,c
  4517                           
  4518                           ; Switch size 1, requested type "space"
  4519                           ; Number of cases is 4, Range of values is 0 to 105
  4520                           ; switch strategies available:
  4521                           ; Name         Instructions Cycles
  4522                           ; simple_byte           13     7 (average)
  4523                           ;	Chosen strategy is simple_byte
  4524  005F24  0A00               	xorlw	0	; case 0
  4525  005F26  B4D8               	btfsc	status,2,c
  4526  005F28  D08A               	goto	l2271
  4527  005F2A  0A63               	xorlw	99	; case 99
  4528  005F2C  B4D8               	btfsc	status,2,c
  4529  005F2E  D7DD               	goto	l2217
  4530  005F30  0A07               	xorlw	7	; case 100
  4531  005F32  B4D8               	btfsc	status,2,c
  4532  005F34  D003               	goto	l2229
  4533  005F36  0A0D               	xorlw	13	; case 105
  4534  005F38  A4D8               	btfss	status,2,c
  4535  005F3A  D7E1               	goto	l2221
  4536  005F3C                     l2229:
  4537                           
  4538                           ;doprnt.c: 1262: {
  4539                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4540  005F3C  C01B  FFD9         	movff	sprintf@ap,fsr2l
  4541  005F40  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  4542  005F44  CFDE F01D          	movff	postinc2,sprintf@_val
  4543  005F48  CFDD F01E          	movff	postdec2,sprintf@_val+1
  4544  005F4C  0E02               	movlw	2
  4545  005F4E  261B               	addwf	sprintf@ap,f,c
  4546  005F50  0E00               	movlw	0
  4547  005F52  221C               	addwfc	sprintf@ap+1,f,c
  4548                           
  4549                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4550  005F54  501E               	movf	sprintf@_val+1,w,c
  4551  005F56  0A80               	xorlw	128
  4552  005F58  6EF3               	movwf	prodl,c
  4553  005F5A  0E80               	movlw	128
  4554  005F5C  5CF3               	subwf	prodl,w,c
  4555  005F5E  0E00               	movlw	0
  4556  005F60  B4D8               	btfsc	status,2,c
  4557  005F62  5C1D               	subwf	sprintf@_val,w,c
  4558  005F64  B0D8               	btfsc	status,0,c
  4559  005F66  D006               	goto	l2239
  4560                           
  4561                           ;doprnt.c: 1271: flag |= 0x03;
  4562  005F68  0E03               	movlw	3
  4563  005F6A  1219               	iorwf	sprintf@flag,f,c
  4564                           
  4565                           ;doprnt.c: 1272: _val._val = -_val._val;
  4566  005F6C  6C1D               	negf	sprintf@_val,c
  4567  005F6E  1E1E               	comf	sprintf@_val+1,f,c
  4568  005F70  B0D8               	btfsc	status,0,c
  4569  005F72  2A1E               	incf	sprintf@_val+1,f,c
  4570  005F74                     l2239:
  4571                           
  4572                           ;doprnt.c: 1273: }
  4573                           ;doprnt.c: 1275: }
  4574                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4575  005F74  0E01               	movlw	1
  4576  005F76  6E22               	movwf	sprintf@c,c
  4577  005F78  5022               	movf	sprintf@c,w,c
  4578  005F7A  0A05               	xorlw	5
  4579  005F7C  B4D8               	btfsc	status,2,c
  4580  005F7E  D016               	goto	l2253
  4581                           
  4582                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4583  005F80  5022               	movf	sprintf@c,w,c
  4584  005F82  0D02               	mullw	2
  4585  005F84  0EEB               	movlw	low _dpowers
  4586  005F86  24F3               	addwf	prodl,w,c
  4587  005F88  6EF6               	movwf	tblptrl,c
  4588  005F8A  0E7F               	movlw	high _dpowers
  4589  005F8C  20F4               	addwfc	prodh,w,c
  4590  005F8E  6EF7               	movwf	tblptrh,c
  4591  005F90                     	if	0	;There are less than 3 active tblptr bytes
  4592  005F90                     	endif
  4593  005F90  0009               	tblrd		*+
  4594  005F92  CFF5 F017          	movff	tablat,??_sprintf
  4595  005F96  0009               	tblrd		*+
  4596  005F98  CFF5 F018          	movff	tablat,??_sprintf+1
  4597  005F9C  5017               	movf	??_sprintf,w,c
  4598  005F9E  5C1D               	subwf	sprintf@_val,w,c
  4599  005FA0  5018               	movf	??_sprintf+1,w,c
  4600  005FA2  581E               	subwfb	sprintf@_val+1,w,c
  4601  005FA4  A0D8               	btfss	status,0,c
  4602  005FA6  D002               	goto	l2253
  4603                           
  4604                           ;doprnt.c: 1316: break;
  4605  005FA8  2A22               	incf	sprintf@c,f,c
  4606  005FAA  D7E6               	goto	L12
  4607  005FAC                     l2253:
  4608                           
  4609                           ;doprnt.c: 1431: {
  4610                           ;doprnt.c: 1447: if(flag & 0x03)
  4611  005FAC  C019  F017         	movff	sprintf@flag,??_sprintf
  4612  005FB0  0E03               	movlw	3
  4613  005FB2  1617               	andwf	??_sprintf,f,c
  4614  005FB4  B4D8               	btfsc	status,2,c
  4615  005FB6  D008               	goto	l2259
  4616                           
  4617                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4618  005FB8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4619  005FBC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4620  005FC0  0E2D               	movlw	45
  4621  005FC2  6EDF               	movwf	indf2,c
  4622  005FC4  4A0D               	infsnz	sprintf@sp,f,c
  4623  005FC6  2A0E               	incf	sprintf@sp+1,f,c
  4624  005FC8                     l2259:
  4625                           
  4626                           ;doprnt.c: 1478: }
  4627                           ;doprnt.c: 1481: prec = c;
  4628  005FC8  C022  F01A         	movff	sprintf@c,sprintf@prec
  4629                           
  4630                           ;doprnt.c: 1483: while(prec--) {
  4631  005FCC  D029               	goto	l2267
  4632  005FCE                     l2261:
  4633                           
  4634                           ;doprnt.c: 1487: {
  4635                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4636  005FCE  501A               	movf	sprintf@prec,w,c
  4637  005FD0  0D02               	mullw	2
  4638  005FD2  0EEB               	movlw	low _dpowers
  4639  005FD4  24F3               	addwf	prodl,w,c
  4640  005FD6  6EF6               	movwf	tblptrl,c
  4641  005FD8  0E7F               	movlw	high _dpowers
  4642  005FDA  20F4               	addwfc	prodh,w,c
  4643  005FDC  6EF7               	movwf	tblptrh,c
  4644  005FDE                     	if	0	;There are less than 3 active tblptr bytes
  4645  005FDE                     	endif
  4646  005FDE  0009               	tblrd		*+
  4647  005FE0  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4648  005FE4  000A               	tblrd		*-
  4649  005FE6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4650  005FEA  C01D  F001         	movff	sprintf@_val,___lwdiv@dividend
  4651  005FEE  C01E  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
  4652  005FF2  ECD4  F02C         	call	___lwdiv	;wreg free
  4653  005FF6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4654  005FFA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4655  005FFE  0E00               	movlw	0
  4656  006000  6E0B               	movwf	___lwmod@divisor+1,c
  4657  006002  0E0A               	movlw	10
  4658  006004  6E0A               	movwf	___lwmod@divisor,c
  4659  006006  EC67  F02C         	call	___lwmod	;wreg free
  4660  00600A  5008               	movf	?___lwmod,w,c
  4661  00600C  0F30               	addlw	48
  4662  00600E  6E22               	movwf	sprintf@c,c
  4663                           
  4664                           ;doprnt.c: 1532: }
  4665                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4666  006010  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4667  006014  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4668  006018  C022  FFDF         	movff	sprintf@c,indf2
  4669  00601C  4A0D               	infsnz	sprintf@sp,f,c
  4670  00601E  2A0E               	incf	sprintf@sp+1,f,c
  4671  006020                     l2267:
  4672  006020  061A               	decf	sprintf@prec,f,c
  4673  006022  281A               	incf	sprintf@prec& (0+255),w,c
  4674  006024  A4D8               	btfss	status,2,c
  4675  006026  D7D3               	goto	l2261
  4676  006028                     l2269:
  4677  006028  C00F  FFF6         	movff	sprintf@f,tblptrl
  4678  00602C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4679  006030  4A0F               	infsnz	sprintf@f,f,c
  4680  006032  2A10               	incf	sprintf@f+1,f,c
  4681  006034                     	if	0	;tblptru may be non-zero
  4682  006034                     	endif
  4683  006034                     	if	0	;tblptru may be non-zero
  4684  006034                     	endif
  4685  006034  0008               	tblrd		*
  4686  006036  CFF5 F022          	movff	tablat,sprintf@c
  4687  00603A  6622               	tstfsz	sprintf@c& (0+255),c
  4688  00603C  D74F               	goto	l2209
  4689  00603E                     l2271:
  4690                           
  4691                           ;doprnt.c: 1547: *sp = 0;
  4692  00603E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4693  006042  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4694  006046  0E00               	movlw	0
  4695  006048  6EDF               	movwf	indf2,c
  4696  00604A  0012               	return	
  4697  00604C                     __end_of_sprintf:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           indf1	equ	0xFE7
  4708                           postinc1	equ	0xFE6
  4709                           postdec1	equ	0xFE5
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function ___lwdiv *****************
  4720 ;; Defined at:
  4721 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  dividend        2    0[COMRAM] unsigned int 
  4724 ;;  divisor         2    2[COMRAM] unsigned int 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  quotient        2    4[COMRAM] unsigned int 
  4727 ;;  counter         1    6[COMRAM] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  2    0[COMRAM] unsigned int 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4737 ;;      Params:         4       0       0       0       0       0       0
  4738 ;;      Locals:         3       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0
  4740 ;;      Totals:         7       0       0       0       0       0       0
  4741 ;;Total ram usage:        7 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		_sprintf
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text3
  4751  0059A8                     __ptext3:
  4752                           	opt stack 0
  4753  0059A8                     ___lwdiv:
  4754                           	opt stack 28
  4755                           
  4756                           ;incstack = 0
  4757  0059A8  0E00               	movlw	0
  4758  0059AA  6E06               	movwf	___lwdiv@quotient+1,c
  4759  0059AC  0E00               	movlw	0
  4760  0059AE  6E05               	movwf	___lwdiv@quotient,c
  4761  0059B0  5004               	movf	___lwdiv@divisor+1,w,c
  4762  0059B2  1003               	iorwf	___lwdiv@divisor,w,c
  4763  0059B4  B4D8               	btfsc	status,2,c
  4764  0059B6  D01C               	goto	l980
  4765  0059B8  0E01               	movlw	1
  4766  0059BA  6E07               	movwf	___lwdiv@counter,c
  4767  0059BC  D004               	goto	l2081
  4768  0059BE                     l2079:
  4769  0059BE  90D8               	bcf	status,0,c
  4770  0059C0  3603               	rlcf	___lwdiv@divisor,f,c
  4771  0059C2  3604               	rlcf	___lwdiv@divisor+1,f,c
  4772  0059C4  2A07               	incf	___lwdiv@counter,f,c
  4773  0059C6                     l2081:
  4774  0059C6  AE04               	btfss	___lwdiv@divisor+1,7,c
  4775  0059C8  D7FA               	goto	l2079
  4776  0059CA                     l2083:
  4777  0059CA  90D8               	bcf	status,0,c
  4778  0059CC  3605               	rlcf	___lwdiv@quotient,f,c
  4779  0059CE  3606               	rlcf	___lwdiv@quotient+1,f,c
  4780  0059D0  5003               	movf	___lwdiv@divisor,w,c
  4781  0059D2  5C01               	subwf	___lwdiv@dividend,w,c
  4782  0059D4  5004               	movf	___lwdiv@divisor+1,w,c
  4783  0059D6  5802               	subwfb	___lwdiv@dividend+1,w,c
  4784  0059D8  A0D8               	btfss	status,0,c
  4785  0059DA  D005               	goto	l2091
  4786  0059DC  5003               	movf	___lwdiv@divisor,w,c
  4787  0059DE  5E01               	subwf	___lwdiv@dividend,f,c
  4788  0059E0  5004               	movf	___lwdiv@divisor+1,w,c
  4789  0059E2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4790  0059E4  8005               	bsf	___lwdiv@quotient,0,c
  4791  0059E6                     l2091:
  4792  0059E6  90D8               	bcf	status,0,c
  4793  0059E8  3204               	rrcf	___lwdiv@divisor+1,f,c
  4794  0059EA  3203               	rrcf	___lwdiv@divisor,f,c
  4795  0059EC  2E07               	decfsz	___lwdiv@counter,f,c
  4796  0059EE  D7ED               	goto	l2083
  4797  0059F0                     l980:
  4798  0059F0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4799  0059F4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4800  0059F8  0012               	return	
  4801  0059FA                     __end_of___lwdiv:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           indf1	equ	0xFE7
  4812                           postinc1	equ	0xFE6
  4813                           postdec1	equ	0xFE5
  4814                           fsr1h	equ	0xFE2
  4815                           fsr1l	equ	0xFE1
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function _LCDStr *****************
  4824 ;; Defined at:
  4825 ;;		line 399 in file "lcd3310_SPI.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  row             1    wreg     unsigned char 
  4828 ;;  dataPtr         2   25[COMRAM] PTR const unsigned char 
  4829 ;;		 -> writeGuess@percent(8), 
  4830 ;;  inv             1   27[COMRAM] unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  row             1   28[COMRAM] unsigned char 
  4833 ;;  x               1   29[COMRAM] unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4843 ;;      Params:         3       0       0       0       0       0       0
  4844 ;;      Locals:         2       0       0       0       0       0       0
  4845 ;;      Temps:          0       0       0       0       0       0       0
  4846 ;;      Totals:         5       0       0       0       0       0       0
  4847 ;;Total ram usage:        5 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    3
  4850 ;; This function calls:
  4851 ;;		_LCDChrXY
  4852 ;;		_LCDUpdate
  4853 ;; This function is called by:
  4854 ;;		_writeGuess
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text4
  4859  005856                     __ptext4:
  4860                           	opt stack 0
  4861  005856                     _LCDStr:
  4862                           	opt stack 26
  4863                           
  4864                           ;incstack = 0
  4865                           ;LCDStr@row stored from wreg
  4866  005856  6E1D               	movwf	LCDStr@row,c
  4867                           
  4868                           ;lcd3310_SPI.c: 402: unsigned char x = 0;
  4869  005858  0E00               	movlw	0
  4870  00585A  6E1E               	movwf	LCDStr@x,c
  4871                           
  4872                           ;lcd3310_SPI.c: 405: while ( *dataPtr ) {
  4873  00585C  D00E               	goto	l2283
  4874  00585E                     l2277:
  4875                           
  4876                           ;lcd3310_SPI.c: 409: LCDChrXY( x, row, *dataPtr);
  4877  00585E  C01D  F00D         	movff	LCDStr@row,LCDChrXY@y
  4878  005862  C01A  FFD9         	movff	LCDStr@dataPtr,fsr2l
  4879  005866  C01B  FFDA         	movff	LCDStr@dataPtr+1,fsr2h
  4880  00586A  50DF               	movf	indf2,w,c
  4881  00586C  6E0E               	movwf	LCDChrXY@ch,c
  4882  00586E  501E               	movf	LCDStr@x,w,c
  4883  005870  ECBB  F02E         	call	_LCDChrXY
  4884                           
  4885                           ;lcd3310_SPI.c: 411: x++;
  4886  005874  2A1E               	incf	LCDStr@x,f,c
  4887                           
  4888                           ;lcd3310_SPI.c: 412: dataPtr++;
  4889  005876  4A1A               	infsnz	LCDStr@dataPtr,f,c
  4890  005878  2A1B               	incf	LCDStr@dataPtr+1,f,c
  4891  00587A                     l2283:
  4892  00587A  C01A  FFD9         	movff	LCDStr@dataPtr,fsr2l
  4893  00587E  C01B  FFDA         	movff	LCDStr@dataPtr+1,fsr2h
  4894  005882  50DF               	movf	indf2,w,c
  4895  005884  A4D8               	btfss	status,2,c
  4896  005886  D7EB               	goto	l2277
  4897                           
  4898                           ;lcd3310_SPI.c: 413: }
  4899                           ;lcd3310_SPI.c: 415: LCDUpdate();
  4900  005888  EC7F  F02D         	call	_LCDUpdate	;wreg free
  4901  00588C  0012               	return	
  4902  00588E                     __end_of_LCDStr:
  4903                           	opt stack 0
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           prodh	equ	0xFF4
  4909                           prodl	equ	0xFF3
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           indf1	equ	0xFE7
  4913                           postinc1	equ	0xFE6
  4914                           postdec1	equ	0xFE5
  4915                           fsr1h	equ	0xFE2
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _LCDChrXY *****************
  4925 ;; Defined at:
  4926 ;;		line 306 in file "lcd3310_SPI.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  x               1    wreg     unsigned char 
  4929 ;;  y               1   12[COMRAM] unsigned char 
  4930 ;;  ch              1   13[COMRAM] unsigned char 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  x               1   18[COMRAM] unsigned char 
  4933 ;;  index           2   23[COMRAM] unsigned int 
  4934 ;;  i               2   21[COMRAM] unsigned int 
  4935 ;;  mid_shift       2   19[COMRAM] unsigned int 
  4936 ;;  offset          2   16[COMRAM] unsigned int 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;		None               void
  4939 ;; Registers used:
  4940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4946 ;;      Params:         2       0       0       0       0       0       0
  4947 ;;      Locals:         9       0       0       0       0       0       0
  4948 ;;      Temps:          2       0       0       0       0       0       0
  4949 ;;      Totals:        13       0       0       0       0       0       0
  4950 ;;Total ram usage:       13 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    1
  4953 ;; This function calls:
  4954 ;;		___lwmod
  4955 ;;		___wmul
  4956 ;; This function is called by:
  4957 ;;		_LCDStr
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text5
  4962  005D76                     __ptext5:
  4963                           	opt stack 0
  4964  005D76                     _LCDChrXY:
  4965                           	opt stack 27
  4966                           
  4967                           ;incstack = 0
  4968                           ;LCDChrXY@x stored from wreg
  4969  005D76  6E13               	movwf	LCDChrXY@x,c
  4970                           
  4971                           ;lcd3310_SPI.c: 308: unsigned int index = 0;
  4972  005D78  0E00               	movlw	0
  4973  005D7A  6E19               	movwf	LCDChrXY@index+1,c
  4974  005D7C  0E00               	movlw	0
  4975  005D7E  6E18               	movwf	LCDChrXY@index,c
  4976                           
  4977                           ;lcd3310_SPI.c: 309: unsigned int offset = 0;
  4978  005D80  0E00               	movlw	0
  4979  005D82  6E12               	movwf	LCDChrXY@offset+1,c
  4980  005D84  0E00               	movlw	0
  4981  005D86  6E11               	movwf	LCDChrXY@offset,c
  4982                           
  4983                           ;lcd3310_SPI.c: 310: unsigned int i = 0;
  4984  005D88  0E00               	movlw	0
  4985  005D8A  6E17               	movwf	LCDChrXY@i+1,c
  4986  005D8C  0E00               	movlw	0
  4987  005D8E  6E16               	movwf	LCDChrXY@i,c
  4988                           
  4989                           ;lcd3310_SPI.c: 311: unsigned int mid_shift = 0;
  4990  005D90  0E00               	movlw	0
  4991  005D92  6E15               	movwf	LCDChrXY@mid_shift+1,c
  4992  005D94  0E00               	movlw	0
  4993  005D96  6E14               	movwf	LCDChrXY@mid_shift,c
  4994                           
  4995                           ;lcd3310_SPI.c: 314: if ( x > (103 / 6) ) return;
  4996  005D98  0E11               	movlw	17
  4997  005D9A  6413               	cpfsgt	LCDChrXY@x,c
  4998  005D9C  D001               	goto	l2039
  4999  005D9E  0012               	return	
  5000  005DA0                     l2039:
  5001                           
  5002                           ;lcd3310_SPI.c: 315: if ( y > (48 / 13) | (y < 1) ) return;
  5003  005DA0  0E04               	movlw	4
  5004  005DA2  5C0D               	subwf	LCDChrXY@y,w,c
  5005  005DA4  B0D8               	btfsc	status,0,c
  5006  005DA6  0012               	return	
  5007  005DA8  660D               	tstfsz	LCDChrXY@y,c
  5008  005DAA  D001               	goto	l2043
  5009  005DAC  0012               	return	
  5010  005DAE                     l2043:
  5011                           
  5012                           ;lcd3310_SPI.c: 317: index = (((unsigned int)x*5+(unsigned int)1*103+66) % ((103 * 48) /
      +                           8));
  5013  005DAE  5013               	movf	LCDChrXY@x,w,c
  5014  005DB0  0D05               	mullw	5
  5015  005DB2  0EA9               	movlw	169
  5016  005DB4  24F3               	addwf	prodl,w,c
  5017  005DB6  6E08               	movwf	___lwmod@dividend,c
  5018  005DB8  0E00               	movlw	0
  5019  005DBA  20F4               	addwfc	prodh,w,c
  5020  005DBC  6E09               	movwf	___lwmod@dividend+1,c
  5021  005DBE  0E02               	movlw	2
  5022  005DC0  6E0B               	movwf	___lwmod@divisor+1,c
  5023  005DC2  0E6A               	movlw	106
  5024  005DC4  6E0A               	movwf	___lwmod@divisor,c
  5025  005DC6  EC67  F02C         	call	___lwmod	;wreg free
  5026  005DCA  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5027  005DCE  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5028                           
  5029                           ;lcd3310_SPI.c: 319: for ( i = 0; i < 5; i++ )
  5030  005DD2  0E00               	movlw	0
  5031  005DD4  6E17               	movwf	LCDChrXY@i+1,c
  5032  005DD6  0E00               	movlw	0
  5033  005DD8  6E16               	movwf	LCDChrXY@i,c
  5034  005DDA  0E05               	movlw	5
  5035  005DDC  5C16               	subwf	LCDChrXY@i,w,c
  5036  005DDE  0E00               	movlw	0
  5037  005DE0  5817               	subwfb	LCDChrXY@i+1,w,c
  5038  005DE2  B0D8               	btfsc	status,0,c
  5039  005DE4  0012               	return	
  5040                           
  5041                           ;lcd3310_SPI.c: 321: {
  5042                           ;lcd3310_SPI.c: 322: mid_shift = index%103;
  5043  005DE6  C018  F008         	movff	LCDChrXY@index,___lwmod@dividend
  5044  005DEA  C019  F009         	movff	LCDChrXY@index+1,___lwmod@dividend+1
  5045  005DEE  0E00               	movlw	0
  5046  005DF0  6E0B               	movwf	___lwmod@divisor+1,c
  5047  005DF2  0E67               	movlw	103
  5048  005DF4  6E0A               	movwf	___lwmod@divisor,c
  5049  005DF6  EC67  F02C         	call	___lwmod	;wreg free
  5050  005DFA  C008  F014         	movff	?___lwmod,LCDChrXY@mid_shift
  5051  005DFE  C009  F015         	movff	?___lwmod+1,LCDChrXY@mid_shift+1
  5052                           
  5053                           ;lcd3310_SPI.c: 323: if(mid_shift < 51){
  5054  005E02  0E33               	movlw	51
  5055  005E04  5C14               	subwf	LCDChrXY@mid_shift,w,c
  5056  005E06  0E00               	movlw	0
  5057  005E08  5815               	subwfb	LCDChrXY@mid_shift+1,w,c
  5058  005E0A  B0D8               	btfsc	status,0,c
  5059  005E0C  D020               	goto	l2059
  5060                           
  5061                           ;lcd3310_SPI.c: 324: if((mid_shift-3)%5 == 0){
  5062  005E0E  0EFD               	movlw	253
  5063  005E10  2414               	addwf	LCDChrXY@mid_shift,w,c
  5064  005E12  6E08               	movwf	___lwmod@dividend,c
  5065  005E14  0EFF               	movlw	255
  5066  005E16  2015               	addwfc	LCDChrXY@mid_shift+1,w,c
  5067  005E18  6E09               	movwf	___lwmod@dividend+1,c
  5068  005E1A  0E00               	movlw	0
  5069  005E1C  6E0B               	movwf	___lwmod@divisor+1,c
  5070  005E1E  0E05               	movlw	5
  5071  005E20  6E0A               	movwf	___lwmod@divisor,c
  5072  005E22  EC67  F02C         	call	___lwmod	;wreg free
  5073  005E26  5009               	movf	?___lwmod+1,w,c
  5074  005E28  1008               	iorwf	?___lwmod,w,c
  5075  005E2A  A4D8               	btfss	status,2,c
  5076  005E2C  D010               	goto	l2059
  5077                           
  5078                           ;lcd3310_SPI.c: 325: index = (index + 412) % ((103 * 48) / 8);
  5079  005E2E  0E9C               	movlw	156
  5080  005E30  2418               	addwf	LCDChrXY@index,w,c
  5081  005E32  6E08               	movwf	___lwmod@dividend,c
  5082  005E34  0E01               	movlw	1
  5083  005E36  2019               	addwfc	LCDChrXY@index+1,w,c
  5084  005E38  6E09               	movwf	___lwmod@dividend+1,c
  5085  005E3A  0E02               	movlw	2
  5086  005E3C  6E0B               	movwf	___lwmod@divisor+1,c
  5087  005E3E  0E6A               	movlw	106
  5088  005E40  6E0A               	movwf	___lwmod@divisor,c
  5089  005E42  EC67  F02C         	call	___lwmod	;wreg free
  5090  005E46  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5091  005E4A  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5092  005E4E                     l2059:
  5093                           
  5094                           ;lcd3310_SPI.c: 326: }
  5095                           ;lcd3310_SPI.c: 327: }
  5096                           ;lcd3310_SPI.c: 328: if(mid_shift == 46){
  5097  005E4E  5014               	movf	LCDChrXY@mid_shift,w,c
  5098  005E50  0A2E               	xorlw	46
  5099  005E52  1015               	iorwf	LCDChrXY@mid_shift+1,w,c
  5100  005E54  A4D8               	btfss	status,2,c
  5101  005E56  D010               	goto	l2063
  5102                           
  5103                           ;lcd3310_SPI.c: 329: index = (index +121) % ((103 * 48) / 8);
  5104  005E58  0E79               	movlw	121
  5105  005E5A  2418               	addwf	LCDChrXY@index,w,c
  5106  005E5C  6E08               	movwf	___lwmod@dividend,c
  5107  005E5E  0E00               	movlw	0
  5108  005E60  2019               	addwfc	LCDChrXY@index+1,w,c
  5109  005E62  6E09               	movwf	___lwmod@dividend+1,c
  5110  005E64  0E02               	movlw	2
  5111  005E66  6E0B               	movwf	___lwmod@divisor+1,c
  5112  005E68  0E6A               	movlw	106
  5113  005E6A  6E0A               	movwf	___lwmod@divisor,c
  5114  005E6C  EC67  F02C         	call	___lwmod	;wreg free
  5115  005E70  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5116  005E74  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5117  005E78                     l2063:
  5118                           
  5119                           ;lcd3310_SPI.c: 330: }
  5120                           ;lcd3310_SPI.c: 331: offset = FontLookup[ch - 32][i];
  5121  005E78  0EE0               	movlw	224
  5122  005E7A  240E               	addwf	LCDChrXY@ch,w,c
  5123  005E7C  6E01               	movwf	___wmul@multiplier,c
  5124  005E7E  6A02               	clrf	___wmul@multiplier+1,c
  5125  005E80  0EFF               	movlw	255
  5126  005E82  2202               	addwfc	___wmul@multiplier+1,f,c
  5127  005E84  0E00               	movlw	0
  5128  005E86  6E04               	movwf	___wmul@multiplicand+1,c
  5129  005E88  0E06               	movlw	6
  5130  005E8A  6E03               	movwf	___wmul@multiplicand,c
  5131  005E8C  ECE7  F02B         	call	___wmul	;wreg free
  5132  005E90  0EBF               	movlw	low _FontLookup
  5133  005E92  6E0F               	movwf	??_LCDChrXY& (0+255),c
  5134  005E94  0E7C               	movlw	high _FontLookup
  5135  005E96  6E10               	movwf	(??_LCDChrXY+1)& (0+255),c
  5136  005E98  5001               	movf	?___wmul,w,c
  5137  005E9A  260F               	addwf	??_LCDChrXY,f,c
  5138  005E9C  5002               	movf	?___wmul+1,w,c
  5139  005E9E  2210               	addwfc	??_LCDChrXY+1,f,c
  5140  005EA0  5016               	movf	LCDChrXY@i,w,c
  5141  005EA2  260F               	addwf	??_LCDChrXY,f,c
  5142  005EA4  5017               	movf	LCDChrXY@i+1,w,c
  5143  005EA6  2210               	addwfc	??_LCDChrXY+1,f,c
  5144  005EA8  C00F  FFF6         	movff	??_LCDChrXY,tblptrl
  5145  005EAC  C010  FFF7         	movff	??_LCDChrXY+1,tblptrh
  5146  005EB0                     	if	0	;tblptru may be non-zero
  5147  005EB0                     	endif
  5148  005EB0                     	if	0	;tblptru may be non-zero
  5149  005EB0                     	endif
  5150  005EB0  0008               	tblrd		*
  5151  005EB2  50F5               	movf	tablat,w,c
  5152  005EB4  6E11               	movwf	LCDChrXY@offset,c
  5153  005EB6  6A12               	clrf	LCDChrXY@offset+1,c
  5154                           
  5155                           ;lcd3310_SPI.c: 332: LcdMemory[index] = offset;
  5156  005EB8  0E00               	movlw	low _LcdMemory
  5157  005EBA  2418               	addwf	LCDChrXY@index,w,c
  5158  005EBC  6ED9               	movwf	fsr2l,c
  5159  005EBE  0E02               	movlw	high _LcdMemory
  5160  005EC0  2019               	addwfc	LCDChrXY@index+1,w,c
  5161  005EC2  6EDA               	movwf	fsr2h,c
  5162  005EC4  C011  FFDF         	movff	LCDChrXY@offset,indf2
  5163                           
  5164                           ;lcd3310_SPI.c: 333: index++;
  5165  005EC8  4A18               	infsnz	LCDChrXY@index,f,c
  5166  005ECA  2A19               	incf	LCDChrXY@index+1,f,c
  5167  005ECC  4A16               	infsnz	LCDChrXY@i,f,c
  5168  005ECE  2A17               	incf	LCDChrXY@i+1,f,c
  5169  005ED0  D784               	goto	L13
  5170  005ED2                     __end_of_LCDChrXY:
  5171                           	opt stack 0
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           postinc0	equ	0xFEE
  5179                           wreg	equ	0xFE8
  5180                           indf1	equ	0xFE7
  5181                           postinc1	equ	0xFE6
  5182                           postdec1	equ	0xFE5
  5183                           fsr1h	equ	0xFE2
  5184                           fsr1l	equ	0xFE1
  5185                           indf2	equ	0xFDF
  5186                           postinc2	equ	0xFDE
  5187                           postdec2	equ	0xFDD
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function ___lwmod *****************
  5193 ;; Defined at:
  5194 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  dividend        2    7[COMRAM] unsigned int 
  5197 ;;  divisor         2    9[COMRAM] unsigned int 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  counter         1   11[COMRAM] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  2    7[COMRAM] unsigned int 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5209 ;;      Params:         4       0       0       0       0       0       0
  5210 ;;      Locals:         1       0       0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0
  5212 ;;      Totals:         5       0       0       0       0       0       0
  5213 ;;Total ram usage:        5 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_LCDChrXY
  5219 ;;		_sprintf
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text6
  5224  0058CE                     __ptext6:
  5225                           	opt stack 0
  5226  0058CE                     ___lwmod:
  5227                           	opt stack 28
  5228                           
  5229                           ;incstack = 0
  5230  0058CE  500B               	movf	___lwmod@divisor+1,w,c
  5231  0058D0  100A               	iorwf	___lwmod@divisor,w,c
  5232  0058D2  B4D8               	btfsc	status,2,c
  5233  0058D4  D018               	goto	l990
  5234  0058D6  0E01               	movlw	1
  5235  0058D8  6E0C               	movwf	___lwmod@counter,c
  5236  0058DA  D004               	goto	l1975
  5237  0058DC                     l1973:
  5238  0058DC  90D8               	bcf	status,0,c
  5239  0058DE  360A               	rlcf	___lwmod@divisor,f,c
  5240  0058E0  360B               	rlcf	___lwmod@divisor+1,f,c
  5241  0058E2  2A0C               	incf	___lwmod@counter,f,c
  5242  0058E4                     l1975:
  5243  0058E4  AE0B               	btfss	___lwmod@divisor+1,7,c
  5244  0058E6  D7FA               	goto	l1973
  5245  0058E8                     l1977:
  5246  0058E8  500A               	movf	___lwmod@divisor,w,c
  5247  0058EA  5C08               	subwf	___lwmod@dividend,w,c
  5248  0058EC  500B               	movf	___lwmod@divisor+1,w,c
  5249  0058EE  5809               	subwfb	___lwmod@dividend+1,w,c
  5250  0058F0  A0D8               	btfss	status,0,c
  5251  0058F2  D004               	goto	l1981
  5252  0058F4  500A               	movf	___lwmod@divisor,w,c
  5253  0058F6  5E08               	subwf	___lwmod@dividend,f,c
  5254  0058F8  500B               	movf	___lwmod@divisor+1,w,c
  5255  0058FA  5A09               	subwfb	___lwmod@dividend+1,f,c
  5256  0058FC                     l1981:
  5257  0058FC  90D8               	bcf	status,0,c
  5258  0058FE  320B               	rrcf	___lwmod@divisor+1,f,c
  5259  005900  320A               	rrcf	___lwmod@divisor,f,c
  5260  005902  2E0C               	decfsz	___lwmod@counter,f,c
  5261  005904  D7F1               	goto	l1977
  5262  005906                     l990:
  5263  005906  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5264  00590A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5265  00590E  0012               	return	
  5266  005910                     __end_of___lwmod:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postinc1	equ	0xFE6
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _setup *****************
  5289 ;; Defined at:
  5290 ;;		line 254 in file "main pic18.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;		None
  5295 ;; Return value:  Size  Location     Type
  5296 ;;		None               void
  5297 ;; Registers used:
  5298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5304 ;;      Params:         0       0       0       0       0       0       0
  5305 ;;      Locals:         0       0       0       0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0
  5307 ;;      Totals:         0       0       0       0       0       0       0
  5308 ;;Total ram usage:        0 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    4
  5311 ;; This function calls:
  5312 ;;		_LCDInit
  5313 ;;		_Open1USART
  5314 ;;		_OpenADC
  5315 ;;		_OpenSPI1
  5316 ;; This function is called by:
  5317 ;;		_main
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text7
  5322  005B88                     __ptext7:
  5323                           	opt stack 0
  5324  005B88                     _setup:
  5325                           	opt stack 26
  5326                           
  5327                           ;main pic18.c: 255: TRISAbits.RA3 = 1;
  5328                           
  5329                           ;incstack = 0
  5330  005B88  8692               	bsf	3986,3,c	;volatile
  5331                           
  5332                           ;main pic18.c: 256: ANSELAbits.ANSA3 = 1;
  5333  005B8A  010F               	movlb	15	; () banked
  5334  005B8C  8738               	bsf	56,3,b	;volatile
  5335                           
  5336                           ;main pic18.c: 257: TRISAbits.RA7 = 1;
  5337  005B8E  8E92               	bsf	3986,7,c	;volatile
  5338                           
  5339                           ; BSR set to: 15
  5340                           ;main pic18.c: 258: TRISC = 0x00;
  5341  005B90  0E00               	movlw	0
  5342  005B92  6E94               	movwf	3988,c	;volatile
  5343                           
  5344                           ;main pic18.c: 259: LATC = 0x00;
  5345  005B94  0E00               	movlw	0
  5346  005B96  6E8B               	movwf	3979,c	;volatile
  5347                           
  5348                           ;main pic18.c: 260: ANSELC = 0x00;
  5349  005B98  0E00               	movlw	0
  5350  005B9A  010F               	movlb	15	; () banked
  5351  005B9C  6F3A               	movwf	58,b	;volatile
  5352                           
  5353                           ; BSR set to: 15
  5354                           ;main pic18.c: 261: TRISCbits.TRISC6 = 1;
  5355  005B9E  8C94               	bsf	3988,6,c	;volatile
  5356                           
  5357                           ; BSR set to: 15
  5358                           ;main pic18.c: 262: TRISCbits.TRISC7 = 1;
  5359  005BA0  8E94               	bsf	3988,7,c	;volatile
  5360                           
  5361                           ; BSR set to: 15
  5362                           ;main pic18.c: 263: TRISBbits.TRISB1 = 0;
  5363  005BA2  9293               	bcf	3987,1,c	;volatile
  5364                           
  5365                           ; BSR set to: 15
  5366                           ;main pic18.c: 264: LATBbits.LATB1 = 0;
  5367  005BA4  928A               	bcf	3978,1,c	;volatile
  5368                           
  5369                           ; BSR set to: 15
  5370                           ;main pic18.c: 267: OSCCONbits.IRCF = 0b111;
  5371  005BA6  88D3               	bsf	4051,4,c	;volatile
  5372  005BA8  8AD3               	bsf	4051,5,c	;volatile
  5373  005BAA  8CD3               	bsf	4051,6,c	;volatile
  5374                           
  5375                           ;main pic18.c: 268: OSCCONbits.SCS = 0b10;
  5376  005BAC  50D3               	movf	4051,w,c	;volatile
  5377  005BAE  0BFC               	andlw	-4
  5378  005BB0  0902               	iorlw	2
  5379  005BB2  6ED3               	movwf	4051,c	;volatile
  5380                           
  5381                           ; BSR set to: 15
  5382                           ;main pic18.c: 269: OSCTUNEbits.TUN = 0b000000;
  5383  005BB4  909B               	bcf	3995,0,c	;volatile
  5384  005BB6  929B               	bcf	3995,1,c	;volatile
  5385  005BB8  949B               	bcf	3995,2,c	;volatile
  5386  005BBA  969B               	bcf	3995,3,c	;volatile
  5387  005BBC  989B               	bcf	3995,4,c	;volatile
  5388  005BBE  9A9B               	bcf	3995,5,c	;volatile
  5389                           
  5390                           ; BSR set to: 15
  5391                           ;main pic18.c: 270: OSCTUNEbits.PLLEN = 1;
  5392  005BC0  8C9B               	bsf	3995,6,c	;volatile
  5393                           
  5394                           ; BSR set to: 15
  5395                           ;main pic18.c: 271: OSCCON2bits.MFIOSEL = 0;
  5396  005BC2  98D2               	bcf	4050,4,c	;volatile
  5397                           
  5398                           ; BSR set to: 15
  5399                           ;main pic18.c: 272: OSCTUNEbits.INTSRC = 1;
  5400  005BC4  8E9B               	bsf	3995,7,c	;volatile
  5401                           
  5402                           ; BSR set to: 15
  5403                           ;main pic18.c: 275: OpenSPI1(0b00000000,
  5404                           ;main pic18.c: 276: 0b00000001,
  5405                           ;main pic18.c: 277: 0b00000000);
  5406  005BC6  0E01               	movlw	1
  5407  005BC8  6E01               	movwf	OpenSPI1@bus_mode,c
  5408  005BCA  0E00               	movlw	0
  5409  005BCC  6E02               	movwf	OpenSPI1@smp_phase,c
  5410  005BCE  0E00               	movlw	0
  5411  005BD0  EC28  F02D         	call	_OpenSPI1
  5412                           
  5413                           ;main pic18.c: 286: LCDInit();
  5414  005BD4  EC5E  F02E         	call	_LCDInit	;wreg free
  5415                           
  5416                           ;main pic18.c: 289: baud_rate = (4000000 / 9600 / 16 - 1);
  5417  005BD8  0E19               	movlw	25
  5418  005BDA  0100               	movlb	0	; () banked
  5419  005BDC  6FA3               	movwf	_baud_rate& (0+255),b
  5420  005BDE  0E00               	movlw	0
  5421  005BE0  0100               	movlb	0	; () banked
  5422  005BE2  6FA4               	movwf	(_baud_rate+1)& (0+255),b
  5423  005BE4  0E00               	movlw	0
  5424  005BE6  0100               	movlb	0	; () banked
  5425  005BE8  6FA5               	movwf	(_baud_rate+2)& (0+255),b
  5426  005BEA  0E00               	movlw	0
  5427  005BEC  0100               	movlb	0	; () banked
  5428  005BEE  6FA6               	movwf	(_baud_rate+3)& (0+255),b
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;main pic18.c: 290: OpenADC(0b11111111 &
  5432                           ;main pic18.c: 291: 0b11111111 &
  5433                           ;main pic18.c: 292: 0b11110001,
  5434                           ;main pic18.c: 293: 0b10000011 &
  5435                           ;main pic18.c: 294: 0b01111111 &
  5436                           ;main pic18.c: 295: 0b11110111 &
  5437                           ;main pic18.c: 296: 0b11111100,
  5438                           ;main pic18.c: 297: 0b1110);
  5439  005BF0  0E00               	movlw	0
  5440  005BF2  6E01               	movwf	OpenADC@config2,c
  5441  005BF4  0E0E               	movlw	14
  5442  005BF6  6E02               	movwf	OpenADC@config3,c
  5443  005BF8  0EF1               	movlw	241
  5444  005BFA  ECAD  F02C         	call	_OpenADC
  5445                           
  5446                           ;main pic18.c: 299: RCSTA1&=0b01001111,TXSTA1bits.TXEN=0,PIE1&=0b11001111;
  5447  005BFE  0E4F               	movlw	79
  5448  005C00  16AB               	andwf	4011,f,c	;volatile
  5449  005C02  9AAC               	bcf	4012,5,c	;volatile
  5450  005C04  0ECF               	movlw	207
  5451  005C06  169D               	andwf	3997,f,c	;volatile
  5452                           
  5453                           ;main pic18.c: 300: Open1USART( 0b01111111 &
  5454                           ;main pic18.c: 301: 0b10111111 &
  5455                           ;main pic18.c: 302: 0b11111110 &
  5456                           ;main pic18.c: 303: 0b11111101 &
  5457                           ;main pic18.c: 304: 0b11111111 &
  5458                           ;main pic18.c: 305: 0b11101111,
  5459                           ;main pic18.c: 306: baud_rate );
  5460  005C08  C0A3  F001         	movff	_baud_rate,Open1USART@spbrg
  5461  005C0C  C0A4  F002         	movff	_baud_rate+1,Open1USART@spbrg+1
  5462  005C10  0E2C               	movlw	44
  5463  005C12  EC53  F02D         	call	_Open1USART
  5464  005C16  0012               	return	
  5465  005C18                     __end_of_setup:
  5466                           	opt stack 0
  5467                           tblptru	equ	0xFF8
  5468                           tblptrh	equ	0xFF7
  5469                           tblptrl	equ	0xFF6
  5470                           tablat	equ	0xFF5
  5471                           prodh	equ	0xFF4
  5472                           prodl	equ	0xFF3
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           indf1	equ	0xFE7
  5476                           postinc1	equ	0xFE6
  5477                           postdec1	equ	0xFE5
  5478                           fsr1h	equ	0xFE2
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _OpenSPI1 *****************
  5488 ;; Defined at:
  5489 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi1open.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  sync_mode       1    wreg     unsigned char 
  5492 ;;  bus_mode        1    0[COMRAM] unsigned char 
  5493 ;;  smp_phase       1    1[COMRAM] unsigned char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  sync_mode       1    2[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5505 ;;      Params:         2       0       0       0       0       0       0
  5506 ;;      Locals:         1       0       0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0
  5508 ;;      Totals:         3       0       0       0       0       0       0
  5509 ;;Total ram usage:        3 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; This function calls:
  5512 ;;		Nothing
  5513 ;; This function is called by:
  5514 ;;		_setup
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text8
  5519  005A50                     __ptext8:
  5520                           	opt stack 0
  5521  005A50                     _OpenSPI1:
  5522                           	opt stack 29
  5523                           
  5524                           ;incstack = 0
  5525                           ;OpenSPI1@sync_mode stored from wreg
  5526  005A50  6E03               	movwf	OpenSPI1@sync_mode,c
  5527  005A52  0E3F               	movlw	63
  5528  005A54  16C7               	andwf	4039,f,c	;volatile
  5529  005A56  0E00               	movlw	0
  5530  005A58  6EC6               	movwf	4038,c	;volatile
  5531  005A5A  5003               	movf	OpenSPI1@sync_mode,w,c
  5532  005A5C  12C6               	iorwf	4038,f,c	;volatile
  5533  005A5E  5002               	movf	OpenSPI1@smp_phase,w,c
  5534  005A60  12C7               	iorwf	4039,f,c	;volatile
  5535  005A62  D005               	goto	l2105
  5536  005A64                     l381:
  5537  005A64  8CC7               	bsf	4039,6,c	;volatile
  5538  005A66  D013               	goto	l2109
  5539  005A68                     l383:
  5540  005A68  8CC7               	bsf	4039,6,c	;volatile
  5541  005A6A                     l384:
  5542  005A6A  88C6               	bsf	4038,4,c	;volatile
  5543  005A6C  D010               	goto	l2109
  5544  005A6E                     l2105:
  5545  005A6E  5001               	movf	OpenSPI1@bus_mode,w,c
  5546                           
  5547                           ; Switch size 1, requested type "space"
  5548                           ; Number of cases is 3, Range of values is 0 to 3
  5549                           ; switch strategies available:
  5550                           ; Name         Instructions Cycles
  5551                           ; simple_byte           10     6 (average)
  5552                           ;	Chosen strategy is simple_byte
  5553  005A70  0A00               	xorlw	0	; case 0
  5554  005A72  B4D8               	btfsc	status,2,c
  5555  005A74  D7F7               	goto	l381
  5556  005A76  0A02               	xorlw	2	; case 2
  5557  005A78  B4D8               	btfsc	status,2,c
  5558  005A7A  D7F6               	goto	l383
  5559  005A7C  0A01               	xorlw	1	; case 3
  5560  005A7E  B4D8               	btfsc	status,2,c
  5561  005A80  D7F4               	goto	l384
  5562  005A82  D005               	goto	l2109
  5563  005A84                     l387:
  5564  005A84  8A92               	bsf	3986,5,c	;volatile
  5565  005A86                     l389:
  5566  005A86  8694               	bsf	3988,3,c	;volatile
  5567  005A88  D00A               	goto	l388
  5568  005A8A                     l390:
  5569  005A8A  9694               	bcf	3988,3,c	;volatile
  5570  005A8C  D008               	goto	l388
  5571  005A8E                     l2109:
  5572  005A8E  5003               	movf	OpenSPI1@sync_mode,w,c
  5573                           
  5574                           ; Switch size 1, requested type "space"
  5575                           ; Number of cases is 2, Range of values is 4 to 5
  5576                           ; switch strategies available:
  5577                           ; Name         Instructions Cycles
  5578                           ; simple_byte            7     4 (average)
  5579                           ;	Chosen strategy is simple_byte
  5580  005A90  0A04               	xorlw	4	; case 4
  5581  005A92  B4D8               	btfsc	status,2,c
  5582  005A94  D7F7               	goto	l387
  5583  005A96  0A01               	xorlw	1	; case 5
  5584  005A98  B4D8               	btfsc	status,2,c
  5585  005A9A  D7F5               	goto	l389
  5586  005A9C  D7F6               	goto	l390
  5587  005A9E                     l388:
  5588  005A9E  8894               	bsf	3988,4,c	;volatile
  5589  005AA0  9A94               	bcf	3988,5,c	;volatile
  5590  005AA2  8AC6               	bsf	4038,5,c	;volatile
  5591  005AA4  0012               	return	
  5592  005AA6                     __end_of_OpenSPI1:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           postinc0	equ	0xFEE
  5601                           wreg	equ	0xFE8
  5602                           indf1	equ	0xFE7
  5603                           postinc1	equ	0xFE6
  5604                           postdec1	equ	0xFE5
  5605                           fsr1h	equ	0xFE2
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _OpenADC *****************
  5615 ;; Defined at:
  5616 ;;		line 305 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcopen.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  config          1    wreg     unsigned char 
  5619 ;;  config2         1    0[COMRAM] unsigned char 
  5620 ;;  config3         1    1[COMRAM] unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  config          1    4[COMRAM] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;		None               void
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5632 ;;      Params:         2       0       0       0       0       0       0
  5633 ;;      Locals:         1       0       0       0       0       0       0
  5634 ;;      Temps:          2       0       0       0       0       0       0
  5635 ;;      Totals:         5       0       0       0       0       0       0
  5636 ;;Total ram usage:        5 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_setup
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text9
  5646  00595A                     __ptext9:
  5647                           	opt stack 0
  5648  00595A                     _OpenADC:
  5649                           	opt stack 29
  5650                           
  5651                           ;incstack = 0
  5652                           ;OpenADC@config stored from wreg
  5653  00595A  6E05               	movwf	OpenADC@config,c
  5654  00595C  0E00               	movlw	0
  5655  00595E  6EC2               	movwf	4034,c	;volatile
  5656  005960  0E00               	movlw	0
  5657  005962  6EC1               	movwf	4033,c	;volatile
  5658  005964  0E00               	movlw	0
  5659  005966  6EC0               	movwf	4032,c	;volatile
  5660  005968  5001               	movf	OpenADC@config2,w,c
  5661  00596A  0B7C               	andlw	124
  5662  00596C  6EC2               	movwf	4034,c	;volatile
  5663  00596E  C002  FFC1         	movff	OpenADC@config3,4033	;volatile
  5664  005972  C005  F003         	movff	OpenADC@config,??_OpenADC
  5665  005976  90D8               	bcf	status,0,c
  5666  005978  3603               	rlcf	??_OpenADC,f,c
  5667  00597A  90D8               	bcf	status,0,c
  5668  00597C  3603               	rlcf	??_OpenADC,f,c
  5669  00597E  0E38               	movlw	56
  5670  005980  1603               	andwf	??_OpenADC,f,c
  5671  005982  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  5672  005986  3A04               	swapf	??_OpenADC+1,f,c
  5673  005988  0E0F               	movlw	15
  5674  00598A  1604               	andwf	??_OpenADC+1,f,c
  5675  00598C  0E07               	movlw	7
  5676  00598E  1604               	andwf	??_OpenADC+1,f,c
  5677  005990  5005               	movf	OpenADC@config,w,c
  5678  005992  0B80               	andlw	128
  5679  005994  1004               	iorwf	??_OpenADC+1,w,c
  5680  005996  1003               	iorwf	??_OpenADC,w,c
  5681  005998  6EC0               	movwf	4032,c	;volatile
  5682  00599A  AE01               	btfss	OpenADC@config2,7,c
  5683  00599C  D003               	goto	l364
  5684  00599E  9C9E               	bcf	3998,6,c	;volatile
  5685  0059A0  8C9D               	bsf	3997,6,c	;volatile
  5686  0059A2  8CF2               	bsf	intcon,6,c	;volatile
  5687  0059A4                     l364:
  5688  0059A4  80C2               	bsf	4034,0,c	;volatile
  5689  0059A6  0012               	return	
  5690  0059A8                     __end_of_OpenADC:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           postinc1	equ	0xFE6
  5703                           postdec1	equ	0xFE5
  5704                           fsr1h	equ	0xFE2
  5705                           fsr1l	equ	0xFE1
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _Open1USART *****************
  5714 ;; Defined at:
  5715 ;;		line 124 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1open.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  config          1    wreg     unsigned char 
  5718 ;;  spbrg           2    0[COMRAM] unsigned int 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;  config          1    5[COMRAM] unsigned char 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;		None               void
  5723 ;; Registers used:
  5724 ;;		wreg, status,2
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5730 ;;      Params:         2       0       0       0       0       0       0
  5731 ;;      Locals:         1       0       0       0       0       0       0
  5732 ;;      Temps:          3       0       0       0       0       0       0
  5733 ;;      Totals:         6       0       0       0       0       0       0
  5734 ;;Total ram usage:        6 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_setup
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text10
  5744  005AA6                     __ptext10:
  5745                           	opt stack 0
  5746  005AA6                     _Open1USART:
  5747                           	opt stack 29
  5748                           
  5749                           ;incstack = 0
  5750                           ;Open1USART@config stored from wreg
  5751  005AA6  6E06               	movwf	Open1USART@config,c
  5752  005AA8  0E00               	movlw	0
  5753  005AAA  6EAC               	movwf	4012,c	;volatile
  5754  005AAC  0E00               	movlw	0
  5755  005AAE  6EAB               	movwf	4011,c	;volatile
  5756  005AB0  B006               	btfsc	Open1USART@config,0,c
  5757  005AB2  88AC               	bsf	4012,4,c	;volatile
  5758  005AB4  A206               	btfss	Open1USART@config,1,c
  5759  005AB6  D002               	goto	l2177
  5760  005AB8  8CAC               	bsf	4012,6,c	;volatile
  5761  005ABA  8CAB               	bsf	4011,6,c	;volatile
  5762  005ABC                     l2177:
  5763  005ABC  B406               	btfsc	Open1USART@config,2,c
  5764  005ABE  8EAC               	bsf	4012,7,c	;volatile
  5765  005AC0  A606               	btfss	Open1USART@config,3,c
  5766  005AC2  D002               	goto	l427
  5767  005AC4  88AB               	bsf	4011,4,c	;volatile
  5768  005AC6  D001               	goto	l2185
  5769  005AC8                     l427:
  5770  005AC8  8AAB               	bsf	4011,5,c	;volatile
  5771  005ACA                     l2185:
  5772  005ACA  B806               	btfsc	Open1USART@config,4,c
  5773  005ACC  84AC               	bsf	4012,2,c	;volatile
  5774  005ACE  BA06               	btfsc	Open1USART@config,5,c
  5775  005AD0  86AB               	bsf	4011,3,c	;volatile
  5776  005AD2  AC06               	btfss	Open1USART@config,6,c
  5777  005AD4  D002               	goto	l431
  5778  005AD6  8A9D               	bsf	3997,5,c	;volatile
  5779  005AD8  D001               	goto	l2197
  5780  005ADA                     l431:
  5781  005ADA  9A9D               	bcf	3997,5,c	;volatile
  5782  005ADC                     l2197:
  5783  005ADC  AE06               	btfss	Open1USART@config,7,c
  5784  005ADE  D002               	goto	l433
  5785  005AE0  889D               	bsf	3997,4,c	;volatile
  5786  005AE2  D001               	goto	l434
  5787  005AE4                     l433:
  5788  005AE4  989D               	bcf	3997,4,c	;volatile
  5789  005AE6                     l434:
  5790  005AE6  C001  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  5791  005AEA  C002  F003         	movff	Open1USART@spbrg+1,??_Open1USART
  5792  005AEE  C003  F004         	movff	??_Open1USART,??_Open1USART+1
  5793  005AF2  6A05               	clrf	(??_Open1USART+2)& (0+255),c
  5794  005AF4  5004               	movf	??_Open1USART+1,w,c
  5795  005AF6  6EB0               	movwf	4016,c	;volatile
  5796  005AF8  8AAC               	bsf	4012,5,c	;volatile
  5797  005AFA  8EAB               	bsf	4011,7,c	;volatile
  5798  005AFC  0012               	return	
  5799  005AFE                     __end_of_Open1USART:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           indf1	equ	0xFE7
  5811                           postinc1	equ	0xFE6
  5812                           postdec1	equ	0xFE5
  5813                           fsr1h	equ	0xFE2
  5814                           fsr1l	equ	0xFE1
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _LCDInit *****************
  5823 ;; Defined at:
  5824 ;;		line 178 in file "lcd3310_SPI.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;		None
  5829 ;; Return value:  Size  Location     Type
  5830 ;;		None               void
  5831 ;; Registers used:
  5832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5838 ;;      Params:         0       0       0       0       0       0       0
  5839 ;;      Locals:         0       0       0       0       0       0       0
  5840 ;;      Temps:          0       0       0       0       0       0       0
  5841 ;;      Totals:         0       0       0       0       0       0       0
  5842 ;;Total ram usage:        0 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    3
  5845 ;; This function calls:
  5846 ;;		_Delay
  5847 ;;		_Initialize_SPI
  5848 ;;		_LCDClear
  5849 ;;		_LCDSend
  5850 ;;		_LCDUpdate
  5851 ;; This function is called by:
  5852 ;;		_setup
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text11
  5857  005CBC                     __ptext11:
  5858                           	opt stack 0
  5859  005CBC                     _LCDInit:
  5860                           	opt stack 26
  5861                           
  5862                           ;lcd3310_SPI.c: 181: Initialize_SPI();
  5863                           
  5864                           ;incstack = 0
  5865  005CBC  EC97  F02B         	call	_Initialize_SPI	;wreg free
  5866                           
  5867                           ;lcd3310_SPI.c: 184: TRISCbits.RC1 = 0;
  5868  005CC0  9294               	bcf	3988,1,c	;volatile
  5869                           
  5870                           ;lcd3310_SPI.c: 185: LATCbits.LATC1 = 1;
  5871  005CC2  828B               	bsf	3979,1,c	;volatile
  5872                           
  5873                           ;lcd3310_SPI.c: 186: TRISCbits.RC2 = 0;
  5874  005CC4  9494               	bcf	3988,2,c	;volatile
  5875                           
  5876                           ;lcd3310_SPI.c: 187: TRISCbits.RC0 = 0;
  5877  005CC6  9094               	bcf	3988,0,c	;volatile
  5878                           
  5879                           ;lcd3310_SPI.c: 190: LATCbits.LATC0 = 0;
  5880  005CC8  908B               	bcf	3979,0,c	;volatile
  5881                           
  5882                           ;lcd3310_SPI.c: 191: Delay(1000);
  5883  005CCA  0EE8               	movlw	232
  5884  005CCC  6E01               	movwf	Delay@a,c
  5885  005CCE  0E03               	movlw	3
  5886  005CD0  6E02               	movwf	Delay@a+1,c
  5887  005CD2  0E00               	movlw	0
  5888  005CD4  6E03               	movwf	Delay@a+2,c
  5889  005CD6  0E00               	movlw	0
  5890  005CD8  6E04               	movwf	Delay@a+3,c
  5891  005CDA  ECB8  F02B         	call	_Delay	;wreg free
  5892                           
  5893                           ;lcd3310_SPI.c: 192: LATCbits.LATC0 = 1;
  5894  005CDE  808B               	bsf	3979,0,c	;volatile
  5895                           
  5896                           ;lcd3310_SPI.c: 193: Delay(1000);
  5897  005CE0  0EE8               	movlw	232
  5898  005CE2  6E01               	movwf	Delay@a,c
  5899  005CE4  0E03               	movlw	3
  5900  005CE6  6E02               	movwf	Delay@a+1,c
  5901  005CE8  0E00               	movlw	0
  5902  005CEA  6E03               	movwf	Delay@a+2,c
  5903  005CEC  0E00               	movlw	0
  5904  005CEE  6E04               	movwf	Delay@a+3,c
  5905  005CF0  ECB8  F02B         	call	_Delay	;wreg free
  5906                           
  5907                           ;lcd3310_SPI.c: 196: LCDSend( 0x21, 0 );
  5908  005CF4  0E00               	movlw	0
  5909  005CF6  6E07               	movwf	LCDSend@cd,c
  5910  005CF8  0E21               	movlw	33
  5911  005CFA  ECD4  F02B         	call	_LCDSend
  5912                           
  5913                           ;lcd3310_SPI.c: 197: LCDSend( 0xc0, 0 );
  5914  005CFE  0E00               	movlw	0
  5915  005D00  6E07               	movwf	LCDSend@cd,c
  5916  005D02  0EC0               	movlw	192
  5917  005D04  ECD4  F02B         	call	_LCDSend
  5918                           
  5919                           ;lcd3310_SPI.c: 202: LCDSend( 0x06, 0);
  5920  005D08  0E00               	movlw	0
  5921  005D0A  6E07               	movwf	LCDSend@cd,c
  5922  005D0C  0E06               	movlw	6
  5923  005D0E  ECD4  F02B         	call	_LCDSend
  5924                           
  5925                           ;lcd3310_SPI.c: 204: LCDSend( 0x12, 0 );
  5926  005D12  0E00               	movlw	0
  5927  005D14  6E07               	movwf	LCDSend@cd,c
  5928  005D16  0E12               	movlw	18
  5929  005D18  ECD4  F02B         	call	_LCDSend
  5930                           
  5931                           ;lcd3310_SPI.c: 205: LCDSend( 0x20, 0 );
  5932  005D1C  0E00               	movlw	0
  5933  005D1E  6E07               	movwf	LCDSend@cd,c
  5934  005D20  0E20               	movlw	32
  5935  005D22  ECD4  F02B         	call	_LCDSend
  5936                           
  5937                           ;lcd3310_SPI.c: 207: LCDSend(0x09, 0);
  5938  005D26  0E00               	movlw	0
  5939  005D28  6E07               	movwf	LCDSend@cd,c
  5940  005D2A  0E09               	movlw	9
  5941  005D2C  ECD4  F02B         	call	_LCDSend
  5942                           
  5943                           ;lcd3310_SPI.c: 208: Delay(750);
  5944  005D30  0EEE               	movlw	238
  5945  005D32  6E01               	movwf	Delay@a,c
  5946  005D34  0E02               	movlw	2
  5947  005D36  6E02               	movwf	Delay@a+1,c
  5948  005D38  0E00               	movlw	0
  5949  005D3A  6E03               	movwf	Delay@a+2,c
  5950  005D3C  0E00               	movlw	0
  5951  005D3E  6E04               	movwf	Delay@a+3,c
  5952  005D40  ECB8  F02B         	call	_Delay	;wreg free
  5953                           
  5954                           ;lcd3310_SPI.c: 210: LCDSend( 0x08, 0 );
  5955  005D44  0E00               	movlw	0
  5956  005D46  6E07               	movwf	LCDSend@cd,c
  5957  005D48  0E08               	movlw	8
  5958  005D4A  ECD4  F02B         	call	_LCDSend
  5959                           
  5960                           ;lcd3310_SPI.c: 211: Delay(50);
  5961  005D4E  0E32               	movlw	50
  5962  005D50  6E01               	movwf	Delay@a,c
  5963  005D52  0E00               	movlw	0
  5964  005D54  6E02               	movwf	Delay@a+1,c
  5965  005D56  0E00               	movlw	0
  5966  005D58  6E03               	movwf	Delay@a+2,c
  5967  005D5A  0E00               	movlw	0
  5968  005D5C  6E04               	movwf	Delay@a+3,c
  5969  005D5E  ECB8  F02B         	call	_Delay	;wreg free
  5970                           
  5971                           ;lcd3310_SPI.c: 212: LCDSend( 0x0C, 0 );
  5972  005D62  0E00               	movlw	0
  5973  005D64  6E07               	movwf	LCDSend@cd,c
  5974  005D66  0E0C               	movlw	12
  5975  005D68  ECD4  F02B         	call	_LCDSend
  5976                           
  5977                           ;lcd3310_SPI.c: 215: LCDClear();
  5978  005D6C  ECFA  F02B         	call	_LCDClear	;wreg free
  5979                           
  5980                           ;lcd3310_SPI.c: 216: LCDUpdate();
  5981  005D70  EC7F  F02D         	call	_LCDUpdate	;wreg free
  5982  005D74  0012               	return	
  5983  005D76                     __end_of_LCDInit:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           indf1	equ	0xFE7
  5995                           postinc1	equ	0xFE6
  5996                           postdec1	equ	0xFE5
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _LCDUpdate *****************
  6007 ;; Defined at:
  6008 ;;		line 242 in file "lcd3310_SPI.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  y               2   10[COMRAM] int 
  6013 ;;  x               2    8[COMRAM] int 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6023 ;;      Params:         0       0       0       0       0       0       0
  6024 ;;      Locals:         4       0       0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0
  6026 ;;      Totals:         4       0       0       0       0       0       0
  6027 ;;Total ram usage:        4 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		_LCDSend
  6032 ;;		___wmul
  6033 ;; This function is called by:
  6034 ;;		_LCDInit
  6035 ;;		_LCDStr
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text12
  6040  005AFE                     __ptext12:
  6041                           	opt stack 0
  6042  005AFE                     _LCDUpdate:
  6043                           	opt stack 26
  6044                           
  6045                           ;lcd3310_SPI.c: 244: int x,y;
  6046                           ;lcd3310_SPI.c: 246: for(y=0; y<(48 / 8); y++) {
  6047                           
  6048                           ;incstack = 0
  6049  005AFE  0E00               	movlw	0
  6050  005B00  6E0C               	movwf	LCDUpdate@y+1,c
  6051  005B02  0E00               	movlw	0
  6052  005B04  6E0B               	movwf	LCDUpdate@y,c
  6053  005B06  500C               	movf	LCDUpdate@y+1,w,c
  6054  005B08  0A80               	xorlw	128
  6055  005B0A  0F80               	addlw	-128
  6056  005B0C  0E06               	movlw	6
  6057  005B0E  B4D8               	btfsc	status,2,c
  6058  005B10  5C0B               	subwf	LCDUpdate@y,w,c
  6059  005B12  B0D8               	btfsc	status,0,c
  6060  005B14  0012               	return	
  6061                           
  6062                           ;lcd3310_SPI.c: 247: LCDSend(0x80, 0 );
  6063  005B16  0E00               	movlw	0
  6064  005B18  6E07               	movwf	LCDSend@cd,c
  6065  005B1A  0E80               	movlw	128
  6066  005B1C  ECD4  F02B         	call	_LCDSend
  6067                           
  6068                           ;lcd3310_SPI.c: 248: LCDSend(0x40 | y, 0 );
  6069  005B20  0E00               	movlw	0
  6070  005B22  6E07               	movwf	LCDSend@cd,c
  6071  005B24  500B               	movf	LCDUpdate@y,w,c
  6072  005B26  0940               	iorlw	64
  6073  005B28  ECD4  F02B         	call	_LCDSend
  6074                           
  6075                           ;lcd3310_SPI.c: 250: for(x=103; x > 0; x--) {
  6076  005B2C  0E00               	movlw	0
  6077  005B2E  6E0A               	movwf	LCDUpdate@x+1,c
  6078  005B30  0E67               	movlw	103
  6079  005B32  6E09               	movwf	LCDUpdate@x,c
  6080  005B34  500A               	movf	LCDUpdate@x+1,w,c
  6081  005B36  0A80               	xorlw	128
  6082  005B38  6EF3               	movwf	prodl,c
  6083  005B3A  0E80               	movlw	128
  6084  005B3C  5CF3               	subwf	prodl,w,c
  6085  005B3E  0E01               	movlw	1
  6086  005B40  B4D8               	btfsc	status,2,c
  6087  005B42  5C09               	subwf	LCDUpdate@x,w,c
  6088  005B44  A0D8               	btfss	status,0,c
  6089  005B46  D01D               	goto	l2029
  6090                           
  6091                           ;lcd3310_SPI.c: 251: LCDSend( LcdMemory[y * 103 + x ], 1 );
  6092  005B48  0E01               	movlw	1
  6093  005B4A  6E07               	movwf	LCDSend@cd,c
  6094  005B4C  C00B  F001         	movff	LCDUpdate@y,___wmul@multiplier
  6095  005B50  C00C  F002         	movff	LCDUpdate@y+1,___wmul@multiplier+1
  6096  005B54  0E00               	movlw	0
  6097  005B56  6E04               	movwf	___wmul@multiplicand+1,c
  6098  005B58  0E67               	movlw	103
  6099  005B5A  6E03               	movwf	___wmul@multiplicand,c
  6100  005B5C  ECE7  F02B         	call	___wmul	;wreg free
  6101  005B60  5009               	movf	LCDUpdate@x,w,c
  6102  005B62  2601               	addwf	?___wmul,f,c
  6103  005B64  500A               	movf	LCDUpdate@x+1,w,c
  6104  005B66  2202               	addwfc	?___wmul+1,f,c
  6105  005B68  0E00               	movlw	low _LcdMemory
  6106  005B6A  2401               	addwf	?___wmul,w,c
  6107  005B6C  6ED9               	movwf	fsr2l,c
  6108  005B6E  0E02               	movlw	high _LcdMemory
  6109  005B70  2002               	addwfc	?___wmul+1,w,c
  6110  005B72  6EDA               	movwf	fsr2h,c
  6111  005B74  50DF               	movf	indf2,w,c
  6112  005B76  ECD4  F02B         	call	_LCDSend
  6113  005B7A  0609               	decf	LCDUpdate@x,f,c
  6114  005B7C  A0D8               	btfss	status,0,c
  6115  005B7E  060A               	decf	LCDUpdate@x+1,f,c
  6116  005B80  D7D9               	goto	L14
  6117  005B82                     l2029:
  6118  005B82  4A0B               	infsnz	LCDUpdate@y,f,c
  6119  005B84  2A0C               	incf	LCDUpdate@y+1,f,c
  6120  005B86  D7BF               	goto	L15
  6121  005B88                     __end_of_LCDUpdate:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           postinc0	equ	0xFEE
  6131                           wreg	equ	0xFE8
  6132                           indf1	equ	0xFE7
  6133                           postinc1	equ	0xFE6
  6134                           postdec1	equ	0xFE5
  6135                           fsr1h	equ	0xFE2
  6136                           fsr1l	equ	0xFE1
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function ___wmul *****************
  6145 ;; Defined at:
  6146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  multiplier      2    0[COMRAM] unsigned int 
  6149 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  product         2    4[COMRAM] unsigned int 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  2    0[COMRAM] unsigned int 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2, status,0, prodl, prodh
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6161 ;;      Params:         4       0       0       0       0       0       0
  6162 ;;      Locals:         2       0       0       0       0       0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0
  6164 ;;      Totals:         6       0       0       0       0       0       0
  6165 ;;Total ram usage:        6 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_main
  6171 ;;		_LCDUpdate
  6172 ;;		_LCDChrXY
  6173 ;;		_LCDChrXYInverse
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text13
  6178  0057CE                     __ptext13:
  6179                           	opt stack 0
  6180  0057CE                     ___wmul:
  6181                           	opt stack 27
  6182                           
  6183                           ;incstack = 0
  6184  0057CE  5001               	movf	___wmul@multiplier,w,c
  6185  0057D0  0203               	mulwf	___wmul@multiplicand,c
  6186  0057D2  CFF3 F005          	movff	prodl,___wmul@product
  6187  0057D6  CFF4 F006          	movff	prodh,___wmul@product+1
  6188  0057DA  5001               	movf	___wmul@multiplier,w,c
  6189  0057DC  0204               	mulwf	___wmul@multiplicand+1,c
  6190  0057DE  50F3               	movf	prodl,w,c
  6191  0057E0  2606               	addwf	___wmul@product+1,f,c
  6192  0057E2  5002               	movf	___wmul@multiplier+1,w,c
  6193  0057E4  0203               	mulwf	___wmul@multiplicand,c
  6194  0057E6  50F3               	movf	prodl,w,c
  6195  0057E8  2606               	addwf	___wmul@product+1,f,c
  6196  0057EA  C005  F001         	movff	___wmul@product,?___wmul
  6197  0057EE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6198  0057F2  0012               	return	
  6199  0057F4                     __end_of___wmul:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           postinc0	equ	0xFEE
  6209                           wreg	equ	0xFE8
  6210                           indf1	equ	0xFE7
  6211                           postinc1	equ	0xFE6
  6212                           postdec1	equ	0xFE5
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _LCDSend *****************
  6223 ;; Defined at:
  6224 ;;		line 262 in file "lcd3310_SPI.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  data            1    wreg     unsigned char 
  6227 ;;  cd              1    6[COMRAM] unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  data            1    7[COMRAM] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6239 ;;      Params:         1       0       0       0       0       0       0
  6240 ;;      Locals:         1       0       0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0
  6242 ;;      Totals:         2       0       0       0       0       0       0
  6243 ;;Total ram usage:        2 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    1
  6246 ;; This function calls:
  6247 ;;		_Delay10TCYx
  6248 ;;		_WriteSPI1
  6249 ;; This function is called by:
  6250 ;;		_LCDInit
  6251 ;;		_LCDUpdate
  6252 ;;		_LCDContrast
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text14
  6257  0057A8                     __ptext14:
  6258                           	opt stack 0
  6259  0057A8                     _LCDSend:
  6260                           	opt stack 26
  6261                           
  6262                           ;incstack = 0
  6263                           ;LCDSend@data stored from wreg
  6264  0057A8  6E08               	movwf	LCDSend@data,c
  6265                           
  6266                           ;lcd3310_SPI.c: 264: LATCbits.LATC1 = 0;
  6267  0057AA  928B               	bcf	3979,1,c	;volatile
  6268                           
  6269                           ;lcd3310_SPI.c: 266: if(cd == 1) {
  6270  0057AC  0407               	decf	LCDSend@cd,w,c
  6271  0057AE  A4D8               	btfss	status,2,c
  6272  0057B0  D002               	goto	l270
  6273                           
  6274                           ;lcd3310_SPI.c: 267: LATCbits.LATC2 = 1;
  6275  0057B2  848B               	bsf	3979,2,c	;volatile
  6276                           
  6277                           ;lcd3310_SPI.c: 268: }
  6278  0057B4  D001               	goto	l1957
  6279  0057B6                     l270:
  6280                           
  6281                           ;lcd3310_SPI.c: 269: else {
  6282                           ;lcd3310_SPI.c: 270: LATCbits.LATC2 = 0;
  6283  0057B6  948B               	bcf	3979,2,c	;volatile
  6284  0057B8                     l1957:
  6285  0057B8  5008               	movf	LCDSend@data,w,c
  6286  0057BA  ECC5  F02B         	call	_WriteSPI1
  6287  0057BE  0900               	iorlw	0
  6288  0057C0  A4D8               	btfss	status,2,c
  6289  0057C2  D7FA               	goto	l1957
  6290                           
  6291                           ;lcd3310_SPI.c: 276: Delay10TCYx(20);
  6292  0057C4  0E14               	movlw	20
  6293  0057C6  ECA7  F02B         	call	_Delay10TCYx
  6294                           
  6295                           ;lcd3310_SPI.c: 278: LATCbits.LATC1 = 1;
  6296  0057CA  828B               	bsf	3979,1,c	;volatile
  6297  0057CC  0012               	return	
  6298  0057CE                     __end_of_LCDSend:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           indf1	equ	0xFE7
  6310                           postinc1	equ	0xFE6
  6311                           postdec1	equ	0xFE5
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _WriteSPI1 *****************
  6322 ;; Defined at:
  6323 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi1writ.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  data_out        1    wreg     unsigned char 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  data_out        1    1[COMRAM] unsigned char 
  6328 ;;  TempVar         1    0[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      char 
  6331 ;; Registers used:
  6332 ;;		wreg
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6338 ;;      Params:         0       0       0       0       0       0       0
  6339 ;;      Locals:         2       0       0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0
  6341 ;;      Totals:         2       0       0       0       0       0       0
  6342 ;;Total ram usage:        2 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_LCDSend
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text15
  6352  00578A                     __ptext15:
  6353                           	opt stack 0
  6354  00578A                     _WriteSPI1:
  6355                           	opt stack 26
  6356                           
  6357                           ;incstack = 0
  6358                           ;WriteSPI1@data_out stored from wreg
  6359  00578A  6E02               	movwf	WriteSPI1@data_out,c
  6360  00578C  CFC9 F001          	movff	4041,WriteSPI1@TempVar	;volatile
  6361  005790  969E               	bcf	3998,3,c	;volatile
  6362  005792  9EC6               	bcf	4038,7,c	;volatile
  6363  005794  C002  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  6364  005798  AEC6               	btfss	4038,7,c	;volatile
  6365  00579A  D002               	goto	l405
  6366  00579C  0EFF               	movlw	255
  6367  00579E  0012               	return	
  6368  0057A0                     l405:
  6369  0057A0  A69E               	btfss	3998,3,c	;volatile
  6370  0057A2  D7FE               	goto	l405
  6371  0057A4  0E00               	movlw	0
  6372  0057A6  0012               	return	
  6373  0057A8                     __end_of_WriteSPI1:
  6374                           	opt stack 0
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           postinc0	equ	0xFEE
  6383                           wreg	equ	0xFE8
  6384                           indf1	equ	0xFE7
  6385                           postinc1	equ	0xFE6
  6386                           postdec1	equ	0xFE5
  6387                           fsr1h	equ	0xFE2
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           postdec2	equ	0xFDD
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _Delay10TCYx *****************
  6397 ;; Defined at:
  6398 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d10tcyx.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  unit            1    wreg     unsigned char 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  unit            1    0[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;		None               void
  6405 ;; Registers used:
  6406 ;;		wreg
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6412 ;;      Params:         0       0       0       0       0       0       0
  6413 ;;      Locals:         1       0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0
  6415 ;;      Totals:         1       0       0       0       0       0       0
  6416 ;;Total ram usage:        1 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_LCDSend
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text16
  6426  00574E                     __ptext16:
  6427                           	opt stack 0
  6428  00574E                     _Delay10TCYx:
  6429                           	opt stack 26
  6430                           
  6431                           ;incstack = 0
  6432                           ;Delay10TCYx@unit stored from wreg
  6433  00574E  6E01               	movwf	Delay10TCYx@unit,c
  6434  005750                     l684:
  6435  005750  0E03               	movlw	3
  6436  005752                     u2597:
  6437  005752  2EE8               	decfsz	wreg,f,c
  6438  005754  D7FE               	goto	u2597
  6439  005756  F000               	nop	
  6440  005758  2E01               	decfsz	Delay10TCYx@unit,f,c
  6441  00575A  D7FA               	goto	l684
  6442  00575C  0012               	return	
  6443  00575E                     __end_of_Delay10TCYx:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           postinc0	equ	0xFEE
  6453                           wreg	equ	0xFE8
  6454                           indf1	equ	0xFE7
  6455                           postinc1	equ	0xFE6
  6456                           postdec1	equ	0xFE5
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _LCDClear *****************
  6467 ;; Defined at:
  6468 ;;		line 289 in file "lcd3310_SPI.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  i               2    0[COMRAM] int 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6482 ;;      Params:         0       0       0       0       0       0       0
  6483 ;;      Locals:         2       0       0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0
  6485 ;;      Totals:         2       0       0       0       0       0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_LCDInit
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text17
  6496  0057F4                     __ptext17:
  6497                           	opt stack 0
  6498  0057F4                     _LCDClear:
  6499                           	opt stack 28
  6500                           
  6501                           ;lcd3310_SPI.c: 291: int i;
  6502                           ;lcd3310_SPI.c: 294: for (i=0; i<((103 * 48) / 8); i++) {
  6503                           
  6504                           ;incstack = 0
  6505  0057F4  0E00               	movlw	0
  6506  0057F6  6E02               	movwf	LCDClear@i+1,c
  6507  0057F8  0E00               	movlw	0
  6508  0057FA  6E01               	movwf	LCDClear@i,c
  6509  0057FC  5002               	movf	LCDClear@i+1,w,c
  6510  0057FE  0A80               	xorlw	128
  6511  005800  0F7E               	addlw	-130
  6512  005802  0E6A               	movlw	106
  6513  005804  B4D8               	btfsc	status,2,c
  6514  005806  5C01               	subwf	LCDClear@i,w,c
  6515  005808  B0D8               	btfsc	status,0,c
  6516  00580A  0012               	return	
  6517                           
  6518                           ;lcd3310_SPI.c: 295: LcdMemory[i] = 0x00;
  6519  00580C  0E00               	movlw	low _LcdMemory
  6520  00580E  2401               	addwf	LCDClear@i,w,c
  6521  005810  6ED9               	movwf	fsr2l,c
  6522  005812  0E02               	movlw	high _LcdMemory
  6523  005814  2002               	addwfc	LCDClear@i+1,w,c
  6524  005816  6EDA               	movwf	fsr2h,c
  6525  005818  0E00               	movlw	0
  6526  00581A  6EDF               	movwf	indf2,c
  6527  00581C  4A01               	infsnz	LCDClear@i,f,c
  6528  00581E  2A02               	incf	LCDClear@i+1,f,c
  6529  005820  D7ED               	goto	L16
  6530  005822                     __end_of_LCDClear:
  6531                           	opt stack 0
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodh	equ	0xFF4
  6537                           prodl	equ	0xFF3
  6538                           intcon	equ	0xFF2
  6539                           postinc0	equ	0xFEE
  6540                           wreg	equ	0xFE8
  6541                           indf1	equ	0xFE7
  6542                           postinc1	equ	0xFE6
  6543                           postdec1	equ	0xFE5
  6544                           fsr1h	equ	0xFE2
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _Initialize_SPI *****************
  6554 ;; Defined at:
  6555 ;;		line 34 in file "lcd3310_SPI.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;		None               void
  6562 ;; Registers used:
  6563 ;;		None
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6569 ;;      Params:         0       0       0       0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_LCDInit
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text18
  6583  00572E                     __ptext18:
  6584                           	opt stack 0
  6585  00572E                     _Initialize_SPI:
  6586                           	opt stack 28
  6587                           
  6588                           ;incstack = 0
  6589  00572E  0012               	return	
  6590  005730                     __end_of_Initialize_SPI:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           postinc0	equ	0xFEE
  6600                           wreg	equ	0xFE8
  6601                           indf1	equ	0xFE7
  6602                           postinc1	equ	0xFE6
  6603                           postdec1	equ	0xFE5
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _Delay *****************
  6614 ;; Defined at:
  6615 ;;		line 166 in file "lcd3310_SPI.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  a               4    0[COMRAM] volatile unsigned long 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6629 ;;      Params:         4       0       0       0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0
  6632 ;;      Totals:         4       0       0       0       0       0       0
  6633 ;;Total ram usage:        4 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_LCDInit
  6639 ;;		_Delayc
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text19
  6644  005770                     __ptext19:
  6645                           	opt stack 0
  6646  005770                     _Delay:
  6647                           	opt stack 28
  6648                           
  6649                           ;incstack = 0
  6650  005770  D005               	goto	l248
  6651  005772                     l1995:
  6652  005772  0601               	decf	Delay@a,f,c	;volatile
  6653  005774  0E00               	movlw	0
  6654  005776  5A02               	subwfb	Delay@a+1,f,c	;volatile
  6655  005778  5A03               	subwfb	Delay@a+2,f,c	;volatile
  6656  00577A  5A04               	subwfb	Delay@a+3,f,c	;volatile
  6657  00577C                     l248:
  6658  00577C  5004               	movf	Delay@a+3,w,c	;volatile
  6659  00577E  1001               	iorwf	Delay@a,w,c	;volatile
  6660  005780  1002               	iorwf	Delay@a+1,w,c	;volatile
  6661  005782  1003               	iorwf	Delay@a+2,w,c	;volatile
  6662  005784  B4D8               	btfsc	status,2,c
  6663  005786  0012               	return	
  6664  005788  D7F4               	goto	l1995
  6665  00578A                     __end_of_Delay:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           indf1	equ	0xFE7
  6677                           postinc1	equ	0xFE6
  6678                           postdec1	equ	0xFE5
  6679                           fsr1h	equ	0xFE2
  6680                           fsr1l	equ	0xFE1
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _sendIntArray *****************
  6689 ;; Defined at:
  6690 ;;		line 334 in file "main pic18.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;  array           2    2[COMRAM] PTR short 
  6693 ;;		 -> guesses(10), real_numbers(128), 
  6694 ;;  size            2    4[COMRAM] unsigned int 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6706 ;;      Params:         4       0       0       0       0       0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0
  6709 ;;      Totals:         4       0       0       0       0       0       0
  6710 ;;Total ram usage:        4 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    2
  6713 ;; This function calls:
  6714 ;;		_sendChar
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text20
  6721  005822                     __ptext20:
  6722                           	opt stack 0
  6723  005822                     _sendIntArray:
  6724                           	opt stack 28
  6725                           
  6726                           ;main pic18.c: 335: for(i = 0; i < size; i++) {
  6727                           
  6728                           ;incstack = 0
  6729  005822  0E00               	movlw	0
  6730  005824  6E5D               	movwf	_i+1,c
  6731  005826  0E00               	movlw	0
  6732  005828  6E5C               	movwf	_i,c
  6733  00582A  D00E               	goto	l2447
  6734  00582C                     l2443:
  6735                           
  6736                           ;main pic18.c: 336: sendChar(array[i]);
  6737  00582C  90D8               	bcf	status,0,c
  6738  00582E  345C               	rlcf	_i,w,c
  6739  005830  6ED9               	movwf	fsr2l,c
  6740  005832  345D               	rlcf	_i+1,w,c
  6741  005834  6EDA               	movwf	fsr2h,c
  6742  005836  5003               	movf	sendIntArray@array,w,c
  6743  005838  26D9               	addwf	fsr2l,f,c
  6744  00583A  5004               	movf	sendIntArray@array+1,w,c
  6745  00583C  22DA               	addwfc	fsr2h,f,c
  6746  00583E  50DF               	movf	indf2,w,c
  6747  005840  ECA0  F02B         	call	_sendChar
  6748  005844  4A5C               	infsnz	_i,f,c
  6749  005846  2A5D               	incf	_i+1,f,c
  6750  005848                     l2447:
  6751  005848  5005               	movf	sendIntArray@size,w,c
  6752  00584A  5C5C               	subwf	_i,w,c
  6753  00584C  5006               	movf	sendIntArray@size+1,w,c
  6754  00584E  585D               	subwfb	_i+1,w,c
  6755  005850  B0D8               	btfsc	status,0,c
  6756  005852  0012               	return	
  6757  005854  D7EB               	goto	l2443
  6758  005856                     __end_of_sendIntArray:
  6759                           	opt stack 0
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           intcon	equ	0xFF2
  6767                           postinc0	equ	0xFEE
  6768                           wreg	equ	0xFE8
  6769                           indf1	equ	0xFE7
  6770                           postinc1	equ	0xFE6
  6771                           postdec1	equ	0xFE5
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           fsr2h	equ	0xFDA
  6778                           fsr2l	equ	0xFD9
  6779                           status	equ	0xFD8
  6780                           
  6781 ;; *************** function _sendChar *****************
  6782 ;; Defined at:
  6783 ;;		line 329 in file "main pic18.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  character       1    wreg     unsigned char 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  character       1    1[COMRAM] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6797 ;;      Params:         0       0       0       0       0       0       0
  6798 ;;      Locals:         1       0       0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0
  6800 ;;      Totals:         1       0       0       0       0       0       0
  6801 ;;Total ram usage:        1 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    1
  6804 ;; This function calls:
  6805 ;;		_Write1USART
  6806 ;; This function is called by:
  6807 ;;		_sendIntArray
  6808 ;;		_sendCharArray
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text21
  6813  005740                     __ptext21:
  6814                           	opt stack 0
  6815  005740                     _sendChar:
  6816                           	opt stack 28
  6817                           
  6818                           ;incstack = 0
  6819                           ;sendChar@character stored from wreg
  6820  005740  6E02               	movwf	sendChar@character,c
  6821  005742                     l192:
  6822  005742  A2AC               	btfss	4012,1,c	;volatile
  6823  005744  D7FE               	goto	l192
  6824                           
  6825                           ;main pic18.c: 331: Write1USART(character);
  6826  005746  5002               	movf	sendChar@character,w,c
  6827  005748  ECAF  F02B         	call	_Write1USART
  6828  00574C  0012               	return	
  6829  00574E                     __end_of_sendChar:
  6830                           	opt stack 0
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           postinc0	equ	0xFEE
  6839                           wreg	equ	0xFE8
  6840                           indf1	equ	0xFE7
  6841                           postinc1	equ	0xFE6
  6842                           postdec1	equ	0xFE5
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _Write1USART *****************
  6853 ;; Defined at:
  6854 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1write.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  data            1    wreg     unsigned char 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  data            1    0[COMRAM] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		wreg
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6868 ;;      Params:         0       0       0       0       0       0       0
  6869 ;;      Locals:         1       0       0       0       0       0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0
  6871 ;;      Totals:         1       0       0       0       0       0       0
  6872 ;;Total ram usage:        1 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_sendChar
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text22
  6882  00575E                     __ptext22:
  6883                           	opt stack 0
  6884  00575E                     _Write1USART:
  6885                           	opt stack 28
  6886                           
  6887                           ;incstack = 0
  6888                           ;Write1USART@data stored from wreg
  6889  00575E  6E01               	movwf	Write1USART@data,c
  6890  005760  ACAC               	btfss	4012,6,c	;volatile
  6891  005762  D003               	goto	l1991
  6892  005764  90AC               	bcf	4012,0,c	;volatile
  6893  005766  B25E               	btfsc	_USART1_Status,1,c
  6894  005768  80AC               	bsf	4012,0,c	;volatile
  6895  00576A                     l1991:
  6896  00576A  C001  FFAD         	movff	Write1USART@data,4013	;volatile
  6897  00576E  0012               	return	
  6898  005770                     __end_of_Write1USART:
  6899                           	opt stack 0
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           intcon	equ	0xFF2
  6907                           postinc0	equ	0xFEE
  6908                           wreg	equ	0xFE8
  6909                           indf1	equ	0xFE7
  6910                           postinc1	equ	0xFE6
  6911                           postdec1	equ	0xFE5
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _fix_fft *****************
  6922 ;; Defined at:
  6923 ;;		line 155 in file "fft.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  fr              2   12[COMRAM] PTR short 
  6926 ;;		 -> real_numbers(128), 
  6927 ;;  fi              2   14[COMRAM] PTR short 
  6928 ;;		 -> imaginary_numbers(128), 
  6929 ;;  m               2   16[COMRAM] short 
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  c               4   72[COMRAM] long 
  6932 ;;  b               2   54[COMRAM] short 
  6933 ;;  j               4   68[COMRAM] long 
  6934 ;;  l               4   64[COMRAM] long 
  6935 ;;  mr              4   60[COMRAM] long 
  6936 ;;  i               4   56[COMRAM] long 
  6937 ;;  n               4   46[COMRAM] long 
  6938 ;;  istep           4   34[COMRAM] long 
  6939 ;;  nn              4   30[COMRAM] long 
  6940 ;;  k               4   26[COMRAM] long 
  6941 ;;  ti              2   52[COMRAM] short 
  6942 ;;  tr              2   50[COMRAM] short 
  6943 ;;  wi              2   44[COMRAM] short 
  6944 ;;  wr              2   42[COMRAM] short 
  6945 ;;  qi              2   40[COMRAM] short 
  6946 ;;  qr              2   38[COMRAM] short 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         6       0       0       0       0       0       0
  6957 ;;      Locals:        50       0       0       0       0       0       0
  6958 ;;      Temps:          8       0       0       0       0       0       0
  6959 ;;      Totals:        64       0       0       0       0       0       0
  6960 ;;Total ram usage:       64 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    1
  6963 ;; This function calls:
  6964 ;;		___lmul
  6965 ;; This function is called by:
  6966 ;;		_main
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text23
  6971  00604C                     __ptext23:
  6972                           	opt stack 0
  6973  00604C                     _fix_fft:
  6974                           	opt stack 29
  6975                           
  6976                           ;fft.c: 157: long int mr = 0, nn, i, j, l, k, istep, n;
  6977                           
  6978                           ;incstack = 0
  6979  00604C  0E00               	movlw	0
  6980  00604E  6E3D               	movwf	fix_fft@mr,c
  6981  006050  0E00               	movlw	0
  6982  006052  6E3E               	movwf	fix_fft@mr+1,c
  6983  006054  0E00               	movlw	0
  6984  006056  6E3F               	movwf	fix_fft@mr+2,c
  6985  006058  0E00               	movlw	0
  6986  00605A  6E40               	movwf	fix_fft@mr+3,c
  6987                           
  6988                           ;fft.c: 158: short qr, qi, tr, ti, wr, wi;
  6989                           ;fft.c: 160: n = 1 << m;
  6990  00605C  C011  F013         	movff	fix_fft@m,??_fix_fft
  6991  006060  0E01               	movlw	1
  6992  006062  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  6993  006064  6A15               	clrf	(??_fix_fft+2)& (0+255),c
  6994  006066  2A13               	incf	??_fix_fft,f,c
  6995  006068  D003               	goto	u1784
  6996  00606A                     u1785:
  6997  00606A  90D8               	bcf	status,0,c
  6998  00606C  3614               	rlcf	??_fix_fft+1,f,c
  6999  00606E  3615               	rlcf	??_fix_fft+2,f,c
  7000  006070                     u1784:
  7001  006070  2E13               	decfsz	??_fix_fft,f,c
  7002  006072  D7FB               	goto	u1785
  7003  006074  C014  F02F         	movff	??_fix_fft+1,fix_fft@n
  7004  006078  C015  F030         	movff	??_fix_fft+2,fix_fft@n+1
  7005  00607C  0E00               	movlw	0
  7006  00607E  BE30               	btfsc	fix_fft@n+1,7,c
  7007  006080  0EFF               	movlw	-1
  7008  006082  6E31               	movwf	fix_fft@n+2,c
  7009  006084  6E32               	movwf	fix_fft@n+3,c
  7010                           
  7011                           ;fft.c: 161: nn = n - 1;
  7012  006086  0EFF               	movlw	255
  7013  006088  242F               	addwf	fix_fft@n,w,c
  7014  00608A  6E1F               	movwf	fix_fft@nn,c
  7015  00608C  0EFF               	movlw	255
  7016  00608E  2030               	addwfc	fix_fft@n+1,w,c
  7017  006090  6E20               	movwf	fix_fft@nn+1,c
  7018  006092  0EFF               	movlw	255
  7019  006094  2031               	addwfc	fix_fft@n+2,w,c
  7020  006096  6E21               	movwf	fix_fft@nn+2,c
  7021  006098  0EFF               	movlw	255
  7022  00609A  2032               	addwfc	fix_fft@n+3,w,c
  7023  00609C  6E22               	movwf	fix_fft@nn+3,c
  7024                           
  7025                           ;fft.c: 167: for (m=1; m<=nn; ++m)
  7026  00609E  0E00               	movlw	0
  7027  0060A0  6E12               	movwf	fix_fft@m+1,c
  7028  0060A2  0E01               	movlw	1
  7029  0060A4  6E11               	movwf	fix_fft@m,c
  7030  0060A6  D0C4               	goto	l2369
  7031  0060A8                     l207:
  7032                           
  7033                           ;fft.c: 168: {
  7034                           ;fft.c: 169: l = n;
  7035  0060A8  C02F  F041         	movff	fix_fft@n,fix_fft@l
  7036  0060AC  C030  F042         	movff	fix_fft@n+1,fix_fft@l+1
  7037  0060B0  C031  F043         	movff	fix_fft@n+2,fix_fft@l+2
  7038  0060B4  C032  F044         	movff	fix_fft@n+3,fix_fft@l+3
  7039  0060B8                     l2351:
  7040                           
  7041                           ;fft.c: 171: {
  7042                           ;fft.c: 172: l >>= 1;
  7043  0060B8  3444               	rlcf	fix_fft@l+3,w,c
  7044  0060BA  3244               	rrcf	fix_fft@l+3,f,c
  7045  0060BC  3243               	rrcf	fix_fft@l+2,f,c
  7046  0060BE  3242               	rrcf	fix_fft@l+1,f,c
  7047  0060C0  3241               	rrcf	fix_fft@l,f,c
  7048                           
  7049                           ;fft.c: 173: } while (mr+l > nn);
  7050  0060C2  5041               	movf	fix_fft@l,w,c
  7051  0060C4  243D               	addwf	fix_fft@mr,w,c
  7052  0060C6  6E13               	movwf	??_fix_fft& (0+255),c
  7053  0060C8  5042               	movf	fix_fft@l+1,w,c
  7054  0060CA  203E               	addwfc	fix_fft@mr+1,w,c
  7055  0060CC  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7056  0060CE  5043               	movf	fix_fft@l+2,w,c
  7057  0060D0  203F               	addwfc	fix_fft@mr+2,w,c
  7058  0060D2  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7059  0060D4  5044               	movf	fix_fft@l+3,w,c
  7060  0060D6  2040               	addwfc	fix_fft@mr+3,w,c
  7061  0060D8  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7062  0060DA  5022               	movf	fix_fft@nn+3,w,c
  7063  0060DC  0A80               	xorlw	128
  7064  0060DE  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7065  0060E0  5013               	movf	??_fix_fft,w,c
  7066  0060E2  5C1F               	subwf	fix_fft@nn,w,c
  7067  0060E4  5014               	movf	??_fix_fft+1,w,c
  7068  0060E6  5820               	subwfb	fix_fft@nn+1,w,c
  7069  0060E8  5015               	movf	??_fix_fft+2,w,c
  7070  0060EA  5821               	subwfb	fix_fft@nn+2,w,c
  7071  0060EC  5016               	movf	??_fix_fft+3,w,c
  7072  0060EE  0A80               	xorlw	128
  7073  0060F0  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7074  0060F2  A0D8               	btfss	status,0,c
  7075  0060F4  D7E1               	goto	l2351
  7076                           
  7077                           ;fft.c: 175: mr = (mr & (l-1)) + l;
  7078  0060F6  0EFF               	movlw	255
  7079  0060F8  2441               	addwf	fix_fft@l,w,c
  7080  0060FA  6E13               	movwf	??_fix_fft& (0+255),c
  7081  0060FC  0EFF               	movlw	255
  7082  0060FE  2042               	addwfc	fix_fft@l+1,w,c
  7083  006100  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7084  006102  0EFF               	movlw	255
  7085  006104  2043               	addwfc	fix_fft@l+2,w,c
  7086  006106  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7087  006108  0EFF               	movlw	255
  7088  00610A  2044               	addwfc	fix_fft@l+3,w,c
  7089  00610C  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7090  00610E  503D               	movf	fix_fft@mr,w,c
  7091  006110  1413               	andwf	??_fix_fft,w,c
  7092  006112  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7093  006114  503E               	movf	fix_fft@mr+1,w,c
  7094  006116  1414               	andwf	??_fix_fft+1,w,c
  7095  006118  6E18               	movwf	(??_fix_fft+5)& (0+255),c
  7096  00611A  503F               	movf	fix_fft@mr+2,w,c
  7097  00611C  1415               	andwf	??_fix_fft+2,w,c
  7098  00611E  6E19               	movwf	(??_fix_fft+6)& (0+255),c
  7099  006120  5040               	movf	fix_fft@mr+3,w,c
  7100  006122  1416               	andwf	??_fix_fft+3,w,c
  7101  006124  6E1A               	movwf	(??_fix_fft+7)& (0+255),c
  7102  006126  5041               	movf	fix_fft@l,w,c
  7103  006128  2417               	addwf	??_fix_fft+4,w,c
  7104  00612A  6E3D               	movwf	fix_fft@mr,c
  7105  00612C  5042               	movf	fix_fft@l+1,w,c
  7106  00612E  2018               	addwfc	??_fix_fft+5,w,c
  7107  006130  6E3E               	movwf	fix_fft@mr+1,c
  7108  006132  5043               	movf	fix_fft@l+2,w,c
  7109  006134  2019               	addwfc	??_fix_fft+6,w,c
  7110  006136  6E3F               	movwf	fix_fft@mr+2,c
  7111  006138  5044               	movf	fix_fft@l+3,w,c
  7112  00613A  201A               	addwfc	??_fix_fft+7,w,c
  7113  00613C  6E40               	movwf	fix_fft@mr+3,c
  7114                           
  7115                           ;fft.c: 176: if (mr <= m) continue;
  7116  00613E  C011  F013         	movff	fix_fft@m,??_fix_fft
  7117  006142  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  7118  006146  0E00               	movlw	0
  7119  006148  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  7120  00614A  0EFF               	movlw	255
  7121  00614C  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7122  00614E  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7123  006150  5016               	movf	??_fix_fft+3,w,c
  7124  006152  0A80               	xorlw	128
  7125  006154  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7126  006156  503D               	movf	fix_fft@mr,w,c
  7127  006158  5C13               	subwf	??_fix_fft,w,c
  7128  00615A  503E               	movf	fix_fft@mr+1,w,c
  7129  00615C  5814               	subwfb	??_fix_fft+1,w,c
  7130  00615E  503F               	movf	fix_fft@mr+2,w,c
  7131  006160  5815               	subwfb	??_fix_fft+2,w,c
  7132  006162  5040               	movf	fix_fft@mr+3,w,c
  7133  006164  0A80               	xorlw	128
  7134  006166  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7135  006168  B0D8               	btfsc	status,0,c
  7136  00616A  D060               	goto	l2367
  7137                           
  7138                           ;fft.c: 178: tr = fr[m];
  7139  00616C  90D8               	bcf	status,0,c
  7140  00616E  3411               	rlcf	fix_fft@m,w,c
  7141  006170  6ED9               	movwf	fsr2l,c
  7142  006172  3412               	rlcf	fix_fft@m+1,w,c
  7143  006174  6EDA               	movwf	fsr2h,c
  7144  006176  500D               	movf	fix_fft@fr,w,c
  7145  006178  26D9               	addwf	fsr2l,f,c
  7146  00617A  500E               	movf	fix_fft@fr+1,w,c
  7147  00617C  22DA               	addwfc	fsr2h,f,c
  7148  00617E  CFDE F033          	movff	postinc2,fix_fft@tr
  7149  006182  CFDD F034          	movff	postdec2,fix_fft@tr+1
  7150                           
  7151                           ;fft.c: 179: fr[m] = fr[mr];
  7152  006186  90D8               	bcf	status,0,c
  7153  006188  343D               	rlcf	fix_fft@mr,w,c
  7154  00618A  6ED9               	movwf	fsr2l,c
  7155  00618C  343E               	rlcf	fix_fft@mr+1,w,c
  7156  00618E  6EDA               	movwf	fsr2h,c
  7157  006190  500D               	movf	fix_fft@fr,w,c
  7158  006192  26D9               	addwf	fsr2l,f,c
  7159  006194  500E               	movf	fix_fft@fr+1,w,c
  7160  006196  22DA               	addwfc	fsr2h,f,c
  7161  006198  90D8               	bcf	status,0,c
  7162  00619A  3411               	rlcf	fix_fft@m,w,c
  7163  00619C  6EE1               	movwf	fsr1l,c
  7164  00619E  3412               	rlcf	fix_fft@m+1,w,c
  7165  0061A0  6EE2               	movwf	fsr1h,c
  7166  0061A2  500D               	movf	fix_fft@fr,w,c
  7167  0061A4  26E1               	addwf	fsr1l,f,c
  7168  0061A6  500E               	movf	fix_fft@fr+1,w,c
  7169  0061A8  22E2               	addwfc	fsr1h,f,c
  7170  0061AA  CFDE FFE6          	movff	postinc2,postinc1
  7171  0061AE  CFDD FFE5          	movff	postdec2,postdec1
  7172                           
  7173                           ;fft.c: 180: fr[mr] = tr;
  7174  0061B2  90D8               	bcf	status,0,c
  7175  0061B4  343D               	rlcf	fix_fft@mr,w,c
  7176  0061B6  6ED9               	movwf	fsr2l,c
  7177  0061B8  343E               	rlcf	fix_fft@mr+1,w,c
  7178  0061BA  6EDA               	movwf	fsr2h,c
  7179  0061BC  500D               	movf	fix_fft@fr,w,c
  7180  0061BE  26D9               	addwf	fsr2l,f,c
  7181  0061C0  500E               	movf	fix_fft@fr+1,w,c
  7182  0061C2  22DA               	addwfc	fsr2h,f,c
  7183  0061C4  C033  FFDE         	movff	fix_fft@tr,postinc2
  7184  0061C8  C034  FFDD         	movff	fix_fft@tr+1,postdec2
  7185                           
  7186                           ;fft.c: 181: ti = fi[m];
  7187  0061CC  90D8               	bcf	status,0,c
  7188  0061CE  3411               	rlcf	fix_fft@m,w,c
  7189  0061D0  6ED9               	movwf	fsr2l,c
  7190  0061D2  3412               	rlcf	fix_fft@m+1,w,c
  7191  0061D4  6EDA               	movwf	fsr2h,c
  7192  0061D6  500F               	movf	fix_fft@fi,w,c
  7193  0061D8  26D9               	addwf	fsr2l,f,c
  7194  0061DA  5010               	movf	fix_fft@fi+1,w,c
  7195  0061DC  22DA               	addwfc	fsr2h,f,c
  7196  0061DE  CFDE F035          	movff	postinc2,fix_fft@ti
  7197  0061E2  CFDD F036          	movff	postdec2,fix_fft@ti+1
  7198                           
  7199                           ;fft.c: 182: fi[m] = fi[mr];
  7200  0061E6  90D8               	bcf	status,0,c
  7201  0061E8  343D               	rlcf	fix_fft@mr,w,c
  7202  0061EA  6ED9               	movwf	fsr2l,c
  7203  0061EC  343E               	rlcf	fix_fft@mr+1,w,c
  7204  0061EE  6EDA               	movwf	fsr2h,c
  7205  0061F0  500F               	movf	fix_fft@fi,w,c
  7206  0061F2  26D9               	addwf	fsr2l,f,c
  7207  0061F4  5010               	movf	fix_fft@fi+1,w,c
  7208  0061F6  22DA               	addwfc	fsr2h,f,c
  7209  0061F8  90D8               	bcf	status,0,c
  7210  0061FA  3411               	rlcf	fix_fft@m,w,c
  7211  0061FC  6EE1               	movwf	fsr1l,c
  7212  0061FE  3412               	rlcf	fix_fft@m+1,w,c
  7213  006200  6EE2               	movwf	fsr1h,c
  7214  006202  500F               	movf	fix_fft@fi,w,c
  7215  006204  26E1               	addwf	fsr1l,f,c
  7216  006206  5010               	movf	fix_fft@fi+1,w,c
  7217  006208  22E2               	addwfc	fsr1h,f,c
  7218  00620A  CFDE FFE6          	movff	postinc2,postinc1
  7219  00620E  CFDD FFE5          	movff	postdec2,postdec1
  7220                           
  7221                           ;fft.c: 183: fi[mr] = ti;
  7222  006212  90D8               	bcf	status,0,c
  7223  006214  343D               	rlcf	fix_fft@mr,w,c
  7224  006216  6ED9               	movwf	fsr2l,c
  7225  006218  343E               	rlcf	fix_fft@mr+1,w,c
  7226  00621A  6EDA               	movwf	fsr2h,c
  7227  00621C  500F               	movf	fix_fft@fi,w,c
  7228  00621E  26D9               	addwf	fsr2l,f,c
  7229  006220  5010               	movf	fix_fft@fi+1,w,c
  7230  006222  22DA               	addwfc	fsr2h,f,c
  7231  006224  C035  FFDE         	movff	fix_fft@ti,postinc2
  7232  006228  C036  FFDD         	movff	fix_fft@ti+1,postdec2
  7233  00622C                     l2367:
  7234  00622C  4A11               	infsnz	fix_fft@m,f,c
  7235  00622E  2A12               	incf	fix_fft@m+1,f,c
  7236  006230                     l2369:
  7237  006230  C011  F013         	movff	fix_fft@m,??_fix_fft
  7238  006234  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  7239  006238  0E00               	movlw	0
  7240  00623A  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  7241  00623C  0EFF               	movlw	255
  7242  00623E  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7243  006240  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7244  006242  5022               	movf	fix_fft@nn+3,w,c
  7245  006244  0A80               	xorlw	128
  7246  006246  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7247  006248  5013               	movf	??_fix_fft,w,c
  7248  00624A  5C1F               	subwf	fix_fft@nn,w,c
  7249  00624C  5014               	movf	??_fix_fft+1,w,c
  7250  00624E  5820               	subwfb	fix_fft@nn+1,w,c
  7251  006250  5015               	movf	??_fix_fft+2,w,c
  7252  006252  5821               	subwfb	fix_fft@nn+2,w,c
  7253  006254  5016               	movf	??_fix_fft+3,w,c
  7254  006256  0A80               	xorlw	128
  7255  006258  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7256  00625A  B0D8               	btfsc	status,0,c
  7257  00625C  D725               	goto	l207
  7258                           
  7259                           ;fft.c: 184: }
  7260                           ;fft.c: 186: l = 1;
  7261  00625E  0E01               	movlw	1
  7262  006260  6E41               	movwf	fix_fft@l,c
  7263  006262  0E00               	movlw	0
  7264  006264  6E42               	movwf	fix_fft@l+1,c
  7265  006266  0E00               	movlw	0
  7266  006268  6E43               	movwf	fix_fft@l+2,c
  7267  00626A  0E00               	movlw	0
  7268  00626C  6E44               	movwf	fix_fft@l+3,c
  7269                           
  7270                           ;fft.c: 187: k = 10-1;
  7271  00626E  0E09               	movlw	9
  7272  006270  6E1B               	movwf	fix_fft@k,c
  7273  006272  0E00               	movlw	0
  7274  006274  6E1C               	movwf	fix_fft@k+1,c
  7275  006276  0E00               	movlw	0
  7276  006278  6E1D               	movwf	fix_fft@k+2,c
  7277  00627A  0E00               	movlw	0
  7278  00627C  6E1E               	movwf	fix_fft@k+3,c
  7279                           
  7280                           ;fft.c: 189: while (l < n)
  7281  00627E  D29D               	goto	l213
  7282  006280                     l2373:
  7283                           
  7284                           ;fft.c: 190: {
  7285                           ;fft.c: 203: long int c;
  7286                           ;fft.c: 204: short b;
  7287                           ;fft.c: 206: istep = l << 1;
  7288  006280  90D8               	bcf	status,0,c
  7289  006282  3441               	rlcf	fix_fft@l,w,c
  7290  006284  6E23               	movwf	fix_fft@istep,c
  7291  006286  3442               	rlcf	fix_fft@l+1,w,c
  7292  006288  6E24               	movwf	fix_fft@istep+1,c
  7293  00628A  3443               	rlcf	fix_fft@l+2,w,c
  7294  00628C  6E25               	movwf	fix_fft@istep+2,c
  7295  00628E  3444               	rlcf	fix_fft@l+3,w,c
  7296  006290  6E26               	movwf	fix_fft@istep+3,c
  7297                           
  7298                           ;fft.c: 207: for (m=0; m<l; ++m)
  7299  006292  0E00               	movlw	0
  7300  006294  6E12               	movwf	fix_fft@m+1,c
  7301  006296  0E00               	movlw	0
  7302  006298  6E11               	movwf	fix_fft@m,c
  7303  00629A  D268               	goto	l2433
  7304  00629C                     l2377:
  7305                           
  7306                           ;fft.c: 208: {
  7307                           ;fft.c: 209: j = m << k;
  7308  00629C  C01B  F013         	movff	fix_fft@k,??_fix_fft
  7309  0062A0  C011  F014         	movff	fix_fft@m,??_fix_fft+1
  7310  0062A4  C012  F015         	movff	fix_fft@m+1,??_fix_fft+2
  7311  0062A8  2A13               	incf	??_fix_fft,f,c
  7312  0062AA  D003               	goto	u1824
  7313  0062AC                     u1825:
  7314  0062AC  90D8               	bcf	status,0,c
  7315  0062AE  3614               	rlcf	??_fix_fft+1,f,c
  7316  0062B0  3615               	rlcf	??_fix_fft+2,f,c
  7317  0062B2                     u1824:
  7318  0062B2  2E13               	decfsz	??_fix_fft,f,c
  7319  0062B4  D7FB               	goto	u1825
  7320  0062B6  C014  F045         	movff	??_fix_fft+1,fix_fft@j
  7321  0062BA  C015  F046         	movff	??_fix_fft+2,fix_fft@j+1
  7322  0062BE  0E00               	movlw	0
  7323  0062C0  BE46               	btfsc	fix_fft@j+1,7,c
  7324  0062C2  0EFF               	movlw	-1
  7325  0062C4  6E47               	movwf	fix_fft@j+2,c
  7326  0062C6  6E48               	movwf	fix_fft@j+3,c
  7327                           
  7328                           ;fft.c: 211: wr = Sinewave[j+1024/4];
  7329  0062C8  0E00               	movlw	0
  7330  0062CA  6E13               	movwf	??_fix_fft& (0+255),c
  7331  0062CC  0E02               	movlw	2
  7332  0062CE  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7333  0062D0  C045  F015         	movff	fix_fft@j,??_fix_fft+2
  7334  0062D4  C046  F016         	movff	fix_fft@j+1,??_fix_fft+3
  7335  0062D8  90D8               	bcf	status,0,c
  7336  0062DA  3615               	rlcf	??_fix_fft+2,f,c
  7337  0062DC  3616               	rlcf	??_fix_fft+3,f,c
  7338  0062DE  5013               	movf	??_fix_fft,w,c
  7339  0062E0  2615               	addwf	??_fix_fft+2,f,c
  7340  0062E2  5014               	movf	??_fix_fft+1,w,c
  7341  0062E4  2216               	addwfc	??_fix_fft+3,f,c
  7342  0062E6  0EBF               	movlw	low _Sinewave
  7343  0062E8  2415               	addwf	??_fix_fft+2,w,c
  7344  0062EA  6EF6               	movwf	tblptrl,c
  7345  0062EC  0E76               	movlw	high _Sinewave
  7346  0062EE  2016               	addwfc	??_fix_fft+3,w,c
  7347  0062F0  6EF7               	movwf	tblptrh,c
  7348  0062F2                     	if	0	;There are less than 3 active tblptr bytes
  7349  0062F2                     	endif
  7350  0062F2  0009               	tblrd		*+
  7351  0062F4  CFF5 F02B          	movff	tablat,fix_fft@wr
  7352  0062F8  000A               	tblrd		*-
  7353  0062FA  CFF5 F02C          	movff	tablat,fix_fft@wr+1
  7354                           
  7355                           ;fft.c: 212: wi = -Sinewave[j];
  7356  0062FE  C045  F013         	movff	fix_fft@j,??_fix_fft
  7357  006302  C046  F014         	movff	fix_fft@j+1,??_fix_fft+1
  7358  006306  90D8               	bcf	status,0,c
  7359  006308  3613               	rlcf	??_fix_fft,f,c
  7360  00630A  3614               	rlcf	??_fix_fft+1,f,c
  7361  00630C  0EBF               	movlw	low _Sinewave
  7362  00630E  2413               	addwf	??_fix_fft,w,c
  7363  006310  6EF6               	movwf	tblptrl,c
  7364  006312  0E76               	movlw	high _Sinewave
  7365  006314  2014               	addwfc	??_fix_fft+1,w,c
  7366  006316  6EF7               	movwf	tblptrh,c
  7367  006318                     	if	0	;There are less than 3 active tblptr bytes
  7368  006318                     	endif
  7369  006318  0009               	tblrd		*+
  7370  00631A  CFF5 F015          	movff	tablat,??_fix_fft+2
  7371  00631E  0009               	tblrd		*+
  7372  006320  CFF5 F016          	movff	tablat,??_fix_fft+3
  7373  006324  1E15               	comf	??_fix_fft+2,f,c
  7374  006326  1E16               	comf	??_fix_fft+3,f,c
  7375  006328  4A15               	infsnz	??_fix_fft+2,f,c
  7376  00632A  2A16               	incf	??_fix_fft+3,f,c
  7377  00632C  C015  F02D         	movff	??_fix_fft+2,fix_fft@wi
  7378  006330  C016  F02E         	movff	??_fix_fft+3,fix_fft@wi+1
  7379                           
  7380                           ;fft.c: 214: wr >>= 1;
  7381  006334  342C               	rlcf	fix_fft@wr+1,w,c
  7382  006336  322C               	rrcf	fix_fft@wr+1,f,c
  7383  006338  322B               	rrcf	fix_fft@wr,f,c
  7384                           
  7385                           ;fft.c: 215: wi >>= 1;
  7386  00633A  342E               	rlcf	fix_fft@wi+1,w,c
  7387  00633C  322E               	rrcf	fix_fft@wi+1,f,c
  7388  00633E  322D               	rrcf	fix_fft@wi,f,c
  7389                           
  7390                           ;fft.c: 217: for (i=m; i<n; i+=istep)
  7391  006340  C011  F039         	movff	fix_fft@m,fix_fft@i
  7392  006344  C012  F03A         	movff	fix_fft@m+1,fix_fft@i+1
  7393  006348  0E00               	movlw	0
  7394  00634A  BE3A               	btfsc	fix_fft@i+1,7,c
  7395  00634C  0EFF               	movlw	-1
  7396  00634E  6E3B               	movwf	fix_fft@i+2,c
  7397  006350  6E3C               	movwf	fix_fft@i+3,c
  7398  006352  D1FC               	goto	l2429
  7399  006354                     l2385:
  7400                           
  7401                           ;fft.c: 218: {
  7402                           ;fft.c: 219: j = i + l;
  7403  006354  5041               	movf	fix_fft@l,w,c
  7404  006356  2439               	addwf	fix_fft@i,w,c
  7405  006358  6E45               	movwf	fix_fft@j,c
  7406  00635A  5042               	movf	fix_fft@l+1,w,c
  7407  00635C  203A               	addwfc	fix_fft@i+1,w,c
  7408  00635E  6E46               	movwf	fix_fft@j+1,c
  7409  006360  5043               	movf	fix_fft@l+2,w,c
  7410  006362  203B               	addwfc	fix_fft@i+2,w,c
  7411  006364  6E47               	movwf	fix_fft@j+2,c
  7412  006366  5044               	movf	fix_fft@l+3,w,c
  7413  006368  203C               	addwfc	fix_fft@i+3,w,c
  7414  00636A  6E48               	movwf	fix_fft@j+3,c
  7415                           
  7416                           ;fft.c: 227: c = ((long int)wr * (long int)fr[j]);
  7417  00636C  C02B  F001         	movff	fix_fft@wr,___lmul@multiplier
  7418  006370  C02C  F002         	movff	fix_fft@wr+1,___lmul@multiplier+1
  7419  006374  0E00               	movlw	0
  7420  006376  BE02               	btfsc	___lmul@multiplier+1,7,c
  7421  006378  0EFF               	movlw	-1
  7422  00637A  6E03               	movwf	___lmul@multiplier+2,c
  7423  00637C  6E04               	movwf	___lmul@multiplier+3,c
  7424  00637E  90D8               	bcf	status,0,c
  7425  006380  3445               	rlcf	fix_fft@j,w,c
  7426  006382  6ED9               	movwf	fsr2l,c
  7427  006384  3446               	rlcf	fix_fft@j+1,w,c
  7428  006386  6EDA               	movwf	fsr2h,c
  7429  006388  500D               	movf	fix_fft@fr,w,c
  7430  00638A  26D9               	addwf	fsr2l,f,c
  7431  00638C  500E               	movf	fix_fft@fr+1,w,c
  7432  00638E  22DA               	addwfc	fsr2h,f,c
  7433  006390  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7434  006394  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7435  006398  0E00               	movlw	0
  7436  00639A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7437  00639C  0EFF               	movlw	-1
  7438  00639E  6E07               	movwf	___lmul@multiplicand+2,c
  7439  0063A0  6E08               	movwf	___lmul@multiplicand+3,c
  7440  0063A2  ECFD  F02C         	call	___lmul	;wreg free
  7441  0063A6  C001  F049         	movff	?___lmul,fix_fft@c
  7442  0063AA  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7443  0063AE  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7444  0063B2  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7445                           
  7446                           ;fft.c: 228: c = c >> 14;
  7447  0063B6  0E0E               	movlw	14
  7448  0063B8  6E13               	movwf	??_fix_fft& (0+255),c
  7449  0063BA  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7450  0063BE  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7451  0063C2  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7452  0063C6  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7453  0063CA                     u1835:
  7454  0063CA  6613               	tstfsz	??_fix_fft,c
  7455  0063CC  D001               	goto	u1836
  7456  0063CE  D007               	goto	u1837
  7457  0063D0                     u1836:
  7458  0063D0  3417               	rlcf	??_fix_fft+4,w,c
  7459  0063D2  3217               	rrcf	??_fix_fft+4,f,c
  7460  0063D4  3216               	rrcf	??_fix_fft+3,f,c
  7461  0063D6  3215               	rrcf	??_fix_fft+2,f,c
  7462  0063D8  3214               	rrcf	??_fix_fft+1,f,c
  7463  0063DA  2E13               	decfsz	??_fix_fft,f,c
  7464  0063DC  D7F6               	goto	u1835
  7465  0063DE                     u1837:
  7466  0063DE  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7467  0063E2  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7468  0063E6  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7469  0063EA  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7470                           
  7471                           ;fft.c: 229: b = c & 0x01;
  7472  0063EE  0E01               	movlw	1
  7473  0063F0  1449               	andwf	fix_fft@c,w,c
  7474  0063F2  6E37               	movwf	fix_fft@b,c
  7475  0063F4  6A38               	clrf	fix_fft@b+1,c
  7476                           
  7477                           ;fft.c: 230: tr = (c >> 1) + b;
  7478  0063F6  C049  F013         	movff	fix_fft@c,??_fix_fft
  7479  0063FA  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7480  0063FE  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7481  006402  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7482  006406  3416               	rlcf	??_fix_fft+3,w,c
  7483  006408  3216               	rrcf	??_fix_fft+3,f,c
  7484  00640A  3215               	rrcf	??_fix_fft+2,f,c
  7485  00640C  3214               	rrcf	??_fix_fft+1,f,c
  7486  00640E  3213               	rrcf	??_fix_fft,f,c
  7487  006410  5037               	movf	fix_fft@b,w,c
  7488  006412  2413               	addwf	??_fix_fft,w,c
  7489  006414  6E33               	movwf	fix_fft@tr,c
  7490  006416  5038               	movf	fix_fft@b+1,w,c
  7491  006418  2014               	addwfc	??_fix_fft+1,w,c
  7492  00641A  6E34               	movwf	fix_fft@tr+1,c
  7493                           
  7494                           ;fft.c: 232: c = ((long int)wi * (long int)fi[j]);
  7495  00641C  C02D  F001         	movff	fix_fft@wi,___lmul@multiplier
  7496  006420  C02E  F002         	movff	fix_fft@wi+1,___lmul@multiplier+1
  7497  006424  0E00               	movlw	0
  7498  006426  BE02               	btfsc	___lmul@multiplier+1,7,c
  7499  006428  0EFF               	movlw	-1
  7500  00642A  6E03               	movwf	___lmul@multiplier+2,c
  7501  00642C  6E04               	movwf	___lmul@multiplier+3,c
  7502  00642E  90D8               	bcf	status,0,c
  7503  006430  3445               	rlcf	fix_fft@j,w,c
  7504  006432  6ED9               	movwf	fsr2l,c
  7505  006434  3446               	rlcf	fix_fft@j+1,w,c
  7506  006436  6EDA               	movwf	fsr2h,c
  7507  006438  500F               	movf	fix_fft@fi,w,c
  7508  00643A  26D9               	addwf	fsr2l,f,c
  7509  00643C  5010               	movf	fix_fft@fi+1,w,c
  7510  00643E  22DA               	addwfc	fsr2h,f,c
  7511  006440  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7512  006444  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7513  006448  0E00               	movlw	0
  7514  00644A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7515  00644C  0EFF               	movlw	-1
  7516  00644E  6E07               	movwf	___lmul@multiplicand+2,c
  7517  006450  6E08               	movwf	___lmul@multiplicand+3,c
  7518  006452  ECFD  F02C         	call	___lmul	;wreg free
  7519  006456  C001  F049         	movff	?___lmul,fix_fft@c
  7520  00645A  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7521  00645E  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7522  006462  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7523                           
  7524                           ;fft.c: 233: c = c >> 14;
  7525  006466  0E0E               	movlw	14
  7526  006468  6E13               	movwf	??_fix_fft& (0+255),c
  7527  00646A  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7528  00646E  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7529  006472  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7530  006476  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7531  00647A                     u1845:
  7532  00647A  6613               	tstfsz	??_fix_fft,c
  7533  00647C  D001               	goto	u1846
  7534  00647E  D007               	goto	u1847
  7535  006480                     u1846:
  7536  006480  3417               	rlcf	??_fix_fft+4,w,c
  7537  006482  3217               	rrcf	??_fix_fft+4,f,c
  7538  006484  3216               	rrcf	??_fix_fft+3,f,c
  7539  006486  3215               	rrcf	??_fix_fft+2,f,c
  7540  006488  3214               	rrcf	??_fix_fft+1,f,c
  7541  00648A  2E13               	decfsz	??_fix_fft,f,c
  7542  00648C  D7F6               	goto	u1845
  7543  00648E                     u1847:
  7544  00648E  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7545  006492  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7546  006496  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7547  00649A  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7548                           
  7549                           ;fft.c: 234: b = c & 0x01;
  7550  00649E  0E01               	movlw	1
  7551  0064A0  1449               	andwf	fix_fft@c,w,c
  7552  0064A2  6E37               	movwf	fix_fft@b,c
  7553  0064A4  6A38               	clrf	fix_fft@b+1,c
  7554                           
  7555                           ;fft.c: 235: tr = tr - ((c >> 1) + b);
  7556  0064A6  C049  F013         	movff	fix_fft@c,??_fix_fft
  7557  0064AA  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7558  0064AE  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7559  0064B2  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7560  0064B6  3416               	rlcf	??_fix_fft+3,w,c
  7561  0064B8  3216               	rrcf	??_fix_fft+3,f,c
  7562  0064BA  3215               	rrcf	??_fix_fft+2,f,c
  7563  0064BC  3214               	rrcf	??_fix_fft+1,f,c
  7564  0064BE  3213               	rrcf	??_fix_fft,f,c
  7565  0064C0  5037               	movf	fix_fft@b,w,c
  7566  0064C2  2613               	addwf	??_fix_fft,f,c
  7567  0064C4  5038               	movf	fix_fft@b+1,w,c
  7568  0064C6  2214               	addwfc	??_fix_fft+1,f,c
  7569  0064C8  1E13               	comf	??_fix_fft,f,c
  7570  0064CA  1E14               	comf	??_fix_fft+1,f,c
  7571  0064CC  4A13               	infsnz	??_fix_fft,f,c
  7572  0064CE  2A14               	incf	??_fix_fft+1,f,c
  7573  0064D0  5033               	movf	fix_fft@tr,w,c
  7574  0064D2  2413               	addwf	??_fix_fft,w,c
  7575  0064D4  6E33               	movwf	fix_fft@tr,c
  7576  0064D6  5034               	movf	fix_fft@tr+1,w,c
  7577  0064D8  2014               	addwfc	??_fix_fft+1,w,c
  7578  0064DA  6E34               	movwf	fix_fft@tr+1,c
  7579                           
  7580                           ;fft.c: 238: c = ((long int)wr * (long int)fi[j]);
  7581  0064DC  C02B  F001         	movff	fix_fft@wr,___lmul@multiplier
  7582  0064E0  C02C  F002         	movff	fix_fft@wr+1,___lmul@multiplier+1
  7583  0064E4  0E00               	movlw	0
  7584  0064E6  BE02               	btfsc	___lmul@multiplier+1,7,c
  7585  0064E8  0EFF               	movlw	-1
  7586  0064EA  6E03               	movwf	___lmul@multiplier+2,c
  7587  0064EC  6E04               	movwf	___lmul@multiplier+3,c
  7588  0064EE  90D8               	bcf	status,0,c
  7589  0064F0  3445               	rlcf	fix_fft@j,w,c
  7590  0064F2  6ED9               	movwf	fsr2l,c
  7591  0064F4  3446               	rlcf	fix_fft@j+1,w,c
  7592  0064F6  6EDA               	movwf	fsr2h,c
  7593  0064F8  500F               	movf	fix_fft@fi,w,c
  7594  0064FA  26D9               	addwf	fsr2l,f,c
  7595  0064FC  5010               	movf	fix_fft@fi+1,w,c
  7596  0064FE  22DA               	addwfc	fsr2h,f,c
  7597  006500  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7598  006504  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7599  006508  0E00               	movlw	0
  7600  00650A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7601  00650C  0EFF               	movlw	-1
  7602  00650E  6E07               	movwf	___lmul@multiplicand+2,c
  7603  006510  6E08               	movwf	___lmul@multiplicand+3,c
  7604  006512  ECFD  F02C         	call	___lmul	;wreg free
  7605  006516  C001  F049         	movff	?___lmul,fix_fft@c
  7606  00651A  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7607  00651E  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7608  006522  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7609                           
  7610                           ;fft.c: 239: c = c >> 14;
  7611  006526  0E0E               	movlw	14
  7612  006528  6E13               	movwf	??_fix_fft& (0+255),c
  7613  00652A  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7614  00652E  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7615  006532  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7616  006536  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7617  00653A                     u1855:
  7618  00653A  6613               	tstfsz	??_fix_fft,c
  7619  00653C  D001               	goto	u1856
  7620  00653E  D007               	goto	u1857
  7621  006540                     u1856:
  7622  006540  3417               	rlcf	??_fix_fft+4,w,c
  7623  006542  3217               	rrcf	??_fix_fft+4,f,c
  7624  006544  3216               	rrcf	??_fix_fft+3,f,c
  7625  006546  3215               	rrcf	??_fix_fft+2,f,c
  7626  006548  3214               	rrcf	??_fix_fft+1,f,c
  7627  00654A  2E13               	decfsz	??_fix_fft,f,c
  7628  00654C  D7F6               	goto	u1855
  7629  00654E                     u1857:
  7630  00654E  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7631  006552  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7632  006556  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7633  00655A  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7634                           
  7635                           ;fft.c: 240: b = c & 0x01;
  7636  00655E  0E01               	movlw	1
  7637  006560  1449               	andwf	fix_fft@c,w,c
  7638  006562  6E37               	movwf	fix_fft@b,c
  7639  006564  6A38               	clrf	fix_fft@b+1,c
  7640                           
  7641                           ;fft.c: 241: ti = (c >> 1) + b;
  7642  006566  C049  F013         	movff	fix_fft@c,??_fix_fft
  7643  00656A  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7644  00656E  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7645  006572  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7646  006576  3416               	rlcf	??_fix_fft+3,w,c
  7647  006578  3216               	rrcf	??_fix_fft+3,f,c
  7648  00657A  3215               	rrcf	??_fix_fft+2,f,c
  7649  00657C  3214               	rrcf	??_fix_fft+1,f,c
  7650  00657E  3213               	rrcf	??_fix_fft,f,c
  7651  006580  5037               	movf	fix_fft@b,w,c
  7652  006582  2413               	addwf	??_fix_fft,w,c
  7653  006584  6E35               	movwf	fix_fft@ti,c
  7654  006586  5038               	movf	fix_fft@b+1,w,c
  7655  006588  2014               	addwfc	??_fix_fft+1,w,c
  7656  00658A  6E36               	movwf	fix_fft@ti+1,c
  7657                           
  7658                           ;fft.c: 243: c = ((long int)wi * (long int)fr[j]);
  7659  00658C  C02D  F001         	movff	fix_fft@wi,___lmul@multiplier
  7660  006590  C02E  F002         	movff	fix_fft@wi+1,___lmul@multiplier+1
  7661  006594  0E00               	movlw	0
  7662  006596  BE02               	btfsc	___lmul@multiplier+1,7,c
  7663  006598  0EFF               	movlw	-1
  7664  00659A  6E03               	movwf	___lmul@multiplier+2,c
  7665  00659C  6E04               	movwf	___lmul@multiplier+3,c
  7666  00659E  90D8               	bcf	status,0,c
  7667  0065A0  3445               	rlcf	fix_fft@j,w,c
  7668  0065A2  6ED9               	movwf	fsr2l,c
  7669  0065A4  3446               	rlcf	fix_fft@j+1,w,c
  7670  0065A6  6EDA               	movwf	fsr2h,c
  7671  0065A8  500D               	movf	fix_fft@fr,w,c
  7672  0065AA  26D9               	addwf	fsr2l,f,c
  7673  0065AC  500E               	movf	fix_fft@fr+1,w,c
  7674  0065AE  22DA               	addwfc	fsr2h,f,c
  7675  0065B0  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7676  0065B4  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7677  0065B8  0E00               	movlw	0
  7678  0065BA  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7679  0065BC  0EFF               	movlw	-1
  7680  0065BE  6E07               	movwf	___lmul@multiplicand+2,c
  7681  0065C0  6E08               	movwf	___lmul@multiplicand+3,c
  7682  0065C2  ECFD  F02C         	call	___lmul	;wreg free
  7683  0065C6  C001  F049         	movff	?___lmul,fix_fft@c
  7684  0065CA  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7685  0065CE  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7686  0065D2  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7687                           
  7688                           ;fft.c: 244: c = c >> 14;
  7689  0065D6  0E0E               	movlw	14
  7690  0065D8  6E13               	movwf	??_fix_fft& (0+255),c
  7691  0065DA  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7692  0065DE  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7693  0065E2  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7694  0065E6  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7695  0065EA                     u1865:
  7696  0065EA  6613               	tstfsz	??_fix_fft,c
  7697  0065EC  D001               	goto	u1866
  7698  0065EE  D007               	goto	u1867
  7699  0065F0                     u1866:
  7700  0065F0  3417               	rlcf	??_fix_fft+4,w,c
  7701  0065F2  3217               	rrcf	??_fix_fft+4,f,c
  7702  0065F4  3216               	rrcf	??_fix_fft+3,f,c
  7703  0065F6  3215               	rrcf	??_fix_fft+2,f,c
  7704  0065F8  3214               	rrcf	??_fix_fft+1,f,c
  7705  0065FA  2E13               	decfsz	??_fix_fft,f,c
  7706  0065FC  D7F6               	goto	u1865
  7707  0065FE                     u1867:
  7708  0065FE  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7709  006602  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7710  006606  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7711  00660A  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7712                           
  7713                           ;fft.c: 245: b = c & 0x01;
  7714  00660E  0E01               	movlw	1
  7715  006610  1449               	andwf	fix_fft@c,w,c
  7716  006612  6E37               	movwf	fix_fft@b,c
  7717  006614  6A38               	clrf	fix_fft@b+1,c
  7718                           
  7719                           ;fft.c: 246: ti = ti + ((c >> 1) + b);
  7720  006616  C049  F013         	movff	fix_fft@c,??_fix_fft
  7721  00661A  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7722  00661E  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7723  006622  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7724  006626  3416               	rlcf	??_fix_fft+3,w,c
  7725  006628  3216               	rrcf	??_fix_fft+3,f,c
  7726  00662A  3215               	rrcf	??_fix_fft+2,f,c
  7727  00662C  3214               	rrcf	??_fix_fft+1,f,c
  7728  00662E  3213               	rrcf	??_fix_fft,f,c
  7729  006630  5037               	movf	fix_fft@b,w,c
  7730  006632  2613               	addwf	??_fix_fft,f,c
  7731  006634  5038               	movf	fix_fft@b+1,w,c
  7732  006636  2214               	addwfc	??_fix_fft+1,f,c
  7733  006638  5035               	movf	fix_fft@ti,w,c
  7734  00663A  2413               	addwf	??_fix_fft,w,c
  7735  00663C  6E35               	movwf	fix_fft@ti,c
  7736  00663E  5036               	movf	fix_fft@ti+1,w,c
  7737  006640  2014               	addwfc	??_fix_fft+1,w,c
  7738  006642  6E36               	movwf	fix_fft@ti+1,c
  7739                           
  7740                           ;fft.c: 248: qr = fr[i];
  7741  006644  90D8               	bcf	status,0,c
  7742  006646  3439               	rlcf	fix_fft@i,w,c
  7743  006648  6ED9               	movwf	fsr2l,c
  7744  00664A  343A               	rlcf	fix_fft@i+1,w,c
  7745  00664C  6EDA               	movwf	fsr2h,c
  7746  00664E  500D               	movf	fix_fft@fr,w,c
  7747  006650  26D9               	addwf	fsr2l,f,c
  7748  006652  500E               	movf	fix_fft@fr+1,w,c
  7749  006654  22DA               	addwfc	fsr2h,f,c
  7750  006656  CFDE F027          	movff	postinc2,fix_fft@qr
  7751  00665A  CFDD F028          	movff	postdec2,fix_fft@qr+1
  7752                           
  7753                           ;fft.c: 249: qi = fi[i];
  7754  00665E  90D8               	bcf	status,0,c
  7755  006660  3439               	rlcf	fix_fft@i,w,c
  7756  006662  6ED9               	movwf	fsr2l,c
  7757  006664  343A               	rlcf	fix_fft@i+1,w,c
  7758  006666  6EDA               	movwf	fsr2h,c
  7759  006668  500F               	movf	fix_fft@fi,w,c
  7760  00666A  26D9               	addwf	fsr2l,f,c
  7761  00666C  5010               	movf	fix_fft@fi+1,w,c
  7762  00666E  22DA               	addwfc	fsr2h,f,c
  7763  006670  CFDE F029          	movff	postinc2,fix_fft@qi
  7764  006674  CFDD F02A          	movff	postdec2,fix_fft@qi+1
  7765                           
  7766                           ;fft.c: 250: qr >>= 1;
  7767  006678  3428               	rlcf	fix_fft@qr+1,w,c
  7768  00667A  3228               	rrcf	fix_fft@qr+1,f,c
  7769  00667C  3227               	rrcf	fix_fft@qr,f,c
  7770                           
  7771                           ;fft.c: 251: qi >>= 1;
  7772  00667E  342A               	rlcf	fix_fft@qi+1,w,c
  7773  006680  322A               	rrcf	fix_fft@qi+1,f,c
  7774  006682  3229               	rrcf	fix_fft@qi,f,c
  7775                           
  7776                           ;fft.c: 253: fr[j] = qr - tr;
  7777  006684  C033  F013         	movff	fix_fft@tr,??_fix_fft
  7778  006688  C034  F014         	movff	fix_fft@tr+1,??_fix_fft+1
  7779  00668C  1E13               	comf	??_fix_fft,f,c
  7780  00668E  1E14               	comf	??_fix_fft+1,f,c
  7781  006690  4A13               	infsnz	??_fix_fft,f,c
  7782  006692  2A14               	incf	??_fix_fft+1,f,c
  7783  006694  5027               	movf	fix_fft@qr,w,c
  7784  006696  2613               	addwf	??_fix_fft,f,c
  7785  006698  5028               	movf	fix_fft@qr+1,w,c
  7786  00669A  2214               	addwfc	??_fix_fft+1,f,c
  7787  00669C  90D8               	bcf	status,0,c
  7788  00669E  3445               	rlcf	fix_fft@j,w,c
  7789  0066A0  6ED9               	movwf	fsr2l,c
  7790  0066A2  3446               	rlcf	fix_fft@j+1,w,c
  7791  0066A4  6EDA               	movwf	fsr2h,c
  7792  0066A6  500D               	movf	fix_fft@fr,w,c
  7793  0066A8  26D9               	addwf	fsr2l,f,c
  7794  0066AA  500E               	movf	fix_fft@fr+1,w,c
  7795  0066AC  22DA               	addwfc	fsr2h,f,c
  7796  0066AE  C013  FFDE         	movff	??_fix_fft,postinc2
  7797  0066B2  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7798                           
  7799                           ;fft.c: 254: fi[j] = qi - ti;
  7800  0066B6  C035  F013         	movff	fix_fft@ti,??_fix_fft
  7801  0066BA  C036  F014         	movff	fix_fft@ti+1,??_fix_fft+1
  7802  0066BE  1E13               	comf	??_fix_fft,f,c
  7803  0066C0  1E14               	comf	??_fix_fft+1,f,c
  7804  0066C2  4A13               	infsnz	??_fix_fft,f,c
  7805  0066C4  2A14               	incf	??_fix_fft+1,f,c
  7806  0066C6  5029               	movf	fix_fft@qi,w,c
  7807  0066C8  2613               	addwf	??_fix_fft,f,c
  7808  0066CA  502A               	movf	fix_fft@qi+1,w,c
  7809  0066CC  2214               	addwfc	??_fix_fft+1,f,c
  7810  0066CE  90D8               	bcf	status,0,c
  7811  0066D0  3445               	rlcf	fix_fft@j,w,c
  7812  0066D2  6ED9               	movwf	fsr2l,c
  7813  0066D4  3446               	rlcf	fix_fft@j+1,w,c
  7814  0066D6  6EDA               	movwf	fsr2h,c
  7815  0066D8  500F               	movf	fix_fft@fi,w,c
  7816  0066DA  26D9               	addwf	fsr2l,f,c
  7817  0066DC  5010               	movf	fix_fft@fi+1,w,c
  7818  0066DE  22DA               	addwfc	fsr2h,f,c
  7819  0066E0  C013  FFDE         	movff	??_fix_fft,postinc2
  7820  0066E4  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7821                           
  7822                           ;fft.c: 255: fr[i] = qr + tr;
  7823  0066E8  C027  F013         	movff	fix_fft@qr,??_fix_fft
  7824  0066EC  C028  F014         	movff	fix_fft@qr+1,??_fix_fft+1
  7825  0066F0  5033               	movf	fix_fft@tr,w,c
  7826  0066F2  2613               	addwf	??_fix_fft,f,c
  7827  0066F4  5034               	movf	fix_fft@tr+1,w,c
  7828  0066F6  2214               	addwfc	??_fix_fft+1,f,c
  7829  0066F8  90D8               	bcf	status,0,c
  7830  0066FA  3439               	rlcf	fix_fft@i,w,c
  7831  0066FC  6ED9               	movwf	fsr2l,c
  7832  0066FE  343A               	rlcf	fix_fft@i+1,w,c
  7833  006700  6EDA               	movwf	fsr2h,c
  7834  006702  500D               	movf	fix_fft@fr,w,c
  7835  006704  26D9               	addwf	fsr2l,f,c
  7836  006706  500E               	movf	fix_fft@fr+1,w,c
  7837  006708  22DA               	addwfc	fsr2h,f,c
  7838  00670A  C013  FFDE         	movff	??_fix_fft,postinc2
  7839  00670E  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7840                           
  7841                           ;fft.c: 256: fi[i] = qi + ti;
  7842  006712  C029  F013         	movff	fix_fft@qi,??_fix_fft
  7843  006716  C02A  F014         	movff	fix_fft@qi+1,??_fix_fft+1
  7844  00671A  5035               	movf	fix_fft@ti,w,c
  7845  00671C  2613               	addwf	??_fix_fft,f,c
  7846  00671E  5036               	movf	fix_fft@ti+1,w,c
  7847  006720  2214               	addwfc	??_fix_fft+1,f,c
  7848  006722  90D8               	bcf	status,0,c
  7849  006724  3439               	rlcf	fix_fft@i,w,c
  7850  006726  6ED9               	movwf	fsr2l,c
  7851  006728  343A               	rlcf	fix_fft@i+1,w,c
  7852  00672A  6EDA               	movwf	fsr2h,c
  7853  00672C  500F               	movf	fix_fft@fi,w,c
  7854  00672E  26D9               	addwf	fsr2l,f,c
  7855  006730  5010               	movf	fix_fft@fi+1,w,c
  7856  006732  22DA               	addwfc	fsr2h,f,c
  7857  006734  C013  FFDE         	movff	??_fix_fft,postinc2
  7858  006738  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7859  00673C  5023               	movf	fix_fft@istep,w,c
  7860  00673E  2639               	addwf	fix_fft@i,f,c
  7861  006740  5024               	movf	fix_fft@istep+1,w,c
  7862  006742  223A               	addwfc	fix_fft@i+1,f,c
  7863  006744  5025               	movf	fix_fft@istep+2,w,c
  7864  006746  223B               	addwfc	fix_fft@i+2,f,c
  7865  006748  5026               	movf	fix_fft@istep+3,w,c
  7866  00674A  223C               	addwfc	fix_fft@i+3,f,c
  7867  00674C                     l2429:
  7868  00674C  503C               	movf	fix_fft@i+3,w,c
  7869  00674E  0A80               	xorlw	128
  7870  006750  6E13               	movwf	??_fix_fft& (0+255),c
  7871  006752  502F               	movf	fix_fft@n,w,c
  7872  006754  5C39               	subwf	fix_fft@i,w,c
  7873  006756  5030               	movf	fix_fft@n+1,w,c
  7874  006758  583A               	subwfb	fix_fft@i+1,w,c
  7875  00675A  5031               	movf	fix_fft@n+2,w,c
  7876  00675C  583B               	subwfb	fix_fft@i+2,w,c
  7877  00675E  5032               	movf	fix_fft@n+3,w,c
  7878  006760  0A80               	xorlw	128
  7879  006762  5813               	subwfb	??_fix_fft& (0+255),w,c
  7880  006764  A0D8               	btfss	status,0,c
  7881  006766  D5F6               	goto	l2385
  7882  006768  4A11               	infsnz	fix_fft@m,f,c
  7883  00676A  2A12               	incf	fix_fft@m+1,f,c
  7884  00676C                     l2433:
  7885  00676C  C011  F013         	movff	fix_fft@m,??_fix_fft
  7886  006770  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  7887  006774  0E00               	movlw	0
  7888  006776  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  7889  006778  0EFF               	movlw	255
  7890  00677A  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7891  00677C  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7892  00677E  5016               	movf	??_fix_fft+3,w,c
  7893  006780  0A80               	xorlw	128
  7894  006782  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7895  006784  5041               	movf	fix_fft@l,w,c
  7896  006786  5C13               	subwf	??_fix_fft,w,c
  7897  006788  5042               	movf	fix_fft@l+1,w,c
  7898  00678A  5814               	subwfb	??_fix_fft+1,w,c
  7899  00678C  5043               	movf	fix_fft@l+2,w,c
  7900  00678E  5815               	subwfb	??_fix_fft+2,w,c
  7901  006790  5044               	movf	fix_fft@l+3,w,c
  7902  006792  0A80               	xorlw	128
  7903  006794  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7904  006796  A0D8               	btfss	status,0,c
  7905  006798  D581               	goto	l2377
  7906                           
  7907                           ;fft.c: 257: }
  7908                           ;fft.c: 258: }
  7909                           ;fft.c: 260: --k;
  7910  00679A  0EFF               	movlw	255
  7911  00679C  261B               	addwf	fix_fft@k,f,c
  7912  00679E  0EFF               	movlw	255
  7913  0067A0  221C               	addwfc	fix_fft@k+1,f,c
  7914  0067A2  0EFF               	movlw	255
  7915  0067A4  221D               	addwfc	fix_fft@k+2,f,c
  7916  0067A6  0EFF               	movlw	255
  7917  0067A8  221E               	addwfc	fix_fft@k+3,f,c
  7918                           
  7919                           ;fft.c: 261: l = istep;
  7920  0067AA  C023  F041         	movff	fix_fft@istep,fix_fft@l
  7921  0067AE  C024  F042         	movff	fix_fft@istep+1,fix_fft@l+1
  7922  0067B2  C025  F043         	movff	fix_fft@istep+2,fix_fft@l+2
  7923  0067B6  C026  F044         	movff	fix_fft@istep+3,fix_fft@l+3
  7924  0067BA                     l213:
  7925  0067BA  5044               	movf	fix_fft@l+3,w,c
  7926  0067BC  0A80               	xorlw	128
  7927  0067BE  6E13               	movwf	??_fix_fft& (0+255),c
  7928  0067C0  502F               	movf	fix_fft@n,w,c
  7929  0067C2  5C41               	subwf	fix_fft@l,w,c
  7930  0067C4  5030               	movf	fix_fft@n+1,w,c
  7931  0067C6  5842               	subwfb	fix_fft@l+1,w,c
  7932  0067C8  5031               	movf	fix_fft@n+2,w,c
  7933  0067CA  5843               	subwfb	fix_fft@l+2,w,c
  7934  0067CC  5032               	movf	fix_fft@n+3,w,c
  7935  0067CE  0A80               	xorlw	128
  7936  0067D0  5813               	subwfb	??_fix_fft& (0+255),w,c
  7937  0067D2  B0D8               	btfsc	status,0,c
  7938  0067D4  0012               	return	
  7939  0067D6  D554               	goto	l2373
  7940  0067D8                     __end_of_fix_fft:
  7941                           	opt stack 0
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           intcon	equ	0xFF2
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           indf1	equ	0xFE7
  7952                           postinc1	equ	0xFE6
  7953                           postdec1	equ	0xFE5
  7954                           fsr1h	equ	0xFE2
  7955                           fsr1l	equ	0xFE1
  7956                           indf2	equ	0xFDF
  7957                           postinc2	equ	0xFDE
  7958                           postdec2	equ	0xFDD
  7959                           fsr2h	equ	0xFDA
  7960                           fsr2l	equ	0xFD9
  7961                           status	equ	0xFD8
  7962                           
  7963 ;; *************** function ___lmul *****************
  7964 ;; Defined at:
  7965 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  multiplier      4    0[COMRAM] unsigned long 
  7968 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  product         4    8[COMRAM] unsigned long 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  4    0[COMRAM] unsigned long 
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7980 ;;      Params:         8       0       0       0       0       0       0
  7981 ;;      Locals:         4       0       0       0       0       0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0
  7983 ;;      Totals:        12       0       0       0       0       0       0
  7984 ;;Total ram usage:       12 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; This function calls:
  7987 ;;		Nothing
  7988 ;; This function is called by:
  7989 ;;		_fix_fft
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text24
  7994  0059FA                     __ptext24:
  7995                           	opt stack 0
  7996  0059FA                     ___lmul:
  7997                           	opt stack 29
  7998                           
  7999                           ;incstack = 0
  8000  0059FA  0E00               	movlw	0
  8001  0059FC  6E09               	movwf	___lmul@product,c
  8002  0059FE  0E00               	movlw	0
  8003  005A00  6E0A               	movwf	___lmul@product+1,c
  8004  005A02  0E00               	movlw	0
  8005  005A04  6E0B               	movwf	___lmul@product+2,c
  8006  005A06  0E00               	movlw	0
  8007  005A08  6E0C               	movwf	___lmul@product+3,c
  8008  005A0A                     l2293:
  8009  005A0A  A001               	btfss	___lmul@multiplier,0,c
  8010  005A0C  D008               	goto	l2297
  8011  005A0E  5005               	movf	___lmul@multiplicand,w,c
  8012  005A10  2609               	addwf	___lmul@product,f,c
  8013  005A12  5006               	movf	___lmul@multiplicand+1,w,c
  8014  005A14  220A               	addwfc	___lmul@product+1,f,c
  8015  005A16  5007               	movf	___lmul@multiplicand+2,w,c
  8016  005A18  220B               	addwfc	___lmul@product+2,f,c
  8017  005A1A  5008               	movf	___lmul@multiplicand+3,w,c
  8018  005A1C  220C               	addwfc	___lmul@product+3,f,c
  8019  005A1E                     l2297:
  8020  005A1E  90D8               	bcf	status,0,c
  8021  005A20  3605               	rlcf	___lmul@multiplicand,f,c
  8022  005A22  3606               	rlcf	___lmul@multiplicand+1,f,c
  8023  005A24  3607               	rlcf	___lmul@multiplicand+2,f,c
  8024  005A26  3608               	rlcf	___lmul@multiplicand+3,f,c
  8025  005A28  90D8               	bcf	status,0,c
  8026  005A2A  3204               	rrcf	___lmul@multiplier+3,f,c
  8027  005A2C  3203               	rrcf	___lmul@multiplier+2,f,c
  8028  005A2E  3202               	rrcf	___lmul@multiplier+1,f,c
  8029  005A30  3201               	rrcf	___lmul@multiplier,f,c
  8030  005A32  5004               	movf	___lmul@multiplier+3,w,c
  8031  005A34  1001               	iorwf	___lmul@multiplier,w,c
  8032  005A36  1002               	iorwf	___lmul@multiplier+1,w,c
  8033  005A38  1003               	iorwf	___lmul@multiplier+2,w,c
  8034  005A3A  A4D8               	btfss	status,2,c
  8035  005A3C  D7E6               	goto	l2293
  8036  005A3E  C009  F001         	movff	___lmul@product,?___lmul
  8037  005A42  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  8038  005A46  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  8039  005A4A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  8040  005A4E  0012               	return	
  8041  005A50                     __end_of___lmul:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           intcon	equ	0xFF2
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           indf1	equ	0xFE7
  8053                           postinc1	equ	0xFE6
  8054                           postdec1	equ	0xFE5
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function ___awdiv *****************
  8065 ;; Defined at:
  8066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  dividend        2    6[COMRAM] int 
  8069 ;;  divisor         2    8[COMRAM] int 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  quotient        2   12[COMRAM] int 
  8072 ;;  sign            1   11[COMRAM] unsigned char 
  8073 ;;  counter         1   10[COMRAM] unsigned char 
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  2    6[COMRAM] int 
  8076 ;; Registers used:
  8077 ;;		wreg, status,2, status,0, prodl
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8083 ;;      Params:         4       0       0       0       0       0       0
  8084 ;;      Locals:         4       0       0       0       0       0       0
  8085 ;;      Temps:          0       0       0       0       0       0       0
  8086 ;;      Totals:         8       0       0       0       0       0       0
  8087 ;;Total ram usage:        8 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; This function calls:
  8090 ;;		Nothing
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text25
  8097  005C18                     __ptext25:
  8098                           	opt stack 0
  8099  005C18                     ___awdiv:
  8100                           	opt stack 30
  8101                           
  8102                           ;incstack = 0
  8103  005C18  0E00               	movlw	0
  8104  005C1A  6E0C               	movwf	___awdiv@sign,c
  8105  005C1C  500A               	movf	___awdiv@divisor+1,w,c
  8106  005C1E  0A80               	xorlw	128
  8107  005C20  6EF3               	movwf	prodl,c
  8108  005C22  0E80               	movlw	128
  8109  005C24  5CF3               	subwf	prodl,w,c
  8110  005C26  0E00               	movlw	0
  8111  005C28  B4D8               	btfsc	status,2,c
  8112  005C2A  5C09               	subwf	___awdiv@divisor,w,c
  8113  005C2C  B0D8               	btfsc	status,0,c
  8114  005C2E  D006               	goto	l2457
  8115  005C30  6C09               	negf	___awdiv@divisor,c
  8116  005C32  1E0A               	comf	___awdiv@divisor+1,f,c
  8117  005C34  B0D8               	btfsc	status,0,c
  8118  005C36  2A0A               	incf	___awdiv@divisor+1,f,c
  8119  005C38  0E01               	movlw	1
  8120  005C3A  6E0C               	movwf	___awdiv@sign,c
  8121  005C3C                     l2457:
  8122  005C3C  5008               	movf	___awdiv@dividend+1,w,c
  8123  005C3E  0A80               	xorlw	128
  8124  005C40  6EF3               	movwf	prodl,c
  8125  005C42  0E80               	movlw	128
  8126  005C44  5CF3               	subwf	prodl,w,c
  8127  005C46  0E00               	movlw	0
  8128  005C48  B4D8               	btfsc	status,2,c
  8129  005C4A  5C07               	subwf	___awdiv@dividend,w,c
  8130  005C4C  B0D8               	btfsc	status,0,c
  8131  005C4E  D006               	goto	l2463
  8132  005C50  6C07               	negf	___awdiv@dividend,c
  8133  005C52  1E08               	comf	___awdiv@dividend+1,f,c
  8134  005C54  B0D8               	btfsc	status,0,c
  8135  005C56  2A08               	incf	___awdiv@dividend+1,f,c
  8136  005C58  0E01               	movlw	1
  8137  005C5A  1A0C               	xorwf	___awdiv@sign,f,c
  8138  005C5C                     l2463:
  8139  005C5C  0E00               	movlw	0
  8140  005C5E  6E0E               	movwf	___awdiv@quotient+1,c
  8141  005C60  0E00               	movlw	0
  8142  005C62  6E0D               	movwf	___awdiv@quotient,c
  8143  005C64  500A               	movf	___awdiv@divisor+1,w,c
  8144  005C66  1009               	iorwf	___awdiv@divisor,w,c
  8145  005C68  B4D8               	btfsc	status,2,c
  8146  005C6A  D01C               	goto	l2485
  8147  005C6C  0E01               	movlw	1
  8148  005C6E  6E0B               	movwf	___awdiv@counter,c
  8149  005C70  D004               	goto	l2471
  8150  005C72                     l2469:
  8151  005C72  90D8               	bcf	status,0,c
  8152  005C74  3609               	rlcf	___awdiv@divisor,f,c
  8153  005C76  360A               	rlcf	___awdiv@divisor+1,f,c
  8154  005C78  2A0B               	incf	___awdiv@counter,f,c
  8155  005C7A                     l2471:
  8156  005C7A  AE0A               	btfss	___awdiv@divisor+1,7,c
  8157  005C7C  D7FA               	goto	l2469
  8158  005C7E                     l2473:
  8159  005C7E  90D8               	bcf	status,0,c
  8160  005C80  360D               	rlcf	___awdiv@quotient,f,c
  8161  005C82  360E               	rlcf	___awdiv@quotient+1,f,c
  8162  005C84  5009               	movf	___awdiv@divisor,w,c
  8163  005C86  5C07               	subwf	___awdiv@dividend,w,c
  8164  005C88  500A               	movf	___awdiv@divisor+1,w,c
  8165  005C8A  5808               	subwfb	___awdiv@dividend+1,w,c
  8166  005C8C  A0D8               	btfss	status,0,c
  8167  005C8E  D005               	goto	l2481
  8168  005C90  5009               	movf	___awdiv@divisor,w,c
  8169  005C92  5E07               	subwf	___awdiv@dividend,f,c
  8170  005C94  500A               	movf	___awdiv@divisor+1,w,c
  8171  005C96  5A08               	subwfb	___awdiv@dividend+1,f,c
  8172  005C98  800D               	bsf	___awdiv@quotient,0,c
  8173  005C9A                     l2481:
  8174  005C9A  90D8               	bcf	status,0,c
  8175  005C9C  320A               	rrcf	___awdiv@divisor+1,f,c
  8176  005C9E  3209               	rrcf	___awdiv@divisor,f,c
  8177  005CA0  2E0B               	decfsz	___awdiv@counter,f,c
  8178  005CA2  D7ED               	goto	l2473
  8179  005CA4                     l2485:
  8180  005CA4  500C               	movf	___awdiv@sign,w,c
  8181  005CA6  B4D8               	btfsc	status,2,c
  8182  005CA8  D004               	goto	l2489
  8183  005CAA  6C0D               	negf	___awdiv@quotient,c
  8184  005CAC  1E0E               	comf	___awdiv@quotient+1,f,c
  8185  005CAE  B0D8               	btfsc	status,0,c
  8186  005CB0  2A0E               	incf	___awdiv@quotient+1,f,c
  8187  005CB2                     l2489:
  8188  005CB2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  8189  005CB6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  8190  005CBA  0012               	return	
  8191  005CBC                     __end_of___awdiv:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           indf1	equ	0xFE7
  8203                           postinc1	equ	0xFE6
  8204                           postdec1	equ	0xFE5
  8205                           fsr1h	equ	0xFE2
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           fsr2h	equ	0xFDA
  8211                           fsr2l	equ	0xFD9
  8212                           status	equ	0xFD8
  8213                           
  8214 ;; *************** function _ConvertADC *****************
  8215 ;; Defined at:
  8216 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcconv.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;		None               void
  8223 ;; Registers used:
  8224 ;;		None
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8230 ;;      Params:         0       0       0       0       0       0       0
  8231 ;;      Locals:         0       0       0       0       0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0
  8233 ;;      Totals:         0       0       0       0       0       0       0
  8234 ;;Total ram usage:        0 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; This function calls:
  8237 ;;		Nothing
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text26
  8244  005730                     __ptext26:
  8245                           	opt stack 0
  8246  005730                     _ConvertADC:
  8247                           	opt stack 30
  8248                           
  8249                           ;incstack = 0
  8250  005730  82C2               	bsf	4034,1,c	;volatile
  8251  005732  0012               	return	
  8252  005734                     __end_of_ConvertADC:
  8253                           	opt stack 0
  8254                           tblptru	equ	0xFF8
  8255                           tblptrh	equ	0xFF7
  8256                           tblptrl	equ	0xFF6
  8257                           tablat	equ	0xFF5
  8258                           prodh	equ	0xFF4
  8259                           prodl	equ	0xFF3
  8260                           intcon	equ	0xFF2
  8261                           postinc0	equ	0xFEE
  8262                           wreg	equ	0xFE8
  8263                           indf1	equ	0xFE7
  8264                           postinc1	equ	0xFE6
  8265                           postdec1	equ	0xFE5
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function _BusyADC *****************
  8276 ;; Defined at:
  8277 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcbusy.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;		None
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  1    wreg      unsigned char 
  8284 ;; Registers used:
  8285 ;;		wreg
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8291 ;;      Params:         0       0       0       0       0       0       0
  8292 ;;      Locals:         0       0       0       0       0       0       0
  8293 ;;      Temps:          0       0       0       0       0       0       0
  8294 ;;      Totals:         0       0       0       0       0       0       0
  8295 ;;Total ram usage:        0 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_main
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text27
  8305  005734                     __ptext27:
  8306                           	opt stack 0
  8307  005734                     _BusyADC:
  8308                           	opt stack 30
  8309                           
  8310                           ;incstack = 0
  8311  005734  A2C2               	btfss	4034,1,c	;volatile
  8312  005736  D002               	goto	u1770
  8313  005738  0E01               	movlw	1
  8314  00573A  0012               	return	
  8315  00573C                     u1770:
  8316  00573C  0E00               	movlw	0
  8317  00573E  0012               	return	
  8318  005740                     __end_of_BusyADC:
  8319                           	opt stack 0
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           indf1	equ	0xFE7
  8330                           postinc1	equ	0xFE6
  8331                           postdec1	equ	0xFE5
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           tblptru	equ	0xFF8
  8341                           tblptrh	equ	0xFF7
  8342                           tblptrl	equ	0xFF6
  8343                           tablat	equ	0xFF5
  8344                           prodh	equ	0xFF4
  8345                           prodl	equ	0xFF3
  8346                           intcon	equ	0xFF2
  8347                           postinc0	equ	0xFEE
  8348                           wreg	equ	0xFE8
  8349                           indf1	equ	0xFE7
  8350                           postinc1	equ	0xFE6
  8351                           postdec1	equ	0xFE5
  8352                           fsr1h	equ	0xFE2
  8353                           fsr1l	equ	0xFE1
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           postdec2	equ	0xFDD
  8357                           fsr2h	equ	0xFDA
  8358                           fsr2l	equ	0xFD9
  8359                           status	equ	0xFD8
  8360                           
  8361                           	psect	rparam
  8362  0000                     tblptru	equ	0xFF8
  8363                           tblptrh	equ	0xFF7
  8364                           tblptrl	equ	0xFF6
  8365                           tablat	equ	0xFF5
  8366                           prodh	equ	0xFF4
  8367                           prodl	equ	0xFF3
  8368                           intcon	equ	0xFF2
  8369                           postinc0	equ	0xFEE
  8370                           wreg	equ	0xFE8
  8371                           indf1	equ	0xFE7
  8372                           postinc1	equ	0xFE6
  8373                           postdec1	equ	0xFE5
  8374                           fsr1h	equ	0xFE2
  8375                           fsr1l	equ	0xFE1
  8376                           indf2	equ	0xFDF
  8377                           postinc2	equ	0xFDE
  8378                           postdec2	equ	0xFDD
  8379                           fsr2h	equ	0xFDA
  8380                           fsr2l	equ	0xFD9
  8381                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    2358
    Data        0
    BSS         981
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      95
    BANK0           160     14     115
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> writeGuess@percent(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S786$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LCDStr@dataPtr	PTR const unsigned char  size(2) Largest target is 8
		 -> writeGuess@percent(COMRAM[8]), 

    fix_fft@fi	PTR short  size(2) Largest target is 128
		 -> imaginary_numbers(BANK1[128]), 

    fix_fft@fr	PTR short  size(2) Largest target is 128
		 -> real_numbers(BANK1[128]), 

    sendIntArray@array	PTR short  size(2) Largest target is 128
		 -> guesses(BANK0[10]), real_numbers(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main->_fix_fft
    _writeGuess->_sprintf
    _sprintf->___lwmod
    _LCDStr->_LCDChrXY
    _LCDChrXY->___lwmod
    ___lwmod->___lwdiv
    _LCDInit->_LCDUpdate
    _LCDUpdate->_LCDSend
    _LCDSend->___wmul
    _sendIntArray->_sendChar
    _sendChar->_Write1USART
    _fix_fft->___lmul
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   20382
                                             76 COMRAM    13    13      0
                                              0 BANK0     14    14      0
                            _BusyADC
                         _ConvertADC
                            ___awdiv
                             ___wmul
                            _fix_fft
                       _sendIntArray
                              _setup
                         _writeGuess
 ---------------------------------------------------------------------------------
 (1) _writeGuess                                          13     9      4    8188
                                             34 COMRAM    13     9      4
                             _LCDStr
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    12     10    1715
                                             12 COMRAM    22    12     10
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCDStr                                               5     2      3    5949
                                             25 COMRAM     5     2      3
                           _LCDChrXY
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (3) _LCDChrXY                                            13    11      2    3014
                                             12 COMRAM    13    11      2
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     795
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    4630
                            _LCDInit
                         _Open1USART
                            _OpenADC
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (2) _OpenSPI1                                             3     1      2     194
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     238
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           6     4      2     273
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              0     0      0    3925
                              _Delay
                     _Initialize_SPI
                           _LCDClear
                            _LCDSend
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (3) _LCDUpdate                                            4     4      0    2738
                                              8 COMRAM     4     4      0
                            _LCDSend
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1749
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _LCDSend                                              2     1      1     831
                                              6 COMRAM     2     1      1
                        _Delay10TCYx
                          _WriteSPI1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _WriteSPI1                                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Initialize_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                4     0      4     288
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _sendIntArray                                         4     0      4     300
                                              2 COMRAM     4     0      4
                           _sendChar
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0      44
                                              1 COMRAM     1     1      0
                        _Write1USART
 ---------------------------------------------------------------------------------
 (3) _Write1USART                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _fix_fft                                             64    58      6    2782
                                             12 COMRAM    64    58      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     444
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _fix_fft
     ___lmul
   _sendIntArray
     _sendChar
       _Write1USART
   _setup
     _LCDInit
       _Delay
       _Initialize_SPI
       _LCDClear
       _LCDSend
         _Delay10TCYx
         _WriteSPI1
         ___wmul (ARG)
       _LCDUpdate
         _LCDSend
           _Delay10TCYx
           _WriteSPI1
           ___wmul (ARG)
         ___wmul
     _Open1USART
     _OpenADC
     _OpenSPI1
   _writeGuess
     _LCDStr
       _LCDChrXY
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
       _LCDUpdate
         _LCDSend
           _Delay10TCYx
           _WriteSPI1
           ___wmul (ARG)
         ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     26A      16       40.3%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      E      73       4       71.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D2       9        0.0%
DATA                 0      0     43C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Dec 08 10:57:02 2014

                          _i 005C                 ___awdiv@sign 000C          ___wmul@multiplicand 0003  
                        l213 67BA                          l207 60A8                          l163 766C  
                        l405 57A0                          l270 57B6                          l431 5ADA  
                        l192 5742                          l248 577C                          l433 5AE4  
                        l434 5AE6                          l427 5AC8                          l364 59A4  
                        l381 5A64                          l390 5A8A                          l383 5A68  
                        l384 5A6A                          l387 5A84                          l388 5A9E  
                        l389 5A86                          l684 5750                          l980 59F0  
                        l990 5906                          wreg 000FE8                   _TXSTA1bits 000FAC  
                _total_tally 00B1              __end_of_LCDInit 5D76                 __CFG_LVP$OFF 000000  
            __end_of_LCDSend 57CE                         l2105 5A6E                         l2043 5DAE  
                       l2029 5B82                         l2109 5A8E                         l2221 5EFE  
                       l2063 5E78                         l2039 5DA0                         l2081 59C6  
                       l2217 5EEA                         l2209 5EDC                         l2059 5E4E  
                       l2091 59E6                         l2083 59CA                         l2227 5F10  
                       l2261 5FCE                         l2253 5FAC                         l2229 5F3C  
                       l2351 60B8                         l2079 59BE                         l2239 5F74  
                       l2271 603E                         l2433 676C                         l2185 5ACA  
                       l2177 5ABC                         l2505 680A                         l2443 582C  
                       l2283 587A                         l2267 6020                         l2259 5FC8  
                       l2293 5A0A                         l2429 674C                         l2373 6280  
                       l2197 5ADC                         l2277 585E                         l2269 6028  
                       l2621 6FD4                         l2605 6F1E                         l2541 6AB8  
                       l2517 689A                         l2471 5C7A                         l2463 5C5C  
                       l2367 622C                         l2447 5848                         l2711 7446  
                       l2551 6C16                         l2481 5C9A                         l2473 5C7E  
                       l2457 5C3C                         l2297 5A1E                         l2385 6354  
                       l2377 629C                         l2369 6230                         l2641 70F4  
                       l2617 6FB0                         l2537 6A1A                         l2553 6C24  
                       l2707 743E                         l2571 6D52                         l2547 6BA4  
                       l2539 6A5A                         l2469 5C72                         l2485 5CA4  
                       l2733 75DE                         l2741 7638                         l2645 7118  
                       l2629 7062                         l2671 72AA                         l2583 6DD0  
                       l2559 6C56                         l2495 67DC                         l2489 5CB2  
                       l2737 760C                         l2729 75B0                         l2675 72CE  
                       l2659 7218                         l2595 6E92                         l1957 57B8  
                       l1981 58FC                         l1973 58DC                         l2765 76A2  
                       l2685 7382                         l1991 576A                         l1975 58E4  
                       l2599 6EB6                         l1977 58E8                         l1995 5772  
                       STR_1 7FF5                         u2025 6A36                         u2026 6A3C  
                       u2027 6A4A                         u2205 6FF6                         u2215 701C  
                       u2055 6BF2                         _LATC 000F8B                         u2056 6BF8  
                       u2305 71D2                         u2225 7042                         u2057 6C06  
                       u2315 71F8                         u2155 6ED8                         u2165 6EFE  
                       u2265 713A                         u2435 7594                         u2355 72F0  
                       u2275 7160                         u2445 75C2                         u2365 7316  
                       u2285 7186                         u2455 75F0                         u2375 733C  
                       u2295 71AC                         _PIE1 000F9D                         u1824 62B2  
                       u1825 62AC                         u2465 761E                         u2385 7362  
                       u1770 573C                         u1835 63CA                         u1836 63D0  
                       u1845 647A                         u1837 63DE                         u1846 6480  
                       u1855 653A                         u1847 648E                         u2567 688A  
                       u1856 6540                         u1784 6070                         u1865 65EA  
                       u1857 654E                         u1785 606A                         u2577 765C  
                       u1866 65F0                         u1867 65FE                         u2587 7692  
                       u2597 5752                         _data 009E                         _main 67D8  
                       fsr1h 000FE2                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
         __size_of_LCDUpdate 008A                  LCDSend@data 0008              __end_of_BusyADC 5740  
                _Delay10TCYx 574E              __end_of_OpenADC 59A8             __end_of_LCDChrXY 5ED2  
           __end_of_LCDClear 5822                        ?_main 0001              __end_of___awdiv 5CBC  
            ___awdiv@divisor 0009              __end_of___lwdiv 59FA              __end_of___lwmod 5910  
            ___awdiv@counter 000B                        _TRISC 000F94                        _Delay 5770  
        ___lmul@multiplicand 0005              __end_of_fix_fft 67D8              __end_of_dpowers 7FF5  
                      _input 005F                        _setup 5B88                        main@i 00D1  
                      main@k 00CF                   _ConvertADC 5730                        tablat 000FF5  
                      status 000FD8              __end_of_sprintf 604C                main@adc_value 00C5  
                 _FontLookup 7CBF               __CFG_PBADEN$ON 000000              __initialization 5910  
               __end_of_main 76BE      __size_of_Initialize_SPI 0002                   _Open1USART 5AA6  
           __end_of_OpenSPI1 5AA6                       ??_main 004D                __activetblptr 000002  
               fix_fft@istep 0023                    ??_LCDInit 000D                    ??_LCDSend 0008  
          __end_of_LCDUpdate 5B88                       ?_Delay 0001             __end_of_Sinewave 7CBF  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
                     _ADRESH 000FC4                       _ADRESL 000FC3             ___awdiv@dividend 0007  
                     ?_setup 0001                       _ANSELC 000F3A                       Delay@a 0001  
                     _LCDStr 5856               __CFG_WDTEN$OFF 000000                       _RCSTA1 000FAB  
                     _SPBRG1 000FAF                    ??_BusyADC 0001                       _TXREG1 000FAD  
                     _TXSTA1 000FAC                    ??_OpenADC 0003             OpenSPI1@bus_mode 0001  
                     ___lmul 59FA                       ___wmul 57CE                    ??___awdiv 000B  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 5918  
                     clear_1 592C                       clear_2 593E             ___awdiv@quotient 000D  
           __end_of_sendChar 574E                    ??_fix_fft 0013                 __mediumconst 76BE  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_sprintf 0017                  ?_ConvertADC 0001            _imaginary_numbers 0100  
                  ?_LCDChrXY 000D                    ?_LCDClear 0001                    LCDChrXY@i 0016  
                  LCDChrXY@x 0013                    LCDChrXY@y 000D                   __accesstop 0060  
    __end_of__initialization 5950                    LCDClear@i 0001           __size_of_WriteSPI1 001E  
                  LCDSend@cd 0007                __end_of_Delay 578A               __pcstackCOMRAM 0001  
                  LCDStr@inv 001C                    LCDStr@row 001D                __end_of_setup 5C18  
         _growl_prob_weights 7F31                  ?_Open1USART 0001                      ??_Delay 0005  
              ?_sendIntArray 0003                      ??_setup 000D                   __pbssBANK0 0060  
                 __pbssBANK1 0100                      ?_LCDStr 001A             WriteSPI1@TempVar 0001  
                 ??_LCDChrXY 000F                   ??_LCDClear 0001              __CFG_PLLCFG$OFF 000000  
              ??_Write1USART 0001                      LCDStr@x 001E                   _alarm_prob 00A7  
                  ?_OpenSPI1 0001               _Initialize_SPI 572E                      ?___lmul 0001  
               ?_Delay10TCYx 0001                      ?___wmul 0001               ___lmul@product 0009  
        __size_of_ConvertADC 0004                LCDStr@dataPtr 001A            _horn_prob_weights 7F6F  
          __end_of_WriteSPI1 57A8             Open1USART@config 0006                      _LCDInit 5CBC  
                    _LCDSend 57A8               ??_sendIntArray 0007            __CFG_PRICLKEN$OFF 000000  
                    _SPBRGH1 000FB0                      _SSP1BUF 000FC9              __size_of_LCDStr 0038  
        __size_of_Open1USART 0058                      _BusyADC 5734                   ??_OpenSPI1 0003  
                  ?_sendChar 0001       __end_of_Initialize_SPI 5730                      _OpenADC 595A  
                    __Hparam 0000                      __Lparam 0000          _scream_prob_weights 7FAD  
        __end_of_Write1USART 5770                      ___awdiv 5C18              __size_of___lmul 0056  
            __size_of___wmul 0026                      ___lwdiv 59A8                      ___lwmod 58CE  
  __end_of_horn_prob_weights 7FAD                      __pcinit 5910              Delay10TCYx@unit 0001  
                    __ramtop 0600                      __ptext0 67D8                      __ptext1 588E  
                    __ptext2 5ED2                      __ptext3 59A8                      __ptext4 5856  
                    __ptext5 5D76                      __ptext6 58CE                      __ptext7 5B88  
                    __ptext8 5A50                      __ptext9 595A                      _fix_fft 604C  
                 _horn_tally 00C1                      _dpowers 7FEB                      _guesses 00B3  
                 _growl_prob 00A9               OpenADC@config2 0001               OpenADC@config3 0002  
                    _sprintf 5ED2                    _LCDUpdate 5AFE         end_of_initialization 5950  
              __Lmediumconst 76BE            OpenSPI1@smp_phase 0002                   ??_sendChar 0002  
            ?_Initialize_SPI 0001                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
          OpenSPI1@sync_mode 0003            sendIntArray@array 0003             __CFG_FOSC$INTIO7 000000  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISCbits 000F94  
                 LCDChrXY@ch 000E                   ?_LCDUpdate 0001                 ??_ConvertADC 0001  
                _Write1USART 575E               __end_of_LCDStr 588E            __size_of_LCDChrXY 015C  
          __size_of_LCDClear 002E         __end_of_sendIntArray 5856                    _LcdMemIdx 005A  
                  _LcdMemory 0200               _oldRealNumbers 0060                   _writeGuess 588E  
             __end_of___lmul 5A50                   LCDUpdate@x 0009                   LCDUpdate@y 000B  
             __end_of___wmul 57F4         __size_of_Delay10TCYx 0010                 ??_Open1USART 0003  
         __end_of_ConvertADC 5734          start_initialization 5910           __end_of_FontLookup 7EF3  
                   ??_LCDStr 001D           __end_of_Open1USART 5AFE            __size_of_OpenSPI1 0056  
                   ??___lmul 0009                     ??___wmul 0005            writeGuess@percent 0027  
                   ?_LCDInit 0001                     ?_LCDSend 0007                  __pbssBIGRAM 0200  
                __pbssCOMRAM 005A                __pcstackBANK0 00C5                    _WriteSPI1 578A  
        __end_of__stringdata 7FFE                  ??_LCDUpdate 0009                  _alarm_tally 00BD  
                sprintf@_val 001D                  sprintf@flag 0019                  sprintf@prec 001A  
                  _baud_rate 00A3                     ?_BusyADC 0001            WriteSPI1@data_out 0002  
                   ?_OpenADC 0001             ___lwdiv@dividend 0001            __size_of_sendChar 000E  
              __pmediumconst 76BE                     ?___awdiv 0007                     ?___lwdiv 0001  
                   ?___lwmod 0008                  ?_writeGuess 0023              Open1USART@spbrg 0001  
 __end_of_alarm_prob_weights 7F31                     ?_fix_fft 000D               __size_of_Delay 001A  
                 ?_WriteSPI1 0001             ___lwdiv@quotient 0005                    _max_tally 00AD  
                   ?_sprintf 000D              Write1USART@data 0001               __size_of_setup 0090  
                  _horn_prob 00AB             ??_Initialize_SPI 0001                     _LCDChrXY 5D76  
               _real_numbers 0180                     _LCDClear 57F4        __size_of_sendIntArray 0034  
             ___wmul@product 0005                OpenADC@config 0005                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     _PIR1bits 000F9E  
                   _SSP1CON1 000FC6                     _SSP1STAT 000FC7             sendIntArray@size 0005  
                 _ADCON0bits 000FC2                  __stringdata 7FF5            ___wmul@multiplier 0001  
                  main@place 00CB             __size_of_LCDInit 00BA             __size_of_LCDSend 0026  
               _sendIntArray 5822                    fix_fft@fi 000F                    fix_fft@fr 000D  
                  fix_fft@nn 001F                    fix_fft@qi 0029                    fix_fft@mr 003D  
                  fix_fft@ti 0035                    fix_fft@qr 0027                    fix_fft@wi 002D  
                  fix_fft@tr 0033                    fix_fft@wr 002B            ___lmul@multiplier 0001  
        __size_of_writeGuess 0040                 ?_Write1USART 0001                     _OpenSPI1 5A50  
           __size_of_BusyADC 000C                     __Hrparam 0000             __size_of_OpenADC 004E  
                   __Lrparam 0000                     _Sinewave 76BF             __size_of___awdiv 00A4  
           __size_of___lwdiv 0052             __size_of___lwmod 0042  __end_of_scream_prob_weights 7FEB  
                 _ANSELAbits 000F38                 _scream_tally 00C3             __size_of_fix_fft 078C  
                ??_WriteSPI1 0001              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 5AA6                     __ptext11 5CBC                     __ptext20 5822  
                   __ptext12 5AFE                     __ptext21 5740                     __ptext13 57CE  
                   __ptext22 575E                     __ptext14 57A8                     __ptext23 604C  
                   __ptext15 578A                     __ptext24 59FA                     __ptext16 574E  
                   __ptext25 5C18                     __ptext17 57F4                     __ptext26 5730  
                   __ptext18 572E                     __ptext27 5734                     __ptext19 5770  
               _SSP1CON1bits 000FC6             __size_of_sprintf 017A                  _OSCCON2bits 000FD2  
              __size_of_main 0EE6                     _sendChar 5740                  _growl_tally 00BF  
              ??_Delay10TCYx 0001                 _SSP1STATbits 000FC7                     main@root 00C7  
                   fix_fft@b 0037                     fix_fft@c 0049                     fix_fft@i 0039  
                   fix_fft@j 0045                     fix_fft@k 001B                     fix_fft@l 0041  
                   fix_fft@m 0011                     fix_fft@n 002F                _USART1_Status 005E  
                _OSCTUNEbits 000F9B                   _INTCONbits 000FF2              writeGuess@guess 002F  
                _scream_prob 00AF                    sprintf@ap 001B                    sprintf@sp 000D  
           ___lwmod@dividend 0008                   _RCSTA1bits 000FAB                   _OSCCONbits 000FD3  
               ??_writeGuess 0027               writeGuess@prob 0023          __end_of_Delay10TCYx 575E  
                   sprintf@c 0022                     sprintf@f 000F              ___lwmod@divisor 000A  
            ___lwmod@counter 000C            LCDChrXY@mid_shift 0014                writeGuess@row 0025  
         _alarm_prob_weights 7EF3           __end_of_writeGuess 58CE            sendChar@character 0002  
 __end_of_growl_prob_weights 7F6F         __size_of_Write1USART 0012               LCDChrXY@offset 0011  
              LCDChrXY@index 0018  
