

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Dec 07 21:17:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	mediumconst
    45  0076BE                     __pmediumconst:
    46                           	opt stack 0
    47  0076BE  00                 	db	0
    48  0076BF                     _Sinewave:
    49                           	opt stack 0
    50  0076BF  0000               	dw	0
    51  0076C1  00C9               	dw	201
    52  0076C3  0192               	dw	402
    53  0076C5  025B               	dw	603
    54  0076C7  0324               	dw	804
    55  0076C9  03ED               	dw	1005
    56  0076CB  04B6               	dw	1206
    57  0076CD  057E               	dw	1406
    58  0076CF  0647               	dw	1607
    59  0076D1  0710               	dw	1808
    60  0076D3  07D9               	dw	2009
    61  0076D5  08A1               	dw	2209
    62  0076D7  096A               	dw	2410
    63  0076D9  0A32               	dw	2610
    64  0076DB  0AFB               	dw	2811
    65  0076DD  0BC3               	dw	3011
    66  0076DF  0C8B               	dw	3211
    67  0076E1  0D53               	dw	3411
    68  0076E3  0E1B               	dw	3611
    69  0076E5  0EE3               	dw	3811
    70  0076E7  0FAB               	dw	4011
    71  0076E9  1072               	dw	4210
    72  0076EB  1139               	dw	4409
    73  0076ED  1200               	dw	4608
    74  0076EF  12C7               	dw	4807
    75  0076F1  138E               	dw	5006
    76  0076F3  1455               	dw	5205
    77  0076F5  151B               	dw	5403
    78  0076F7  15E1               	dw	5601
    79  0076F9  16A7               	dw	5799
    80  0076FB  176D               	dw	5997
    81  0076FD  1833               	dw	6195
    82  0076FF  18F8               	dw	6392
    83  007701  19BD               	dw	6589
    84  007703  1A82               	dw	6786
    85  007705  1B46               	dw	6982
    86  007707  1C0B               	dw	7179
    87  007709  1CCF               	dw	7375
    88  00770B  1D93               	dw	7571
    89  00770D  1E56               	dw	7766
    90  00770F  1F19               	dw	7961
    91  007711  1FDC               	dw	8156
    92  007713  209F               	dw	8351
    93  007715  2161               	dw	8545
    94  007717  2223               	dw	8739
    95  007719  22E4               	dw	8932
    96  00771B  23A6               	dw	9126
    97  00771D  2467               	dw	9319
    98  00771F  2527               	dw	9511
    99  007721  25E7               	dw	9703
   100  007723  26A7               	dw	9895
   101  007725  2767               	dw	10087
   102  007727  2826               	dw	10278
   103  007729  28E5               	dw	10469
   104  00772B  29A3               	dw	10659
   105  00772D  2A61               	dw	10849
   106  00772F  2B1E               	dw	11038
   107  007731  2BDB               	dw	11227
   108  007733  2C98               	dw	11416
   109  007735  2D54               	dw	11604
   110  007737  2E10               	dw	11792
   111  007739  2ECC               	dw	11980
   112  00773B  2F86               	dw	12166
   113  00773D  3041               	dw	12353
   114  00773F  30FB               	dw	12539
   115  007741  31B4               	dw	12724
   116  007743  326D               	dw	12909
   117  007745  3326               	dw	13094
   118  007747  33DE               	dw	13278
   119  007749  3496               	dw	13462
   120  00774B  354D               	dw	13645
   121  00774D  3603               	dw	13827
   122  00774F  36B9               	dw	14009
   123  007751  376F               	dw	14191
   124  007753  3824               	dw	14372
   125  007755  38D8               	dw	14552
   126  007757  398C               	dw	14732
   127  007759  3A3F               	dw	14911
   128  00775B  3AF2               	dw	15090
   129  00775D  3BA4               	dw	15268
   130  00775F  3C56               	dw	15446
   131  007761  3D07               	dw	15623
   132  007763  3DB7               	dw	15799
   133  007765  3E67               	dw	15975
   134  007767  3F16               	dw	16150
   135  007769  3FC5               	dw	16325
   136  00776B  4073               	dw	16499
   137  00776D  4120               	dw	16672
   138  00776F  41CD               	dw	16845
   139  007771  4279               	dw	17017
   140  007773  4325               	dw	17189
   141  007775  43D0               	dw	17360
   142  007777  447A               	dw	17530
   143  007779  4523               	dw	17699
   144  00777B  45CC               	dw	17868
   145  00777D  4674               	dw	18036
   146  00777F  471C               	dw	18204
   147  007781  47C3               	dw	18371
   148  007783  4869               	dw	18537
   149  007785  490E               	dw	18702
   150  007787  49B3               	dw	18867
   151  007789  4A57               	dw	19031
   152  00778B  4AFA               	dw	19194
   153  00778D  4B9D               	dw	19357
   154  00778F  4C3F               	dw	19519
   155  007791  4CE0               	dw	19680
   156  007793  4D80               	dw	19840
   157  007795  4E20               	dw	20000
   158  007797  4EBF               	dw	20159
   159  007799  4F5D               	dw	20317
   160  00779B  4FFA               	dw	20474
   161  00779D  5097               	dw	20631
   162  00779F  5133               	dw	20787
   163  0077A1  51CE               	dw	20942
   164  0077A3  5268               	dw	21096
   165  0077A5  5301               	dw	21249
   166  0077A7  539A               	dw	21402
   167  0077A9  5432               	dw	21554
   168  0077AB  54C9               	dw	21705
   169  0077AD  555F               	dw	21855
   170  0077AF  55F4               	dw	22004
   171  0077B1  5689               	dw	22153
   172  0077B3  571D               	dw	22301
   173  0077B5  57B0               	dw	22448
   174  0077B7  5842               	dw	22594
   175  0077B9  58D3               	dw	22739
   176  0077BB  5963               	dw	22883
   177  0077BD  59F3               	dw	23027
   178  0077BF  5A81               	dw	23169
   179  0077C1  5B0F               	dw	23311
   180  0077C3  5B9C               	dw	23452
   181  0077C5  5C28               	dw	23592
   182  0077C7  5CB3               	dw	23731
   183  0077C9  5D3D               	dw	23869
   184  0077CB  5DC6               	dw	24006
   185  0077CD  5E4F               	dw	24143
   186  0077CF  5ED6               	dw	24278
   187  0077D1  5F5D               	dw	24413
   188  0077D3  5FE2               	dw	24546
   189  0077D5  6067               	dw	24679
   190  0077D7  60EB               	dw	24811
   191  0077D9  616E               	dw	24942
   192  0077DB  61F0               	dw	25072
   193  0077DD  6271               	dw	25201
   194  0077DF  62F1               	dw	25329
   195  0077E1  6370               	dw	25456
   196  0077E3  63EE               	dw	25582
   197  0077E5  646B               	dw	25707
   198  0077E7  64E7               	dw	25831
   199  0077E9  6562               	dw	25954
   200  0077EB  65DD               	dw	26077
   201  0077ED  6656               	dw	26198
   202  0077EF  66CE               	dw	26318
   203  0077F1  6745               	dw	26437
   204  0077F3  67BC               	dw	26556
   205  0077F5  6831               	dw	26673
   206  0077F7  68A5               	dw	26789
   207  0077F9  6919               	dw	26905
   208  0077FB  698B               	dw	27019
   209  0077FD  69FC               	dw	27132
   210  0077FF  6A6C               	dw	27244
   211  007801  6ADB               	dw	27355
   212  007803  6B4A               	dw	27466
   213  007805  6BB7               	dw	27575
   214  007807  6C23               	dw	27683
   215  007809  6C8E               	dw	27790
   216  00780B  6CF8               	dw	27896
   217  00780D  6D61               	dw	28001
   218  00780F  6DC9               	dw	28105
   219  007811  6E30               	dw	28208
   220  007813  6E95               	dw	28309
   221  007815  6EFA               	dw	28410
   222  007817  6F5E               	dw	28510
   223  007819  6FC0               	dw	28608
   224  00781B  7022               	dw	28706
   225  00781D  7082               	dw	28802
   226  00781F  70E1               	dw	28897
   227  007821  7140               	dw	28992
   228  007823  719D               	dw	29085
   229  007825  71F9               	dw	29177
   230  007827  7254               	dw	29268
   231  007829  72AE               	dw	29358
   232  00782B  7306               	dw	29446
   233  00782D  735E               	dw	29534
   234  00782F  73B5               	dw	29621
   235  007831  740A               	dw	29706
   236  007833  745E               	dw	29790
   237  007835  74B1               	dw	29873
   238  007837  7503               	dw	29955
   239  007839  7554               	dw	30036
   240  00783B  75A4               	dw	30116
   241  00783D  75F3               	dw	30195
   242  00783F  7640               	dw	30272
   243  007841  768D               	dw	30349
   244  007843  76D8               	dw	30424
   245  007845  7722               	dw	30498
   246  007847  776B               	dw	30571
   247  007849  77B3               	dw	30643
   248  00784B  77F9               	dw	30713
   249  00784D  783F               	dw	30783
   250  00784F  7883               	dw	30851
   251  007851  78C6               	dw	30918
   252  007853  7908               	dw	30984
   253  007855  7949               	dw	31049
   254  007857  7989               	dw	31113
   255  007859  79C7               	dw	31175
   256  00785B  7A04               	dw	31236
   257  00785D  7A41               	dw	31297
   258  00785F  7A7C               	dw	31356
   259  007861  7AB5               	dw	31413
   260  007863  7AEE               	dw	31470
   261  007865  7B25               	dw	31525
   262  007867  7B5C               	dw	31580
   263  007869  7B91               	dw	31633
   264  00786B  7BC4               	dw	31684
   265  00786D  7BF7               	dw	31735
   266  00786F  7C29               	dw	31785
   267  007871  7C59               	dw	31833
   268  007873  7C88               	dw	31880
   269  007875  7CB6               	dw	31926
   270  007877  7CE2               	dw	31970
   271  007879  7D0E               	dw	32014
   272  00787B  7D38               	dw	32056
   273  00787D  7D61               	dw	32097
   274  00787F  7D89               	dw	32137
   275  007881  7DB0               	dw	32176
   276  007883  7DD5               	dw	32213
   277  007885  7DF9               	dw	32249
   278  007887  7E1C               	dw	32284
   279  007889  7E3E               	dw	32318
   280  00788B  7E5E               	dw	32350
   281  00788D  7E7E               	dw	32382
   282  00788F  7E9C               	dw	32412
   283  007891  7EB9               	dw	32441
   284  007893  7ED4               	dw	32468
   285  007895  7EEF               	dw	32495
   286  007897  7F08               	dw	32520
   287  007899  7F20               	dw	32544
   288  00789B  7F37               	dw	32567
   289  00789D  7F4C               	dw	32588
   290  00789F  7F61               	dw	32609
   291  0078A1  7F74               	dw	32628
   292  0078A3  7F86               	dw	32646
   293  0078A5  7F96               	dw	32662
   294  0078A7  7FA6               	dw	32678
   295  0078A9  7FB4               	dw	32692
   296  0078AB  7FC1               	dw	32705
   297  0078AD  7FCD               	dw	32717
   298  0078AF  7FD7               	dw	32727
   299  0078B1  7FE0               	dw	32736
   300  0078B3  7FE8               	dw	32744
   301  0078B5  7FEF               	dw	32751
   302  0078B7  7FF5               	dw	32757
   303  0078B9  7FF9               	dw	32761
   304  0078BB  7FFC               	dw	32764
   305  0078BD  7FFE               	dw	32766
   306  0078BF  7FFF               	dw	32767
   307  0078C1  7FFE               	dw	32766
   308  0078C3  7FFC               	dw	32764
   309  0078C5  7FF9               	dw	32761
   310  0078C7  7FF5               	dw	32757
   311  0078C9  7FEF               	dw	32751
   312  0078CB  7FE8               	dw	32744
   313  0078CD  7FE0               	dw	32736
   314  0078CF  7FD7               	dw	32727
   315  0078D1  7FCD               	dw	32717
   316  0078D3  7FC1               	dw	32705
   317  0078D5  7FB4               	dw	32692
   318  0078D7  7FA6               	dw	32678
   319  0078D9  7F96               	dw	32662
   320  0078DB  7F86               	dw	32646
   321  0078DD  7F74               	dw	32628
   322  0078DF  7F61               	dw	32609
   323  0078E1  7F4C               	dw	32588
   324  0078E3  7F37               	dw	32567
   325  0078E5  7F20               	dw	32544
   326  0078E7  7F08               	dw	32520
   327  0078E9  7EEF               	dw	32495
   328  0078EB  7ED4               	dw	32468
   329  0078ED  7EB9               	dw	32441
   330  0078EF  7E9C               	dw	32412
   331  0078F1  7E7E               	dw	32382
   332  0078F3  7E5E               	dw	32350
   333  0078F5  7E3E               	dw	32318
   334  0078F7  7E1C               	dw	32284
   335  0078F9  7DF9               	dw	32249
   336  0078FB  7DD5               	dw	32213
   337  0078FD  7DB0               	dw	32176
   338  0078FF  7D89               	dw	32137
   339  007901  7D61               	dw	32097
   340  007903  7D38               	dw	32056
   341  007905  7D0E               	dw	32014
   342  007907  7CE2               	dw	31970
   343  007909  7CB6               	dw	31926
   344  00790B  7C88               	dw	31880
   345  00790D  7C59               	dw	31833
   346  00790F  7C29               	dw	31785
   347  007911  7BF7               	dw	31735
   348  007913  7BC4               	dw	31684
   349  007915  7B91               	dw	31633
   350  007917  7B5C               	dw	31580
   351  007919  7B25               	dw	31525
   352  00791B  7AEE               	dw	31470
   353  00791D  7AB5               	dw	31413
   354  00791F  7A7C               	dw	31356
   355  007921  7A41               	dw	31297
   356  007923  7A04               	dw	31236
   357  007925  79C7               	dw	31175
   358  007927  7989               	dw	31113
   359  007929  7949               	dw	31049
   360  00792B  7908               	dw	30984
   361  00792D  78C6               	dw	30918
   362  00792F  7883               	dw	30851
   363  007931  783F               	dw	30783
   364  007933  77F9               	dw	30713
   365  007935  77B3               	dw	30643
   366  007937  776B               	dw	30571
   367  007939  7722               	dw	30498
   368  00793B  76D8               	dw	30424
   369  00793D  768D               	dw	30349
   370  00793F  7640               	dw	30272
   371  007941  75F3               	dw	30195
   372  007943  75A4               	dw	30116
   373  007945  7554               	dw	30036
   374  007947  7503               	dw	29955
   375  007949  74B1               	dw	29873
   376  00794B  745E               	dw	29790
   377  00794D  740A               	dw	29706
   378  00794F  73B5               	dw	29621
   379  007951  735E               	dw	29534
   380  007953  7306               	dw	29446
   381  007955  72AE               	dw	29358
   382  007957  7254               	dw	29268
   383  007959  71F9               	dw	29177
   384  00795B  719D               	dw	29085
   385  00795D  7140               	dw	28992
   386  00795F  70E1               	dw	28897
   387  007961  7082               	dw	28802
   388  007963  7022               	dw	28706
   389  007965  6FC0               	dw	28608
   390  007967  6F5E               	dw	28510
   391  007969  6EFA               	dw	28410
   392  00796B  6E95               	dw	28309
   393  00796D  6E30               	dw	28208
   394  00796F  6DC9               	dw	28105
   395  007971  6D61               	dw	28001
   396  007973  6CF8               	dw	27896
   397  007975  6C8E               	dw	27790
   398  007977  6C23               	dw	27683
   399  007979  6BB7               	dw	27575
   400  00797B  6B4A               	dw	27466
   401  00797D  6ADB               	dw	27355
   402  00797F  6A6C               	dw	27244
   403  007981  69FC               	dw	27132
   404  007983  698B               	dw	27019
   405  007985  6919               	dw	26905
   406  007987  68A5               	dw	26789
   407  007989  6831               	dw	26673
   408  00798B  67BC               	dw	26556
   409  00798D  6745               	dw	26437
   410  00798F  66CE               	dw	26318
   411  007991  6656               	dw	26198
   412  007993  65DD               	dw	26077
   413  007995  6562               	dw	25954
   414  007997  64E7               	dw	25831
   415  007999  646B               	dw	25707
   416  00799B  63EE               	dw	25582
   417  00799D  6370               	dw	25456
   418  00799F  62F1               	dw	25329
   419  0079A1  6271               	dw	25201
   420  0079A3  61F0               	dw	25072
   421  0079A5  616E               	dw	24942
   422  0079A7  60EB               	dw	24811
   423  0079A9  6067               	dw	24679
   424  0079AB  5FE2               	dw	24546
   425  0079AD  5F5D               	dw	24413
   426  0079AF  5ED6               	dw	24278
   427  0079B1  5E4F               	dw	24143
   428  0079B3  5DC6               	dw	24006
   429  0079B5  5D3D               	dw	23869
   430  0079B7  5CB3               	dw	23731
   431  0079B9  5C28               	dw	23592
   432  0079BB  5B9C               	dw	23452
   433  0079BD  5B0F               	dw	23311
   434  0079BF  5A81               	dw	23169
   435  0079C1  59F3               	dw	23027
   436  0079C3  5963               	dw	22883
   437  0079C5  58D3               	dw	22739
   438  0079C7  5842               	dw	22594
   439  0079C9  57B0               	dw	22448
   440  0079CB  571D               	dw	22301
   441  0079CD  5689               	dw	22153
   442  0079CF  55F4               	dw	22004
   443  0079D1  555F               	dw	21855
   444  0079D3  54C9               	dw	21705
   445  0079D5  5432               	dw	21554
   446  0079D7  539A               	dw	21402
   447  0079D9  5301               	dw	21249
   448  0079DB  5268               	dw	21096
   449  0079DD  51CE               	dw	20942
   450  0079DF  5133               	dw	20787
   451  0079E1  5097               	dw	20631
   452  0079E3  4FFA               	dw	20474
   453  0079E5  4F5D               	dw	20317
   454  0079E7  4EBF               	dw	20159
   455  0079E9  4E20               	dw	20000
   456  0079EB  4D80               	dw	19840
   457  0079ED  4CE0               	dw	19680
   458  0079EF  4C3F               	dw	19519
   459  0079F1  4B9D               	dw	19357
   460  0079F3  4AFA               	dw	19194
   461  0079F5  4A57               	dw	19031
   462  0079F7  49B3               	dw	18867
   463  0079F9  490E               	dw	18702
   464  0079FB  4869               	dw	18537
   465  0079FD  47C3               	dw	18371
   466  0079FF  471C               	dw	18204
   467  007A01  4674               	dw	18036
   468  007A03  45CC               	dw	17868
   469  007A05  4523               	dw	17699
   470  007A07  447A               	dw	17530
   471  007A09  43D0               	dw	17360
   472  007A0B  4325               	dw	17189
   473  007A0D  4279               	dw	17017
   474  007A0F  41CD               	dw	16845
   475  007A11  4120               	dw	16672
   476  007A13  4073               	dw	16499
   477  007A15  3FC5               	dw	16325
   478  007A17  3F16               	dw	16150
   479  007A19  3E67               	dw	15975
   480  007A1B  3DB7               	dw	15799
   481  007A1D  3D07               	dw	15623
   482  007A1F  3C56               	dw	15446
   483  007A21  3BA4               	dw	15268
   484  007A23  3AF2               	dw	15090
   485  007A25  3A3F               	dw	14911
   486  007A27  398C               	dw	14732
   487  007A29  38D8               	dw	14552
   488  007A2B  3824               	dw	14372
   489  007A2D  376F               	dw	14191
   490  007A2F  36B9               	dw	14009
   491  007A31  3603               	dw	13827
   492  007A33  354D               	dw	13645
   493  007A35  3496               	dw	13462
   494  007A37  33DE               	dw	13278
   495  007A39  3326               	dw	13094
   496  007A3B  326D               	dw	12909
   497  007A3D  31B4               	dw	12724
   498  007A3F  30FB               	dw	12539
   499  007A41  3041               	dw	12353
   500  007A43  2F86               	dw	12166
   501  007A45  2ECC               	dw	11980
   502  007A47  2E10               	dw	11792
   503  007A49  2D54               	dw	11604
   504  007A4B  2C98               	dw	11416
   505  007A4D  2BDB               	dw	11227
   506  007A4F  2B1E               	dw	11038
   507  007A51  2A61               	dw	10849
   508  007A53  29A3               	dw	10659
   509  007A55  28E5               	dw	10469
   510  007A57  2826               	dw	10278
   511  007A59  2767               	dw	10087
   512  007A5B  26A7               	dw	9895
   513  007A5D  25E7               	dw	9703
   514  007A5F  2527               	dw	9511
   515  007A61  2467               	dw	9319
   516  007A63  23A6               	dw	9126
   517  007A65  22E4               	dw	8932
   518  007A67  2223               	dw	8739
   519  007A69  2161               	dw	8545
   520  007A6B  209F               	dw	8351
   521  007A6D  1FDC               	dw	8156
   522  007A6F  1F19               	dw	7961
   523  007A71  1E56               	dw	7766
   524  007A73  1D93               	dw	7571
   525  007A75  1CCF               	dw	7375
   526  007A77  1C0B               	dw	7179
   527  007A79  1B46               	dw	6982
   528  007A7B  1A82               	dw	6786
   529  007A7D  19BD               	dw	6589
   530  007A7F  18F8               	dw	6392
   531  007A81  1833               	dw	6195
   532  007A83  176D               	dw	5997
   533  007A85  16A7               	dw	5799
   534  007A87  15E1               	dw	5601
   535  007A89  151B               	dw	5403
   536  007A8B  1455               	dw	5205
   537  007A8D  138E               	dw	5006
   538  007A8F  12C7               	dw	4807
   539  007A91  1200               	dw	4608
   540  007A93  1139               	dw	4409
   541  007A95  1072               	dw	4210
   542  007A97  0FAB               	dw	4011
   543  007A99  0EE3               	dw	3811
   544  007A9B  0E1B               	dw	3611
   545  007A9D  0D53               	dw	3411
   546  007A9F  0C8B               	dw	3211
   547  007AA1  0BC3               	dw	3011
   548  007AA3  0AFB               	dw	2811
   549  007AA5  0A32               	dw	2610
   550  007AA7  096A               	dw	2410
   551  007AA9  08A1               	dw	2209
   552  007AAB  07D9               	dw	2009
   553  007AAD  0710               	dw	1808
   554  007AAF  0647               	dw	1607
   555  007AB1  057E               	dw	1406
   556  007AB3  04B6               	dw	1206
   557  007AB5  03ED               	dw	1005
   558  007AB7  0324               	dw	804
   559  007AB9  025B               	dw	603
   560  007ABB  0192               	dw	402
   561  007ABD  00C9               	dw	201
   562  007ABF  0000               	dw	0
   563  007AC1  FF37               	dw	65335
   564  007AC3  FE6E               	dw	65134
   565  007AC5  FDA5               	dw	64933
   566  007AC7  FCDC               	dw	64732
   567  007AC9  FC13               	dw	64531
   568  007ACB  FB4A               	dw	64330
   569  007ACD  FA82               	dw	64130
   570  007ACF  F9B9               	dw	63929
   571  007AD1  F8F0               	dw	63728
   572  007AD3  F827               	dw	63527
   573  007AD5  F75F               	dw	63327
   574  007AD7  F696               	dw	63126
   575  007AD9  F5CE               	dw	62926
   576  007ADB  F505               	dw	62725
   577  007ADD  F43D               	dw	62525
   578  007ADF  F375               	dw	62325
   579  007AE1  F2AD               	dw	62125
   580  007AE3  F1E5               	dw	61925
   581  007AE5  F11D               	dw	61725
   582  007AE7  F055               	dw	61525
   583  007AE9  EF8E               	dw	61326
   584  007AEB  EEC7               	dw	61127
   585  007AED  EE00               	dw	60928
   586  007AEF  ED39               	dw	60729
   587  007AF1  EC72               	dw	60530
   588  007AF3  EBAB               	dw	60331
   589  007AF5  EAE5               	dw	60133
   590  007AF7  EA1F               	dw	59935
   591  007AF9  E959               	dw	59737
   592  007AFB  E893               	dw	59539
   593  007AFD  E7CD               	dw	59341
   594  007AFF  E708               	dw	59144
   595  007B01  E643               	dw	58947
   596  007B03  E57E               	dw	58750
   597  007B05  E4BA               	dw	58554
   598  007B07  E3F5               	dw	58357
   599  007B09  E331               	dw	58161
   600  007B0B  E26D               	dw	57965
   601  007B0D  E1AA               	dw	57770
   602  007B0F  E0E7               	dw	57575
   603  007B11  E024               	dw	57380
   604  007B13  DF61               	dw	57185
   605  007B15  DE9F               	dw	56991
   606  007B17  DDDD               	dw	56797
   607  007B19  DD1C               	dw	56604
   608  007B1B  DC5A               	dw	56410
   609  007B1D  DB99               	dw	56217
   610  007B1F  DAD9               	dw	56025
   611  007B21  DA19               	dw	55833
   612  007B23  D959               	dw	55641
   613  007B25  D899               	dw	55449
   614  007B27  D7DA               	dw	55258
   615  007B29  D71B               	dw	55067
   616  007B2B  D65D               	dw	54877
   617  007B2D  D59F               	dw	54687
   618  007B2F  D4E2               	dw	54498
   619  007B31  D425               	dw	54309
   620  007B33  D368               	dw	54120
   621  007B35  D2AC               	dw	53932
   622  007B37  D1F0               	dw	53744
   623  007B39  D134               	dw	53556
   624  007B3B  D07A               	dw	53370
   625  007B3D  CFBF               	dw	53183
   626  007B3F  CF05               	dw	52997
   627  007B41  CE4C               	dw	52812
   628  007B43  CD93               	dw	52627
   629  007B45  CCDA               	dw	52442
   630  007B47  CC22               	dw	52258
   631  007B49  CB6A               	dw	52074
   632  007B4B  CAB3               	dw	51891
   633  007B4D  C9FD               	dw	51709
   634  007B4F  C947               	dw	51527
   635  007B51  C891               	dw	51345
   636  007B53  C7DC               	dw	51164
   637  007B55  C728               	dw	50984
   638  007B57  C674               	dw	50804
   639  007B59  C5C1               	dw	50625
   640  007B5B  C50E               	dw	50446
   641  007B5D  C45C               	dw	50268
   642  007B5F  C3AA               	dw	50090
   643  007B61  C2F9               	dw	49913
   644  007B63  C249               	dw	49737
   645  007B65  C199               	dw	49561
   646  007B67  C0EA               	dw	49386
   647  007B69  C03B               	dw	49211
   648  007B6B  BF8D               	dw	49037
   649  007B6D  BEE0               	dw	48864
   650  007B6F  BE33               	dw	48691
   651  007B71  BD87               	dw	48519
   652  007B73  BCDB               	dw	48347
   653  007B75  BC30               	dw	48176
   654  007B77  BB86               	dw	48006
   655  007B79  BADD               	dw	47837
   656  007B7B  BA34               	dw	47668
   657  007B7D  B98C               	dw	47500
   658  007B7F  B8E4               	dw	47332
   659  007B81  B83D               	dw	47165
   660  007B83  B797               	dw	46999
   661  007B85  B6F2               	dw	46834
   662  007B87  B64D               	dw	46669
   663  007B89  B5A9               	dw	46505
   664  007B8B  B506               	dw	46342
   665  007B8D  B463               	dw	46179
   666  007B8F  B3C1               	dw	46017
   667  007B91  B320               	dw	45856
   668  007B93  B280               	dw	45696
   669  007B95  B1E0               	dw	45536
   670  007B97  B141               	dw	45377
   671  007B99  B0A3               	dw	45219
   672  007B9B  B006               	dw	45062
   673  007B9D  AF69               	dw	44905
   674  007B9F  AECD               	dw	44749
   675  007BA1  AE32               	dw	44594
   676  007BA3  AD98               	dw	44440
   677  007BA5  ACFF               	dw	44287
   678  007BA7  AC66               	dw	44134
   679  007BA9  ABCE               	dw	43982
   680  007BAB  AB37               	dw	43831
   681  007BAD  AAA1               	dw	43681
   682  007BAF  AA0C               	dw	43532
   683  007BB1  A977               	dw	43383
   684  007BB3  A8E3               	dw	43235
   685  007BB5  A850               	dw	43088
   686  007BB7  A7BE               	dw	42942
   687  007BB9  A72D               	dw	42797
   688  007BBB  A69D               	dw	42653
   689  007BBD  A60D               	dw	42509
   690  007BBF  A57F               	dw	42367
   691  007BC1  A4F1               	dw	42225
   692  007BC3  A464               	dw	42084
   693  007BC5  A3D8               	dw	41944
   694  007BC7  A34D               	dw	41805
   695  007BC9  A2C3               	dw	41667
   696  007BCB  A23A               	dw	41530
   697  007BCD  A1B1               	dw	41393
   698  007BCF  A12A               	dw	41258
   699  007BD1  A0A3               	dw	41123
   700  007BD3  A01E               	dw	40990
   701  007BD5  9F99               	dw	40857
   702  007BD7  9F15               	dw	40725
   703  007BD9  9E92               	dw	40594
   704  007BDB  9E10               	dw	40464
   705  007BDD  9D8F               	dw	40335
   706  007BDF  9D0F               	dw	40207
   707  007BE1  9C90               	dw	40080
   708  007BE3  9C12               	dw	39954
   709  007BE5  9B95               	dw	39829
   710  007BE7  9B19               	dw	39705
   711  007BE9  9A9E               	dw	39582
   712  007BEB  9A23               	dw	39459
   713  007BED  99AA               	dw	39338
   714  007BEF  9932               	dw	39218
   715  007BF1  98BB               	dw	39099
   716  007BF3  9844               	dw	38980
   717  007BF5  97CF               	dw	38863
   718  007BF7  975B               	dw	38747
   719  007BF9  96E7               	dw	38631
   720  007BFB  9675               	dw	38517
   721  007BFD  9604               	dw	38404
   722  007BFF  9594               	dw	38292
   723  007C01  9525               	dw	38181
   724  007C03  94B6               	dw	38070
   725  007C05  9449               	dw	37961
   726  007C07  93DD               	dw	37853
   727  007C09  9372               	dw	37746
   728  007C0B  9308               	dw	37640
   729  007C0D  929F               	dw	37535
   730  007C0F  9237               	dw	37431
   731  007C11  91D0               	dw	37328
   732  007C13  916B               	dw	37227
   733  007C15  9106               	dw	37126
   734  007C17  90A2               	dw	37026
   735  007C19  9040               	dw	36928
   736  007C1B  8FDE               	dw	36830
   737  007C1D  8F7E               	dw	36734
   738  007C1F  8F1F               	dw	36639
   739  007C21  8EC0               	dw	36544
   740  007C23  8E63               	dw	36451
   741  007C25  8E07               	dw	36359
   742  007C27  8DAC               	dw	36268
   743  007C29  8D52               	dw	36178
   744  007C2B  8CFA               	dw	36090
   745  007C2D  8CA2               	dw	36002
   746  007C2F  8C4B               	dw	35915
   747  007C31  8BF6               	dw	35830
   748  007C33  8BA2               	dw	35746
   749  007C35  8B4F               	dw	35663
   750  007C37  8AFD               	dw	35581
   751  007C39  8AAC               	dw	35500
   752  007C3B  8A5C               	dw	35420
   753  007C3D  8A0D               	dw	35341
   754  007C3F  89C0               	dw	35264
   755  007C41  8973               	dw	35187
   756  007C43  8928               	dw	35112
   757  007C45  88DE               	dw	35038
   758  007C47  8895               	dw	34965
   759  007C49  884D               	dw	34893
   760  007C4B  8807               	dw	34823
   761  007C4D  87C1               	dw	34753
   762  007C4F  877D               	dw	34685
   763  007C51  873A               	dw	34618
   764  007C53  86F8               	dw	34552
   765  007C55  86B7               	dw	34487
   766  007C57  8677               	dw	34423
   767  007C59  8639               	dw	34361
   768  007C5B  85FC               	dw	34300
   769  007C5D  85BF               	dw	34239
   770  007C5F  8584               	dw	34180
   771  007C61  854B               	dw	34123
   772  007C63  8512               	dw	34066
   773  007C65  84DB               	dw	34011
   774  007C67  84A4               	dw	33956
   775  007C69  846F               	dw	33903
   776  007C6B  843C               	dw	33852
   777  007C6D  8409               	dw	33801
   778  007C6F  83D7               	dw	33751
   779  007C71  83A7               	dw	33703
   780  007C73  8378               	dw	33656
   781  007C75  834A               	dw	33610
   782  007C77  831E               	dw	33566
   783  007C79  82F2               	dw	33522
   784  007C7B  82C8               	dw	33480
   785  007C7D  829F               	dw	33439
   786  007C7F  8277               	dw	33399
   787  007C81  8250               	dw	33360
   788  007C83  822B               	dw	33323
   789  007C85  8207               	dw	33287
   790  007C87  81E4               	dw	33252
   791  007C89  81C2               	dw	33218
   792  007C8B  81A2               	dw	33186
   793  007C8D  8182               	dw	33154
   794  007C8F  8164               	dw	33124
   795  007C91  8147               	dw	33095
   796  007C93  812C               	dw	33068
   797  007C95  8111               	dw	33041
   798  007C97  80F8               	dw	33016
   799  007C99  80E0               	dw	32992
   800  007C9B  80C9               	dw	32969
   801  007C9D  80B4               	dw	32948
   802  007C9F  809F               	dw	32927
   803  007CA1  808C               	dw	32908
   804  007CA3  807A               	dw	32890
   805  007CA5  806A               	dw	32874
   806  007CA7  805A               	dw	32858
   807  007CA9  804C               	dw	32844
   808  007CAB  803F               	dw	32831
   809  007CAD  8033               	dw	32819
   810  007CAF  8029               	dw	32809
   811  007CB1  8020               	dw	32800
   812  007CB3  8018               	dw	32792
   813  007CB5  8011               	dw	32785
   814  007CB7  800B               	dw	32779
   815  007CB9  8007               	dw	32775
   816  007CBB  8004               	dw	32772
   817  007CBD  8002               	dw	32770
   818  007CBF                     __end_of_Sinewave:
   819                           	opt stack 0
   820  007CBF                     _FontLookup:
   821                           	opt stack 0
   822  007CBF  00                 	db	0
   823  007CC0  00                 	db	0
   824  007CC1  00                 	db	0
   825  007CC2  00                 	db	0
   826  007CC3  00                 	db	0
   827  007CC4  00                 	db	0
   828  007CC5  00                 	db	0
   829  007CC6  00                 	db	0
   830  007CC7  2F                 	db	47
   831  007CC8  00                 	db	0
   832  007CC9  00                 	db	0
   833  007CCA  00                 	db	0
   834  007CCB  00                 	db	0
   835  007CCC  07                 	db	7
   836  007CCD  00                 	db	0
   837  007CCE  07                 	db	7
   838  007CCF  00                 	db	0
   839  007CD0  00                 	db	0
   840  007CD1  14                 	db	20
   841  007CD2  7F                 	db	127
   842  007CD3  14                 	db	20
   843  007CD4  7F                 	db	127
   844  007CD5  14                 	db	20
   845  007CD6  00                 	db	0
   846  007CD7  24                 	db	36
   847  007CD8  2A                 	db	42
   848  007CD9  7F                 	db	127
   849  007CDA  2A                 	db	42
   850  007CDB  12                 	db	18
   851  007CDC  00                 	db	0
   852  007CDD  C4                 	db	196
   853  007CDE  C8                 	db	200
   854  007CDF  10                 	db	16
   855  007CE0  26                 	db	38
   856  007CE1  46                 	db	70
   857  007CE2  00                 	db	0
   858  007CE3  36                 	db	54
   859  007CE4  49                 	db	73
   860  007CE5  55                 	db	85
   861  007CE6  22                 	db	34
   862  007CE7  50                 	db	80
   863  007CE8  00                 	db	0
   864  007CE9  00                 	db	0
   865  007CEA  05                 	db	5
   866  007CEB  03                 	db	3
   867  007CEC  00                 	db	0
   868  007CED  00                 	db	0
   869  007CEE  00                 	db	0
   870  007CEF  00                 	db	0
   871  007CF0  1C                 	db	28
   872  007CF1  22                 	db	34
   873  007CF2  41                 	db	65
   874  007CF3  00                 	db	0
   875  007CF4  00                 	db	0
   876  007CF5  00                 	db	0
   877  007CF6  41                 	db	65
   878  007CF7  22                 	db	34
   879  007CF8  1C                 	db	28
   880  007CF9  00                 	db	0
   881  007CFA  00                 	db	0
   882  007CFB  14                 	db	20
   883  007CFC  08                 	db	8
   884  007CFD  3E                 	db	62
   885  007CFE  08                 	db	8
   886  007CFF  14                 	db	20
   887  007D00  00                 	db	0
   888  007D01  08                 	db	8
   889  007D02  08                 	db	8
   890  007D03  3E                 	db	62
   891  007D04  08                 	db	8
   892  007D05  08                 	db	8
   893  007D06  00                 	db	0
   894  007D07  00                 	db	0
   895  007D08  00                 	db	0
   896  007D09  50                 	db	80
   897  007D0A  30                 	db	48
   898  007D0B  00                 	db	0
   899  007D0C  00                 	db	0
   900  007D0D  10                 	db	16
   901  007D0E  10                 	db	16
   902  007D0F  10                 	db	16
   903  007D10  10                 	db	16
   904  007D11  10                 	db	16
   905  007D12  00                 	db	0
   906  007D13  00                 	db	0
   907  007D14  60                 	db	96
   908  007D15  60                 	db	96
   909  007D16  00                 	db	0
   910  007D17  00                 	db	0
   911  007D18  00                 	db	0
   912  007D19  20                 	db	32
   913  007D1A  10                 	db	16
   914  007D1B  08                 	db	8
   915  007D1C  04                 	db	4
   916  007D1D  02                 	db	2
   917  007D1E  00                 	db	0
   918  007D1F  3E                 	db	62
   919  007D20  51                 	db	81
   920  007D21  49                 	db	73
   921  007D22  45                 	db	69
   922  007D23  3E                 	db	62
   923  007D24  00                 	db	0
   924  007D25  00                 	db	0
   925  007D26  42                 	db	66
   926  007D27  7F                 	db	127
   927  007D28  40                 	db	64
   928  007D29  00                 	db	0
   929  007D2A  00                 	db	0
   930  007D2B  42                 	db	66
   931  007D2C  61                 	db	97
   932  007D2D  51                 	db	81
   933  007D2E  49                 	db	73
   934  007D2F  46                 	db	70
   935  007D30  00                 	db	0
   936  007D31  21                 	db	33
   937  007D32  41                 	db	65
   938  007D33  45                 	db	69
   939  007D34  4B                 	db	75
   940  007D35  31                 	db	49
   941  007D36  00                 	db	0
   942  007D37  18                 	db	24
   943  007D38  14                 	db	20
   944  007D39  12                 	db	18
   945  007D3A  7F                 	db	127
   946  007D3B  10                 	db	16
   947  007D3C  00                 	db	0
   948  007D3D  27                 	db	39
   949  007D3E  45                 	db	69
   950  007D3F  45                 	db	69
   951  007D40  45                 	db	69
   952  007D41  39                 	db	57
   953  007D42  00                 	db	0
   954  007D43  3C                 	db	60
   955  007D44  4A                 	db	74
   956  007D45  49                 	db	73
   957  007D46  49                 	db	73
   958  007D47  30                 	db	48
   959  007D48  00                 	db	0
   960  007D49  01                 	db	1
   961  007D4A  71                 	db	113
   962  007D4B  09                 	db	9
   963  007D4C  05                 	db	5
   964  007D4D  03                 	db	3
   965  007D4E  00                 	db	0
   966  007D4F  36                 	db	54
   967  007D50  49                 	db	73
   968  007D51  49                 	db	73
   969  007D52  49                 	db	73
   970  007D53  36                 	db	54
   971  007D54  00                 	db	0
   972  007D55  06                 	db	6
   973  007D56  49                 	db	73
   974  007D57  49                 	db	73
   975  007D58  29                 	db	41
   976  007D59  1E                 	db	30
   977  007D5A  00                 	db	0
   978  007D5B  00                 	db	0
   979  007D5C  36                 	db	54
   980  007D5D  36                 	db	54
   981  007D5E  00                 	db	0
   982  007D5F  00                 	db	0
   983  007D60  00                 	db	0
   984  007D61  00                 	db	0
   985  007D62  56                 	db	86
   986  007D63  36                 	db	54
   987  007D64  00                 	db	0
   988  007D65  00                 	db	0
   989  007D66  00                 	db	0
   990  007D67  08                 	db	8
   991  007D68  14                 	db	20
   992  007D69  22                 	db	34
   993  007D6A  41                 	db	65
   994  007D6B  00                 	db	0
   995  007D6C  00                 	db	0
   996  007D6D  14                 	db	20
   997  007D6E  14                 	db	20
   998  007D6F  14                 	db	20
   999  007D70  14                 	db	20
  1000  007D71  14                 	db	20
  1001  007D72  00                 	db	0
  1002  007D73  00                 	db	0
  1003  007D74  41                 	db	65
  1004  007D75  22                 	db	34
  1005  007D76  14                 	db	20
  1006  007D77  08                 	db	8
  1007  007D78  00                 	db	0
  1008  007D79  02                 	db	2
  1009  007D7A  01                 	db	1
  1010  007D7B  51                 	db	81
  1011  007D7C  09                 	db	9
  1012  007D7D  06                 	db	6
  1013  007D7E  00                 	db	0
  1014  007D7F  32                 	db	50
  1015  007D80  49                 	db	73
  1016  007D81  59                 	db	89
  1017  007D82  51                 	db	81
  1018  007D83  3E                 	db	62
  1019  007D84  00                 	db	0
  1020  007D85  7E                 	db	126
  1021  007D86  11                 	db	17
  1022  007D87  11                 	db	17
  1023  007D88  11                 	db	17
  1024  007D89  7E                 	db	126
  1025  007D8A  00                 	db	0
  1026  007D8B  7F                 	db	127
  1027  007D8C  49                 	db	73
  1028  007D8D  49                 	db	73
  1029  007D8E  49                 	db	73
  1030  007D8F  36                 	db	54
  1031  007D90  00                 	db	0
  1032  007D91  3E                 	db	62
  1033  007D92  41                 	db	65
  1034  007D93  41                 	db	65
  1035  007D94  41                 	db	65
  1036  007D95  22                 	db	34
  1037  007D96  00                 	db	0
  1038  007D97  7F                 	db	127
  1039  007D98  41                 	db	65
  1040  007D99  41                 	db	65
  1041  007D9A  22                 	db	34
  1042  007D9B  1C                 	db	28
  1043  007D9C  00                 	db	0
  1044  007D9D  7F                 	db	127
  1045  007D9E  49                 	db	73
  1046  007D9F  49                 	db	73
  1047  007DA0  49                 	db	73
  1048  007DA1  41                 	db	65
  1049  007DA2  00                 	db	0
  1050  007DA3  7F                 	db	127
  1051  007DA4  09                 	db	9
  1052  007DA5  09                 	db	9
  1053  007DA6  09                 	db	9
  1054  007DA7  01                 	db	1
  1055  007DA8  00                 	db	0
  1056  007DA9  3E                 	db	62
  1057  007DAA  41                 	db	65
  1058  007DAB  49                 	db	73
  1059  007DAC  49                 	db	73
  1060  007DAD  7A                 	db	122
  1061  007DAE  00                 	db	0
  1062  007DAF  7F                 	db	127
  1063  007DB0  08                 	db	8
  1064  007DB1  08                 	db	8
  1065  007DB2  08                 	db	8
  1066  007DB3  7F                 	db	127
  1067  007DB4  00                 	db	0
  1068  007DB5  00                 	db	0
  1069  007DB6  41                 	db	65
  1070  007DB7  7F                 	db	127
  1071  007DB8  41                 	db	65
  1072  007DB9  00                 	db	0
  1073  007DBA  00                 	db	0
  1074  007DBB  20                 	db	32
  1075  007DBC  40                 	db	64
  1076  007DBD  41                 	db	65
  1077  007DBE  3F                 	db	63
  1078  007DBF  01                 	db	1
  1079  007DC0  00                 	db	0
  1080  007DC1  7F                 	db	127
  1081  007DC2  08                 	db	8
  1082  007DC3  14                 	db	20
  1083  007DC4  22                 	db	34
  1084  007DC5  41                 	db	65
  1085  007DC6  00                 	db	0
  1086  007DC7  7F                 	db	127
  1087  007DC8  40                 	db	64
  1088  007DC9  40                 	db	64
  1089  007DCA  40                 	db	64
  1090  007DCB  40                 	db	64
  1091  007DCC  00                 	db	0
  1092  007DCD  7F                 	db	127
  1093  007DCE  02                 	db	2
  1094  007DCF  0C                 	db	12
  1095  007DD0  02                 	db	2
  1096  007DD1  7F                 	db	127
  1097  007DD2  00                 	db	0
  1098  007DD3  7F                 	db	127
  1099  007DD4  04                 	db	4
  1100  007DD5  08                 	db	8
  1101  007DD6  10                 	db	16
  1102  007DD7  7F                 	db	127
  1103  007DD8  00                 	db	0
  1104  007DD9  3E                 	db	62
  1105  007DDA  41                 	db	65
  1106  007DDB  41                 	db	65
  1107  007DDC  41                 	db	65
  1108  007DDD  3E                 	db	62
  1109  007DDE  00                 	db	0
  1110  007DDF  7F                 	db	127
  1111  007DE0  09                 	db	9
  1112  007DE1  09                 	db	9
  1113  007DE2  09                 	db	9
  1114  007DE3  06                 	db	6
  1115  007DE4  00                 	db	0
  1116  007DE5  3E                 	db	62
  1117  007DE6  41                 	db	65
  1118  007DE7  51                 	db	81
  1119  007DE8  21                 	db	33
  1120  007DE9  5E                 	db	94
  1121  007DEA  00                 	db	0
  1122  007DEB  7F                 	db	127
  1123  007DEC  09                 	db	9
  1124  007DED  19                 	db	25
  1125  007DEE  29                 	db	41
  1126  007DEF  46                 	db	70
  1127  007DF0  00                 	db	0
  1128  007DF1  46                 	db	70
  1129  007DF2  49                 	db	73
  1130  007DF3  49                 	db	73
  1131  007DF4  49                 	db	73
  1132  007DF5  31                 	db	49
  1133  007DF6  00                 	db	0
  1134  007DF7  01                 	db	1
  1135  007DF8  01                 	db	1
  1136  007DF9  7F                 	db	127
  1137  007DFA  01                 	db	1
  1138  007DFB  01                 	db	1
  1139  007DFC  00                 	db	0
  1140  007DFD  3F                 	db	63
  1141  007DFE  40                 	db	64
  1142  007DFF  40                 	db	64
  1143  007E00  40                 	db	64
  1144  007E01  3F                 	db	63
  1145  007E02  00                 	db	0
  1146  007E03  1F                 	db	31
  1147  007E04  20                 	db	32
  1148  007E05  40                 	db	64
  1149  007E06  20                 	db	32
  1150  007E07  1F                 	db	31
  1151  007E08  00                 	db	0
  1152  007E09  3F                 	db	63
  1153  007E0A  40                 	db	64
  1154  007E0B  38                 	db	56
  1155  007E0C  40                 	db	64
  1156  007E0D  3F                 	db	63
  1157  007E0E  00                 	db	0
  1158  007E0F  63                 	db	99
  1159  007E10  14                 	db	20
  1160  007E11  08                 	db	8
  1161  007E12  14                 	db	20
  1162  007E13  63                 	db	99
  1163  007E14  00                 	db	0
  1164  007E15  07                 	db	7
  1165  007E16  08                 	db	8
  1166  007E17  70                 	db	112
  1167  007E18  08                 	db	8
  1168  007E19  07                 	db	7
  1169  007E1A  00                 	db	0
  1170  007E1B  61                 	db	97
  1171  007E1C  51                 	db	81
  1172  007E1D  49                 	db	73
  1173  007E1E  45                 	db	69
  1174  007E1F  43                 	db	67
  1175  007E20  00                 	db	0
  1176  007E21  00                 	db	0
  1177  007E22  7F                 	db	127
  1178  007E23  41                 	db	65
  1179  007E24  41                 	db	65
  1180  007E25  00                 	db	0
  1181  007E26  00                 	db	0
  1182  007E27  55                 	db	85
  1183  007E28  2A                 	db	42
  1184  007E29  55                 	db	85
  1185  007E2A  2A                 	db	42
  1186  007E2B  55                 	db	85
  1187  007E2C  00                 	db	0
  1188  007E2D  00                 	db	0
  1189  007E2E  41                 	db	65
  1190  007E2F  41                 	db	65
  1191  007E30  7F                 	db	127
  1192  007E31  00                 	db	0
  1193  007E32  00                 	db	0
  1194  007E33  04                 	db	4
  1195  007E34  02                 	db	2
  1196  007E35  01                 	db	1
  1197  007E36  02                 	db	2
  1198  007E37  04                 	db	4
  1199  007E38  00                 	db	0
  1200  007E39  40                 	db	64
  1201  007E3A  40                 	db	64
  1202  007E3B  40                 	db	64
  1203  007E3C  40                 	db	64
  1204  007E3D  40                 	db	64
  1205  007E3E  00                 	db	0
  1206  007E3F  00                 	db	0
  1207  007E40  01                 	db	1
  1208  007E41  02                 	db	2
  1209  007E42  04                 	db	4
  1210  007E43  00                 	db	0
  1211  007E44  00                 	db	0
  1212  007E45  20                 	db	32
  1213  007E46  54                 	db	84
  1214  007E47  54                 	db	84
  1215  007E48  54                 	db	84
  1216  007E49  78                 	db	120
  1217  007E4A  00                 	db	0
  1218  007E4B  7F                 	db	127
  1219  007E4C  48                 	db	72
  1220  007E4D  44                 	db	68
  1221  007E4E  44                 	db	68
  1222  007E4F  38                 	db	56
  1223  007E50  00                 	db	0
  1224  007E51  38                 	db	56
  1225  007E52  44                 	db	68
  1226  007E53  44                 	db	68
  1227  007E54  44                 	db	68
  1228  007E55  20                 	db	32
  1229  007E56  00                 	db	0
  1230  007E57  38                 	db	56
  1231  007E58  44                 	db	68
  1232  007E59  44                 	db	68
  1233  007E5A  48                 	db	72
  1234  007E5B  7F                 	db	127
  1235  007E5C  00                 	db	0
  1236  007E5D  38                 	db	56
  1237  007E5E  54                 	db	84
  1238  007E5F  54                 	db	84
  1239  007E60  54                 	db	84
  1240  007E61  18                 	db	24
  1241  007E62  00                 	db	0
  1242  007E63  08                 	db	8
  1243  007E64  7E                 	db	126
  1244  007E65  09                 	db	9
  1245  007E66  01                 	db	1
  1246  007E67  02                 	db	2
  1247  007E68  00                 	db	0
  1248  007E69  0C                 	db	12
  1249  007E6A  52                 	db	82
  1250  007E6B  52                 	db	82
  1251  007E6C  52                 	db	82
  1252  007E6D  3E                 	db	62
  1253  007E6E  00                 	db	0
  1254  007E6F  7F                 	db	127
  1255  007E70  08                 	db	8
  1256  007E71  04                 	db	4
  1257  007E72  04                 	db	4
  1258  007E73  78                 	db	120
  1259  007E74  00                 	db	0
  1260  007E75  00                 	db	0
  1261  007E76  44                 	db	68
  1262  007E77  7D                 	db	125
  1263  007E78  40                 	db	64
  1264  007E79  00                 	db	0
  1265  007E7A  00                 	db	0
  1266  007E7B  20                 	db	32
  1267  007E7C  40                 	db	64
  1268  007E7D  44                 	db	68
  1269  007E7E  3D                 	db	61
  1270  007E7F  00                 	db	0
  1271  007E80  00                 	db	0
  1272  007E81  7F                 	db	127
  1273  007E82  10                 	db	16
  1274  007E83  28                 	db	40
  1275  007E84  44                 	db	68
  1276  007E85  00                 	db	0
  1277  007E86  00                 	db	0
  1278  007E87  00                 	db	0
  1279  007E88  41                 	db	65
  1280  007E89  7F                 	db	127
  1281  007E8A  40                 	db	64
  1282  007E8B  00                 	db	0
  1283  007E8C  00                 	db	0
  1284  007E8D  7C                 	db	124
  1285  007E8E  04                 	db	4
  1286  007E8F  18                 	db	24
  1287  007E90  04                 	db	4
  1288  007E91  78                 	db	120
  1289  007E92  00                 	db	0
  1290  007E93  7C                 	db	124
  1291  007E94  08                 	db	8
  1292  007E95  04                 	db	4
  1293  007E96  04                 	db	4
  1294  007E97  78                 	db	120
  1295  007E98  00                 	db	0
  1296  007E99  38                 	db	56
  1297  007E9A  44                 	db	68
  1298  007E9B  44                 	db	68
  1299  007E9C  44                 	db	68
  1300  007E9D  38                 	db	56
  1301  007E9E  00                 	db	0
  1302  007E9F  7C                 	db	124
  1303  007EA0  14                 	db	20
  1304  007EA1  14                 	db	20
  1305  007EA2  14                 	db	20
  1306  007EA3  08                 	db	8
  1307  007EA4  00                 	db	0
  1308  007EA5  08                 	db	8
  1309  007EA6  14                 	db	20
  1310  007EA7  14                 	db	20
  1311  007EA8  18                 	db	24
  1312  007EA9  7C                 	db	124
  1313  007EAA  00                 	db	0
  1314  007EAB  7C                 	db	124
  1315  007EAC  08                 	db	8
  1316  007EAD  04                 	db	4
  1317  007EAE  04                 	db	4
  1318  007EAF  08                 	db	8
  1319  007EB0  00                 	db	0
  1320  007EB1  48                 	db	72
  1321  007EB2  54                 	db	84
  1322  007EB3  54                 	db	84
  1323  007EB4  54                 	db	84
  1324  007EB5  20                 	db	32
  1325  007EB6  00                 	db	0
  1326  007EB7  04                 	db	4
  1327  007EB8  3F                 	db	63
  1328  007EB9  44                 	db	68
  1329  007EBA  40                 	db	64
  1330  007EBB  20                 	db	32
  1331  007EBC  00                 	db	0
  1332  007EBD  3C                 	db	60
  1333  007EBE  40                 	db	64
  1334  007EBF  40                 	db	64
  1335  007EC0  20                 	db	32
  1336  007EC1  7C                 	db	124
  1337  007EC2  00                 	db	0
  1338  007EC3  1C                 	db	28
  1339  007EC4  20                 	db	32
  1340  007EC5  40                 	db	64
  1341  007EC6  20                 	db	32
  1342  007EC7  1C                 	db	28
  1343  007EC8  00                 	db	0
  1344  007EC9  3C                 	db	60
  1345  007ECA  40                 	db	64
  1346  007ECB  30                 	db	48
  1347  007ECC  40                 	db	64
  1348  007ECD  3C                 	db	60
  1349  007ECE  00                 	db	0
  1350  007ECF  44                 	db	68
  1351  007ED0  28                 	db	40
  1352  007ED1  10                 	db	16
  1353  007ED2  28                 	db	40
  1354  007ED3  44                 	db	68
  1355  007ED4  00                 	db	0
  1356  007ED5  0C                 	db	12
  1357  007ED6  50                 	db	80
  1358  007ED7  50                 	db	80
  1359  007ED8  50                 	db	80
  1360  007ED9  3C                 	db	60
  1361  007EDA  00                 	db	0
  1362  007EDB  44                 	db	68
  1363  007EDC  64                 	db	100
  1364  007EDD  54                 	db	84
  1365  007EDE  4C                 	db	76
  1366  007EDF  44                 	db	68
  1367  007EE0  00                 	db	0
  1368  007EE1  08                 	db	8
  1369  007EE2  6C                 	db	108
  1370  007EE3  6A                 	db	106
  1371  007EE4  19                 	db	25
  1372  007EE5  08                 	db	8
  1373  007EE6  00                 	db	0
  1374  007EE7  0C                 	db	12
  1375  007EE8  12                 	db	18
  1376  007EE9  24                 	db	36
  1377  007EEA  12                 	db	18
  1378  007EEB  0C                 	db	12
  1379  007EEC  00                 	db	0
  1380  007EED  7E                 	db	126
  1381  007EEE  7E                 	db	126
  1382  007EEF  7E                 	db	126
  1383  007EF0  7E                 	db	126
  1384  007EF1  7E                 	db	126
  1385  007EF2  00                 	db	0
  1386  007EF3                     __end_of_FontLookup:
  1387                           	opt stack 0
  1388  007EF3                     _alarm_prob_weights:
  1389                           	opt stack 0
  1390  007EF3  0000               	dw	0
  1391  007EF5  0000               	dw	0
  1392  007EF7  FFFF               	dw	65535
  1393  007EF9  0000               	dw	0
  1394  007EFB  0000               	dw	0
  1395  007EFD  0000               	dw	0
  1396  007EFF  FFFF               	dw	65535
  1397  007F01  FFFD               	dw	65533
  1398  007F03  FFFF               	dw	65535
  1399  007F05  FFFD               	dw	65533
  1400  007F07  0000               	dw	0
  1401  007F09  FFFD               	dw	65533
  1402  007F0B  0000               	dw	0
  1403  007F0D  0000               	dw	0
  1404  007F0F  0000               	dw	0
  1405  007F11  0000               	dw	0
  1406  007F13  0000               	dw	0
  1407  007F15  0000               	dw	0
  1408  007F17  0000               	dw	0
  1409  007F19  0000               	dw	0
  1410  007F1B  0000               	dw	0
  1411  007F1D  0003               	dw	3
  1412  007F1F  0003               	dw	3
  1413  007F21  0003               	dw	3
  1414  007F23  0002               	dw	2
  1415  007F25  0000               	dw	0
  1416  007F27  0002               	dw	2
  1417  007F29  0002               	dw	2
  1418  007F2B  0000               	dw	0
  1419  007F2D  0000               	dw	0
  1420  007F2F  0000               	dw	0
  1421  007F31                     __end_of_alarm_prob_weights:
  1422                           	opt stack 0
  1423  007F31                     _growl_prob_weights:
  1424                           	opt stack 0
  1425  007F31  0000               	dw	0
  1426  007F33  0003               	dw	3
  1427  007F35  0003               	dw	3
  1428  007F37  0000               	dw	0
  1429  007F39  0000               	dw	0
  1430  007F3B  0000               	dw	0
  1431  007F3D  0000               	dw	0
  1432  007F3F  0000               	dw	0
  1433  007F41  0000               	dw	0
  1434  007F43  0000               	dw	0
  1435  007F45  0000               	dw	0
  1436  007F47  FFFF               	dw	65535
  1437  007F49  FFFD               	dw	65533
  1438  007F4B  FFFD               	dw	65533
  1439  007F4D  FFFD               	dw	65533
  1440  007F4F  FFFF               	dw	65535
  1441  007F51  FFFF               	dw	65535
  1442  007F53  0000               	dw	0
  1443  007F55  0000               	dw	0
  1444  007F57  0000               	dw	0
  1445  007F59  0000               	dw	0
  1446  007F5B  0000               	dw	0
  1447  007F5D  0002               	dw	2
  1448  007F5F  0000               	dw	0
  1449  007F61  0000               	dw	0
  1450  007F63  0000               	dw	0
  1451  007F65  0002               	dw	2
  1452  007F67  0003               	dw	3
  1453  007F69  0002               	dw	2
  1454  007F6B  0000               	dw	0
  1455  007F6D  0000               	dw	0
  1456  007F6F                     __end_of_growl_prob_weights:
  1457                           	opt stack 0
  1458  007F6F                     _horn_prob_weights:
  1459                           	opt stack 0
  1460  007F6F  0000               	dw	0
  1461  007F71  0000               	dw	0
  1462  007F73  0000               	dw	0
  1463  007F75  0000               	dw	0
  1464  007F77  0000               	dw	0
  1465  007F79  0000               	dw	0
  1466  007F7B  0002               	dw	2
  1467  007F7D  0003               	dw	3
  1468  007F7F  0002               	dw	2
  1469  007F81  0000               	dw	0
  1470  007F83  0000               	dw	0
  1471  007F85  0000               	dw	0
  1472  007F87  0000               	dw	0
  1473  007F89  0000               	dw	0
  1474  007F8B  0000               	dw	0
  1475  007F8D  0003               	dw	3
  1476  007F8F  0002               	dw	2
  1477  007F91  0000               	dw	0
  1478  007F93  0000               	dw	0
  1479  007F95  FFFD               	dw	65533
  1480  007F97  FFFF               	dw	65535
  1481  007F99  0000               	dw	0
  1482  007F9B  0000               	dw	0
  1483  007F9D  0003               	dw	3
  1484  007F9F  0000               	dw	0
  1485  007FA1  0000               	dw	0
  1486  007FA3  FFFF               	dw	65535
  1487  007FA5  FFFD               	dw	65533
  1488  007FA7  FFFD               	dw	65533
  1489  007FA9  FFFF               	dw	65535
  1490  007FAB  0000               	dw	0
  1491  007FAD                     __end_of_horn_prob_weights:
  1492                           	opt stack 0
  1493  007FAD                     _scream_prob_weights:
  1494                           	opt stack 0
  1495  007FAD  0000               	dw	0
  1496  007FAF  0003               	dw	3
  1497  007FB1  0000               	dw	0
  1498  007FB3  0000               	dw	0
  1499  007FB5  0003               	dw	3
  1500  007FB7  0002               	dw	2
  1501  007FB9  0002               	dw	2
  1502  007FBB  0003               	dw	3
  1503  007FBD  0002               	dw	2
  1504  007FBF  0000               	dw	0
  1505  007FC1  0000               	dw	0
  1506  007FC3  FFFF               	dw	65535
  1507  007FC5  FFFF               	dw	65535
  1508  007FC7  FFFD               	dw	65533
  1509  007FC9  0000               	dw	0
  1510  007FCB  0000               	dw	0
  1511  007FCD  0000               	dw	0
  1512  007FCF  0000               	dw	0
  1513  007FD1  0000               	dw	0
  1514  007FD3  FFFF               	dw	65535
  1515  007FD5  FFFD               	dw	65533
  1516  007FD7  FFFD               	dw	65533
  1517  007FD9  0000               	dw	0
  1518  007FDB  0000               	dw	0
  1519  007FDD  0000               	dw	0
  1520  007FDF  0000               	dw	0
  1521  007FE1  0000               	dw	0
  1522  007FE3  0000               	dw	0
  1523  007FE5  0000               	dw	0
  1524  007FE7  0000               	dw	0
  1525  007FE9  0000               	dw	0
  1526  007FEB                     __end_of_scream_prob_weights:
  1527                           	opt stack 0
  1528  007FEB                     _dpowers:
  1529                           	opt stack 0
  1530  007FEB  0001               	dw	1
  1531  007FED  000A               	dw	10
  1532  007FEF  0064               	dw	100
  1533  007FF1  03E8               	dw	1000
  1534  007FF3  2710               	dw	10000
  1535  007FF5                     __end_of_dpowers:
  1536                           	opt stack 0
  1537  0000                     _ADCON0	set	4034
  1538  0000                     _ADCON0bits	set	4034
  1539  0000                     _ADCON1	set	4033
  1540  0000                     _ADCON2	set	4032
  1541  0000                     _ADRESH	set	4036
  1542  0000                     _ADRESL	set	4035
  1543  0000                     _ANSELAbits	set	3896
  1544  0000                     _ANSELC	set	3898
  1545  0000                     _INTCONbits	set	4082
  1546  0000                     _LATBbits	set	3978
  1547  0000                     _LATC	set	3979
  1548  0000                     _LATCbits	set	3979
  1549  0000                     _OSCCON2bits	set	4050
  1550  0000                     _OSCCONbits	set	4051
  1551  0000                     _OSCTUNEbits	set	3995
  1552  0000                     _PIE1	set	3997
  1553  0000                     _PIE1bits	set	3997
  1554  0000                     _PIR1bits	set	3998
  1555  0000                     _RCSTA1	set	4011
  1556  0000                     _RCSTA1bits	set	4011
  1557  0000                     _SPBRG1	set	4015
  1558  0000                     _SPBRGH1	set	4016
  1559  0000                     _SSP1BUF	set	4041
  1560  0000                     _SSP1CON1	set	4038
  1561  0000                     _SSP1CON1bits	set	4038
  1562  0000                     _SSP1STAT	set	4039
  1563  0000                     _SSP1STATbits	set	4039
  1564  0000                     _TRISAbits	set	3986
  1565  0000                     _TRISBbits	set	3987
  1566  0000                     _TRISC	set	3988
  1567  0000                     _TRISCbits	set	3988
  1568  0000                     _TXREG1	set	4013
  1569  0000                     _TXSTA1	set	4012
  1570  0000                     _TXSTA1bits	set	4012
  1571  007FF5                     __stringdata:
  1572                           	opt stack 0
  1573  007FF5                     STR_1:
  1574  007FF5  25                 	db	37
  1575  007FF6  63                 	db	99	;'c'
  1576  007FF7  20                 	db	32
  1577  007FF8  25                 	db	37
  1578  007FF9  64                 	db	100	;'d'
  1579  007FFA  20                 	db	32
  1580  007FFB  25                 	db	37
  1581  007FFC  63                 	db	99	;'c'
  1582  007FFD  00                 	db	0
  1583  007FFE                     __end_of__stringdata:
  1584                           	opt stack 0
  1585                           
  1586                           ; #config settings
  1587  007FFE  00                 	db	0	; dummy byte at the end
  1588  0000                     
  1589                           	psect	cinit
  1590  00590C                     __pcinit:
  1591                           	opt stack 0
  1592  00590C                     start_initialization:
  1593                           	opt stack 0
  1594  00590C                     __initialization:
  1595                           	opt stack 0
  1596                           
  1597                           ; Clear objects allocated to BIGRAM (618 bytes)
  1598  00590C  EE02  F000         	lfsr	0,__pbssBIGRAM
  1599  005910  EE12 F06A          	lfsr	1,618
  1600  005914                     clear_0:
  1601  005914  6AEE               	clrf	postinc0,c
  1602  005916  50E5               	movf	postdec1,w,c
  1603  005918  50E1               	movf	fsr1l,w,c
  1604  00591A  E1FC               	bnz	clear_0
  1605  00591C  50E2               	movf	fsr1h,w,c
  1606  00591E  E1FA               	bnz	clear_0
  1607                           
  1608                           ; Clear objects allocated to BANK1 (256 bytes)
  1609  005920  EE01  F000         	lfsr	0,__pbssBANK1
  1610  005924  EE11 F000          	lfsr	1,256
  1611  005928                     clear_1:
  1612  005928  6AEE               	clrf	postinc0,c
  1613  00592A  50E5               	movf	postdec1,w,c
  1614  00592C  50E1               	movf	fsr1l,w,c
  1615  00592E  E1FC               	bnz	clear_1
  1616  005930  50E2               	movf	fsr1h,w,c
  1617  005932  E1FA               	bnz	clear_1
  1618                           
  1619                           ; Clear objects allocated to BANK0 (101 bytes)
  1620  005934  EE00  F060         	lfsr	0,__pbssBANK0
  1621  005938  0E65               	movlw	101
  1622  00593A                     clear_2:
  1623  00593A  6AEE               	clrf	postinc0,c
  1624  00593C  06E8               	decf	wreg,f,c
  1625  00593E  E1FD               	bnz	clear_2
  1626                           
  1627                           ; Clear objects allocated to COMRAM (6 bytes)
  1628  005940  6A5F               	clrf	(__pbssCOMRAM+5)& (0+255),c
  1629  005942  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
  1630  005944  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1631  005946  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1632  005948  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1633  00594A  6A5A               	clrf	__pbssCOMRAM& (0+255),c
  1634  00594C                     end_of_initialization:
  1635                           	opt stack 0
  1636  00594C                     __end_of__initialization:
  1637                           	opt stack 0
  1638  00594C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1639  00594E  6EF8               	movwf	tblptru,c
  1640  005950  0100               	movlb	0
  1641  005952  EF14  F034         	goto	_main	;jump to C main() function
  1642                           tblptru	equ	0xFF8
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1h	equ	0xFE2
  1647                           fsr1l	equ	0xFE1
  1648                           
  1649                           	psect	bssCOMRAM
  1650  00005A                     __pbssCOMRAM:
  1651                           	opt stack 0
  1652  00005A                     _LcdMemIdx:
  1653                           	opt stack 0
  1654  00005A                     	ds	2
  1655  00005C                     _i:
  1656                           	opt stack 0
  1657  00005C                     	ds	2
  1658  00005E                     _USART1_Status:
  1659                           	opt stack 0
  1660  00005E                     	ds	1
  1661  00005F                     _input:
  1662                           	opt stack 0
  1663  00005F                     	ds	1
  1664                           tblptru	equ	0xFF8
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           
  1671                           	psect	bssBANK0
  1672  000060                     __pbssBANK0:
  1673                           	opt stack 0
  1674  000060                     _oldRealNumbers:
  1675                           	opt stack 0
  1676  000060                     	ds	62
  1677  00009E                     _data:
  1678                           	opt stack 0
  1679  00009E                     	ds	5
  1680  0000A3                     _baud_rate:
  1681                           	opt stack 0
  1682  0000A3                     	ds	4
  1683  0000A7                     _alarm_prob:
  1684                           	opt stack 0
  1685  0000A7                     	ds	2
  1686  0000A9                     _alarm_tally:
  1687                           	opt stack 0
  1688  0000A9                     	ds	2
  1689  0000AB                     _growl_prob:
  1690                           	opt stack 0
  1691  0000AB                     	ds	2
  1692  0000AD                     _growl_tally:
  1693                           	opt stack 0
  1694  0000AD                     	ds	2
  1695  0000AF                     _horn_prob:
  1696                           	opt stack 0
  1697  0000AF                     	ds	2
  1698  0000B1                     _horn_tally:
  1699                           	opt stack 0
  1700  0000B1                     	ds	2
  1701  0000B3                     _max_tally:
  1702                           	opt stack 0
  1703  0000B3                     	ds	2
  1704  0000B5                     _scream_prob:
  1705                           	opt stack 0
  1706  0000B5                     	ds	2
  1707  0000B7                     _scream_tally:
  1708                           	opt stack 0
  1709  0000B7                     	ds	2
  1710  0000B9                     _total_tally:
  1711                           	opt stack 0
  1712  0000B9                     	ds	2
  1713  0000BB                     _guesses:
  1714                           	opt stack 0
  1715  0000BB                     	ds	10
  1716                           tblptru	equ	0xFF8
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	bssBANK1
  1724  000100                     __pbssBANK1:
  1725                           	opt stack 0
  1726  000100                     _imaginary_numbers:
  1727                           	opt stack 0
  1728  000100                     	ds	128
  1729  000180                     _real_numbers:
  1730                           	opt stack 0
  1731  000180                     	ds	128
  1732                           tblptru	equ	0xFF8
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           
  1739                           	psect	bssBIGRAM
  1740  000200                     __pbssBIGRAM:
  1741                           	opt stack 0
  1742  000200                     _LcdMemory:
  1743                           	opt stack 0
  1744  000200                     	ds	618
  1745                           tblptru	equ	0xFF8
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postdec1	equ	0xFE5
  1749                           fsr1h	equ	0xFE2
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	cstackBANK0
  1753  0000C5                     __pcstackBANK0:
  1754                           	opt stack 0
  1755  0000C5                     main@adc_value:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x0
  1759  0000C5                     	ds	2
  1760  0000C7                     main@root:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x2
  1764  0000C7                     	ds	4
  1765  0000CB                     main@place:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x6
  1769  0000CB                     	ds	4
  1770  0000CF                     main@k:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0xA
  1774  0000CF                     	ds	2
  1775  0000D1                     main@i:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0xC
  1779  0000D1                     	ds	2
  1780                           tblptru	equ	0xFF8
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1h	equ	0xFE2
  1785                           fsr1l	equ	0xFE1
  1786                           
  1787                           	psect	cstackCOMRAM
  1788  000001                     __pcstackCOMRAM:
  1789                           	opt stack 0
  1790  000001                     ?___wmul:
  1791                           	opt stack 0
  1792  000001                     ?___lwdiv:
  1793                           	opt stack 0
  1794  000001                     ?___lmul:
  1795                           	opt stack 0
  1796  000001                     OpenADC@config2:
  1797                           	opt stack 0
  1798  000001                     OpenSPI1@bus_mode:
  1799                           	opt stack 0
  1800  000001                     WriteSPI1@TempVar:
  1801                           	opt stack 0
  1802  000001                     Write1USART@data:
  1803                           	opt stack 0
  1804  000001                     Delay10TCYx@unit:
  1805                           	opt stack 0
  1806  000001                     LCDClear@i:
  1807                           	opt stack 0
  1808  000001                     Open1USART@spbrg:
  1809                           	opt stack 0
  1810  000001                     ___wmul@multiplier:
  1811                           	opt stack 0
  1812  000001                     ___lwdiv@dividend:
  1813                           	opt stack 0
  1814  000001                     Delay@a:
  1815                           	opt stack 0
  1816  000001                     ___lmul@multiplier:
  1817                           	opt stack 0
  1818                           
  1819                           ; 4 bytes @ 0x0
  1820  000001                     	ds	1
  1821  000002                     sendChar@character:
  1822                           	opt stack 0
  1823  000002                     OpenADC@config3:
  1824                           	opt stack 0
  1825  000002                     OpenSPI1@smp_phase:
  1826                           	opt stack 0
  1827  000002                     WriteSPI1@data_out:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x1
  1831  000002                     	ds	1
  1832  000003                     ??_OpenADC:
  1833  000003                     ??_Open1USART:
  1834  000003                     OpenSPI1@sync_mode:
  1835                           	opt stack 0
  1836  000003                     sendIntArray@array:
  1837                           	opt stack 0
  1838  000003                     ___wmul@multiplicand:
  1839                           	opt stack 0
  1840  000003                     ___lwdiv@divisor:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x2
  1844  000003                     	ds	2
  1845  000005                     OpenADC@config:
  1846                           	opt stack 0
  1847  000005                     sendIntArray@size:
  1848                           	opt stack 0
  1849  000005                     ___wmul@product:
  1850                           	opt stack 0
  1851  000005                     ___lwdiv@quotient:
  1852                           	opt stack 0
  1853  000005                     ___lmul@multiplicand:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x4
  1857  000005                     	ds	1
  1858  000006                     Open1USART@config:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x5
  1862  000006                     	ds	1
  1863  000007                     ?___awdiv:
  1864                           	opt stack 0
  1865  000007                     LCDSend@cd:
  1866                           	opt stack 0
  1867  000007                     ___lwdiv@counter:
  1868                           	opt stack 0
  1869  000007                     ___awdiv@dividend:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x6
  1873  000007                     	ds	1
  1874  000008                     ?___lwmod:
  1875                           	opt stack 0
  1876  000008                     LCDSend@data:
  1877                           	opt stack 0
  1878  000008                     ___lwmod@dividend:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x7
  1882  000008                     	ds	1
  1883  000009                     LCDUpdate@x:
  1884                           	opt stack 0
  1885  000009                     ___awdiv@divisor:
  1886                           	opt stack 0
  1887  000009                     ___lmul@product:
  1888                           	opt stack 0
  1889                           
  1890                           ; 4 bytes @ 0x8
  1891  000009                     	ds	1
  1892  00000A                     ___lwmod@divisor:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x9
  1896  00000A                     	ds	1
  1897  00000B                     ___awdiv@counter:
  1898                           	opt stack 0
  1899  00000B                     LCDUpdate@y:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0xA
  1903  00000B                     	ds	1
  1904  00000C                     ___awdiv@sign:
  1905                           	opt stack 0
  1906  00000C                     ___lwmod@counter:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0xB
  1910  00000C                     	ds	1
  1911  00000D                     LCDChrXY@y:
  1912                           	opt stack 0
  1913  00000D                     fix_fft@fr:
  1914                           	opt stack 0
  1915  00000D                     ___awdiv@quotient:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0xC
  1919  00000D                     	ds	1
  1920  00000E                     LCDChrXY@ch:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0xD
  1924  00000E                     	ds	1
  1925  00000F                     ??_LCDChrXY:
  1926  00000F                     ?_sprintf:
  1927                           	opt stack 0
  1928  00000F                     fix_fft@fi:
  1929                           	opt stack 0
  1930  00000F                     sprintf@sp:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0xE
  1934  00000F                     	ds	2
  1935  000011                     fix_fft@m:
  1936                           	opt stack 0
  1937  000011                     LCDChrXY@offset:
  1938                           	opt stack 0
  1939  000011                     sprintf@f:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x10
  1943  000011                     	ds	2
  1944  000013                     ??_fix_fft:
  1945  000013                     LCDChrXY@x:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x12
  1949  000013                     	ds	1
  1950  000014                     LCDChrXY@mid_shift:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x13
  1954  000014                     	ds	2
  1955  000016                     LCDChrXY@i:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x15
  1959  000016                     	ds	2
  1960  000018                     LCDChrXY@index:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x17
  1964  000018                     	ds	1
  1965  000019                     ??_sprintf:
  1966                           
  1967                           ; 0 bytes @ 0x18
  1968  000019                     	ds	1
  1969  00001A                     LCDStr@dataPtr:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x19
  1973  00001A                     	ds	1
  1974  00001B                     sprintf@flag:
  1975                           	opt stack 0
  1976  00001B                     fix_fft@k:
  1977                           	opt stack 0
  1978                           
  1979                           ; 4 bytes @ 0x1A
  1980  00001B                     	ds	1
  1981  00001C                     LCDStr@inv:
  1982                           	opt stack 0
  1983  00001C                     sprintf@prec:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x1B
  1987  00001C                     	ds	1
  1988  00001D                     LCDStr@row:
  1989                           	opt stack 0
  1990  00001D                     sprintf@ap:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x1C
  1994  00001D                     	ds	1
  1995  00001E                     LCDStr@x:
  1996                           	opt stack 0
  1997                           
  1998                           ; 1 bytes @ 0x1D
  1999  00001E                     	ds	1
  2000  00001F                     fix_fft@nn:
  2001                           	opt stack 0
  2002  00001F                     sprintf@_val:
  2003                           	opt stack 0
  2004                           
  2005                           ; 5 bytes @ 0x1E
  2006  00001F                     	ds	4
  2007  000023                     fix_fft@istep:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x22
  2011  000023                     	ds	1
  2012  000024                     sprintf@c:
  2013                           	opt stack 0
  2014                           
  2015                           ; 1 bytes @ 0x23
  2016  000024                     	ds	1
  2017  000025                     writeGuess@prob:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x24
  2021  000025                     	ds	2
  2022  000027                     writeGuess@row:
  2023                           	opt stack 0
  2024  000027                     fix_fft@qr:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x26
  2028  000027                     	ds	2
  2029  000029                     fix_fft@qi:
  2030                           	opt stack 0
  2031  000029                     writeGuess@percent:
  2032                           	opt stack 0
  2033                           
  2034                           ; 8 bytes @ 0x28
  2035  000029                     	ds	2
  2036  00002B                     fix_fft@wr:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x2A
  2040  00002B                     	ds	2
  2041  00002D                     fix_fft@wi:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x2C
  2045  00002D                     	ds	2
  2046  00002F                     fix_fft@n:
  2047                           	opt stack 0
  2048                           
  2049                           ; 4 bytes @ 0x2E
  2050  00002F                     	ds	2
  2051  000031                     writeGuess@guess:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x30
  2055  000031                     	ds	2
  2056  000033                     fix_fft@tr:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x32
  2060  000033                     	ds	2
  2061  000035                     fix_fft@ti:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x34
  2065  000035                     	ds	2
  2066  000037                     fix_fft@b:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x36
  2070  000037                     	ds	2
  2071  000039                     fix_fft@i:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x38
  2075  000039                     	ds	4
  2076  00003D                     fix_fft@mr:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x3C
  2080  00003D                     	ds	4
  2081  000041                     fix_fft@l:
  2082                           	opt stack 0
  2083                           
  2084                           ; 4 bytes @ 0x40
  2085  000041                     	ds	4
  2086  000045                     fix_fft@j:
  2087                           	opt stack 0
  2088                           
  2089                           ; 4 bytes @ 0x44
  2090  000045                     	ds	4
  2091  000049                     fix_fft@c:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0x48
  2095  000049                     	ds	4
  2096  00004D                     ??_main:
  2097                           
  2098                           ; 0 bytes @ 0x4C
  2099  00004D                     	ds	13
  2100                           tblptru	equ	0xFF8
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           postdec1	equ	0xFE5
  2104                           fsr1h	equ	0xFE2
  2105                           fsr1l	equ	0xFE1
  2106                           
  2107 ;;
  2108 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2109 ;;
  2110 ;; *************** function _main *****************
  2111 ;; Defined at:
  2112 ;;		line 71 in file "main pic18.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  place           4    6[BANK0 ] long 
  2117 ;;  root            4    2[BANK0 ] long 
  2118 ;;  i               2   12[BANK0 ] short 
  2119 ;;  k               2   10[BANK0 ] int 
  2120 ;;  adc_value       2    0[BANK0 ] unsigned int 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2130 ;;      Params:         0       0       0       0       0       0       0
  2131 ;;      Locals:         0      14       0       0       0       0       0
  2132 ;;      Temps:         13       0       0       0       0       0       0
  2133 ;;      Totals:        13      14       0       0       0       0       0
  2134 ;;Total ram usage:       27 bytes
  2135 ;; Hardware stack levels required when called:    5
  2136 ;; This function calls:
  2137 ;;		_BusyADC
  2138 ;;		_ConvertADC
  2139 ;;		___awdiv
  2140 ;;		___wmul
  2141 ;;		_fix_fft
  2142 ;;		_sendIntArray
  2143 ;;		_setup
  2144 ;;		_writeGuess
  2145 ;; This function is called by:
  2146 ;;		Startup code after reset
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text0
  2151  006828                     __ptext0:
  2152                           	opt stack 0
  2153  006828                     _main:
  2154                           	opt stack 25
  2155                           
  2156                           ;main pic18.c: 72: unsigned int adc_value;
  2157                           ;main pic18.c: 75: setup();
  2158                           
  2159                           ;incstack = 0
  2160  006828  ECEC  F02D         	call	_setup	;wreg free
  2161  00682C                     l2495:
  2162                           
  2163                           ;main pic18.c: 78: short i = 0;
  2164  00682C  0E00               	movlw	0
  2165  00682E  0100               	movlb	0	; () banked
  2166  006830  6FD2               	movwf	(main@i+1)& (0+255),b
  2167  006832  0E00               	movlw	0
  2168  006834  0100               	movlb	0	; () banked
  2169  006836  6FD1               	movwf	main@i& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;main pic18.c: 79: for (i = 0; i < 64; i++) {
  2173  006838  0E00               	movlw	0
  2174  00683A  0100               	movlb	0	; () banked
  2175  00683C  6FD2               	movwf	(main@i+1)& (0+255),b
  2176  00683E  0E00               	movlw	0
  2177  006840  0100               	movlb	0	; () banked
  2178  006842  6FD1               	movwf	main@i& (0+255),b
  2179  006844                     
  2180                           ; BSR set to: 0
  2181  006844  0100               	movlb	0	; () banked
  2182  006846  51D2               	movf	(main@i+1)& (0+255),w,b
  2183  006848  0A80               	xorlw	128
  2184  00684A  0F80               	addlw	-128
  2185  00684C  0E40               	movlw	64
  2186  00684E  B4D8               	btfsc	status,2,c
  2187  006850  5DD1               	subwf	main@i& (0+255),w,b
  2188  006852  B0D8               	btfsc	status,0,c
  2189  006854  D04A               	goto	l2517
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main pic18.c: 80: ConvertADC();
  2193                           
  2194                           ; BSR set to: 0
  2195                           
  2196                           ; BSR set to: 0
  2197  006856  ECB6  F02B         	call	_ConvertADC	;wreg free
  2198  00685A                     l2505:
  2199  00685A  ECB8  F02B         	call	_BusyADC	;wreg free
  2200  00685E  0900               	iorlw	0
  2201  006860  A4D8               	btfss	status,2,c
  2202  006862  D7FB               	goto	l2505
  2203                           
  2204                           ;main pic18.c: 86: adc_value = ((short)(ADRESH << 8) + (short)ADRESL) - 512;
  2205  006864  50C3               	movf	4035,w,c	;volatile
  2206  006866  CFC4 F04D          	movff	4036,??_main	;volatile
  2207  00686A  6A4E               	clrf	(??_main+1)& (0+255),c
  2208  00686C  C04D  F04E         	movff	??_main,??_main+1
  2209  006870  6A4D               	clrf	??_main,c
  2210  006872  264D               	addwf	??_main,f,c
  2211  006874  0E00               	movlw	0
  2212  006876  224E               	addwfc	??_main+1,f,c
  2213  006878  0E00               	movlw	0
  2214  00687A  244D               	addwf	??_main,w,c
  2215  00687C  0100               	movlb	0	; () banked
  2216  00687E  6FC5               	movwf	main@adc_value& (0+255),b
  2217  006880  0EFE               	movlw	254
  2218  006882  204E               	addwfc	??_main+1,w,c
  2219  006884  0100               	movlb	0	; () banked
  2220  006886  6FC6               	movwf	(main@adc_value+1)& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main pic18.c: 87: real_numbers[i] = adc_value;
  2224  006888  0E80               	movlw	low _real_numbers
  2225  00688A  6E4D               	movwf	??_main& (0+255),c
  2226  00688C  0E01               	movlw	high _real_numbers
  2227  00688E  6E4E               	movwf	(??_main+1)& (0+255),c
  2228  006890  90D8               	bcf	status,0,c
  2229  006892  0100               	movlb	0	; () banked
  2230  006894  35D1               	rlcf	main@i& (0+255),w,b
  2231  006896  6ED9               	movwf	fsr2l,c
  2232  006898  0100               	movlb	0	; () banked
  2233  00689A  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2234  00689C  6EDA               	movwf	fsr2h,c
  2235  00689E  504D               	movf	??_main,w,c
  2236  0068A0  26D9               	addwf	fsr2l,f,c
  2237  0068A2  504E               	movf	??_main+1,w,c
  2238  0068A4  22DA               	addwfc	fsr2h,f,c
  2239  0068A6  0100               	movlb	0	; () banked
  2240  0068A8  C0C5  FFDE         	movff	main@adc_value,postinc2
  2241  0068AC  0100               	movlb	0	; () banked
  2242  0068AE  C0C6  FFDD         	movff	main@adc_value+1,postdec2
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main pic18.c: 91: imaginary_numbers[i] = 0;
  2246  0068B2  0E00               	movlw	low _imaginary_numbers
  2247  0068B4  6E4D               	movwf	??_main& (0+255),c
  2248  0068B6  0E01               	movlw	high _imaginary_numbers
  2249  0068B8  6E4E               	movwf	(??_main+1)& (0+255),c
  2250  0068BA  90D8               	bcf	status,0,c
  2251  0068BC  0100               	movlb	0	; () banked
  2252  0068BE  35D1               	rlcf	main@i& (0+255),w,b
  2253  0068C0  6ED9               	movwf	fsr2l,c
  2254  0068C2  0100               	movlb	0	; () banked
  2255  0068C4  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2256  0068C6  6EDA               	movwf	fsr2h,c
  2257  0068C8  504D               	movf	??_main,w,c
  2258  0068CA  26D9               	addwf	fsr2l,f,c
  2259  0068CC  504E               	movf	??_main+1,w,c
  2260  0068CE  22DA               	addwfc	fsr2h,f,c
  2261  0068D0  0E00               	movlw	0
  2262  0068D2  6EDE               	movwf	postinc2,c
  2263  0068D4  0E00               	movlw	0
  2264  0068D6  6EDD               	movwf	postdec2,c
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main pic18.c: 92: _delay(1500);
  2268  0068D8  0EFA               	movlw	250
  2269  0068DA                     u2567:
  2270  0068DA  D000               	nop2	
  2271  0068DC  F000               	nop	
  2272  0068DE  2EE8               	decfsz	wreg,f,c
  2273  0068E0  D7FC               	goto	u2567
  2274  0068E2  0100               	movlb	0	; () banked
  2275  0068E4  4BD1               	infsnz	main@i& (0+255),f,b
  2276  0068E6  2BD2               	incf	(main@i+1)& (0+255),f,b
  2277  0068E8  D7AD               	goto	L1
  2278  0068EA                     l2517:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main pic18.c: 93: }
  2282                           ;main pic18.c: 98: fix_fft(real_numbers, imaginary_numbers, 6);
  2283  0068EA  0101               	movlb	1	; () banked
  2284  0068EC  0E01               	movlw	high _real_numbers
  2285  0068EE  6E0E               	movwf	fix_fft@fr+1,c
  2286  0068F0  0101               	movlb	1	; () banked
  2287  0068F2  0E80               	movlw	low _real_numbers
  2288  0068F4  6E0D               	movwf	fix_fft@fr,c
  2289  0068F6  0101               	movlb	1	; () banked
  2290  0068F8  0E01               	movlw	high _imaginary_numbers
  2291  0068FA  6E10               	movwf	fix_fft@fi+1,c
  2292  0068FC  0101               	movlb	1	; () banked
  2293  0068FE  0E00               	movlw	low _imaginary_numbers
  2294  006900  6E0F               	movwf	fix_fft@fi,c
  2295  006902  0E00               	movlw	0
  2296  006904  6E12               	movwf	fix_fft@m+1,c
  2297  006906  0E06               	movlw	6
  2298  006908  6E11               	movwf	fix_fft@m,c
  2299  00690A  EC4E  F030         	call	_fix_fft	;wreg free
  2300                           
  2301                           ;main pic18.c: 100: long place, root;
  2302                           ;main pic18.c: 101: int k = 0;
  2303  00690E  0E00               	movlw	0
  2304  006910  0100               	movlb	0	; () banked
  2305  006912  6FD0               	movwf	(main@k+1)& (0+255),b
  2306  006914  0E00               	movlw	0
  2307  006916  0100               	movlb	0	; () banked
  2308  006918  6FCF               	movwf	main@k& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;main pic18.c: 102: for (k=0; k < 32; k++) {
  2312  00691A  0E00               	movlw	0
  2313  00691C  0100               	movlb	0	; () banked
  2314  00691E  6FD0               	movwf	(main@k+1)& (0+255),b
  2315  006920  0E00               	movlw	0
  2316  006922  0100               	movlb	0	; () banked
  2317  006924  6FCF               	movwf	main@k& (0+255),b
  2318  006926                     
  2319                           ; BSR set to: 0
  2320  006926  0100               	movlb	0	; () banked
  2321  006928  51D0               	movf	(main@k+1)& (0+255),w,b
  2322  00692A  0A80               	xorlw	128
  2323  00692C  0F80               	addlw	-128
  2324  00692E  0E20               	movlw	32
  2325  006930  B4D8               	btfsc	status,2,c
  2326  006932  5DCF               	subwf	main@k& (0+255),w,b
  2327  006934  B0D8               	btfsc	status,0,c
  2328  006936  D1B7               	goto	l2559
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main pic18.c: 103: real_numbers[k] = (real_numbers[k] * real_numbers[k] +
  2332                           ;main pic18.c: 104: imaginary_numbers[k] * imaginary_numbers[k]);
  2333                           
  2334                           ; BSR set to: 0
  2335                           
  2336                           ; BSR set to: 0
  2337  006938  0E80               	movlw	low _real_numbers
  2338  00693A  6E4D               	movwf	??_main& (0+255),c
  2339  00693C  0E01               	movlw	high _real_numbers
  2340  00693E  6E4E               	movwf	(??_main+1)& (0+255),c
  2341  006940  90D8               	bcf	status,0,c
  2342  006942  0100               	movlb	0	; () banked
  2343  006944  35CF               	rlcf	main@k& (0+255),w,b
  2344  006946  6ED9               	movwf	fsr2l,c
  2345  006948  0100               	movlb	0	; () banked
  2346  00694A  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2347  00694C  6EDA               	movwf	fsr2h,c
  2348  00694E  504D               	movf	??_main,w,c
  2349  006950  26D9               	addwf	fsr2l,f,c
  2350  006952  504E               	movf	??_main+1,w,c
  2351  006954  22DA               	addwfc	fsr2h,f,c
  2352  006956  CFDE F001          	movff	postinc2,___wmul@multiplier
  2353  00695A  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2354  00695E  0E80               	movlw	low _real_numbers
  2355  006960  6E4F               	movwf	(??_main+2)& (0+255),c
  2356  006962  0E01               	movlw	high _real_numbers
  2357  006964  6E50               	movwf	(??_main+3)& (0+255),c
  2358  006966  90D8               	bcf	status,0,c
  2359  006968  0100               	movlb	0	; () banked
  2360  00696A  35CF               	rlcf	main@k& (0+255),w,b
  2361  00696C  6ED9               	movwf	fsr2l,c
  2362  00696E  0100               	movlb	0	; () banked
  2363  006970  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2364  006972  6EDA               	movwf	fsr2h,c
  2365  006974  504F               	movf	??_main+2,w,c
  2366  006976  26D9               	addwf	fsr2l,f,c
  2367  006978  5050               	movf	??_main+3,w,c
  2368  00697A  22DA               	addwfc	fsr2h,f,c
  2369  00697C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2370  006980  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2371  006984  EC05  F02C         	call	___wmul	;wreg free
  2372  006988  C001  F051         	movff	?___wmul,??_main+4
  2373  00698C  C002  F052         	movff	?___wmul+1,??_main+5
  2374  006990  0E00               	movlw	low _imaginary_numbers
  2375  006992  6E53               	movwf	(??_main+6)& (0+255),c
  2376  006994  0E01               	movlw	high _imaginary_numbers
  2377  006996  6E54               	movwf	(??_main+7)& (0+255),c
  2378  006998  90D8               	bcf	status,0,c
  2379  00699A  0100               	movlb	0	; () banked
  2380  00699C  35CF               	rlcf	main@k& (0+255),w,b
  2381  00699E  6ED9               	movwf	fsr2l,c
  2382  0069A0  0100               	movlb	0	; () banked
  2383  0069A2  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2384  0069A4  6EDA               	movwf	fsr2h,c
  2385  0069A6  5053               	movf	??_main+6,w,c
  2386  0069A8  26D9               	addwf	fsr2l,f,c
  2387  0069AA  5054               	movf	??_main+7,w,c
  2388  0069AC  22DA               	addwfc	fsr2h,f,c
  2389  0069AE  CFDE F001          	movff	postinc2,___wmul@multiplier
  2390  0069B2  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2391  0069B6  0E00               	movlw	low _imaginary_numbers
  2392  0069B8  6E55               	movwf	(??_main+8)& (0+255),c
  2393  0069BA  0E01               	movlw	high _imaginary_numbers
  2394  0069BC  6E56               	movwf	(??_main+9)& (0+255),c
  2395  0069BE  90D8               	bcf	status,0,c
  2396  0069C0  0100               	movlb	0	; () banked
  2397  0069C2  35CF               	rlcf	main@k& (0+255),w,b
  2398  0069C4  6ED9               	movwf	fsr2l,c
  2399  0069C6  0100               	movlb	0	; () banked
  2400  0069C8  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2401  0069CA  6EDA               	movwf	fsr2h,c
  2402  0069CC  5055               	movf	??_main+8,w,c
  2403  0069CE  26D9               	addwf	fsr2l,f,c
  2404  0069D0  5056               	movf	??_main+9,w,c
  2405  0069D2  22DA               	addwfc	fsr2h,f,c
  2406  0069D4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2407  0069D8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2408  0069DC  EC05  F02C         	call	___wmul	;wreg free
  2409  0069E0  5001               	movf	?___wmul,w,c
  2410  0069E2  2651               	addwf	??_main+4,f,c
  2411  0069E4  5002               	movf	?___wmul+1,w,c
  2412  0069E6  2252               	addwfc	??_main+5,f,c
  2413  0069E8  0E80               	movlw	low _real_numbers
  2414  0069EA  6E57               	movwf	(??_main+10)& (0+255),c
  2415  0069EC  0E01               	movlw	high _real_numbers
  2416  0069EE  6E58               	movwf	(??_main+11)& (0+255),c
  2417  0069F0  90D8               	bcf	status,0,c
  2418  0069F2  0100               	movlb	0	; () banked
  2419  0069F4  35CF               	rlcf	main@k& (0+255),w,b
  2420  0069F6  6ED9               	movwf	fsr2l,c
  2421  0069F8  0100               	movlb	0	; () banked
  2422  0069FA  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2423  0069FC  6EDA               	movwf	fsr2h,c
  2424  0069FE  5057               	movf	??_main+10,w,c
  2425  006A00  26D9               	addwf	fsr2l,f,c
  2426  006A02  5058               	movf	??_main+11,w,c
  2427  006A04  22DA               	addwfc	fsr2h,f,c
  2428  006A06  C051  FFDE         	movff	??_main+4,postinc2
  2429  006A0A  C052  FFDD         	movff	??_main+5,postdec2
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;main pic18.c: 106: place = 0x40000000;
  2433  006A0E  0E00               	movlw	0
  2434  006A10  0100               	movlb	0	; () banked
  2435  006A12  6FCB               	movwf	main@place& (0+255),b
  2436  006A14  0E00               	movlw	0
  2437  006A16  0100               	movlb	0	; () banked
  2438  006A18  6FCC               	movwf	(main@place+1)& (0+255),b
  2439  006A1A  0E00               	movlw	0
  2440  006A1C  0100               	movlb	0	; () banked
  2441  006A1E  6FCD               	movwf	(main@place+2)& (0+255),b
  2442  006A20  0E40               	movlw	64
  2443  006A22  0100               	movlb	0	; () banked
  2444  006A24  6FCE               	movwf	(main@place+3)& (0+255),b
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;main pic18.c: 107: root = 0;
  2448  006A26  0E00               	movlw	0
  2449  006A28  0100               	movlb	0	; () banked
  2450  006A2A  6FC7               	movwf	main@root& (0+255),b
  2451  006A2C  0E00               	movlw	0
  2452  006A2E  0100               	movlb	0	; () banked
  2453  006A30  6FC8               	movwf	(main@root+1)& (0+255),b
  2454  006A32  0E00               	movlw	0
  2455  006A34  0100               	movlb	0	; () banked
  2456  006A36  6FC9               	movwf	(main@root+2)& (0+255),b
  2457  006A38  0E00               	movlw	0
  2458  006A3A  0100               	movlb	0	; () banked
  2459  006A3C  6FCA               	movwf	(main@root+3)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main pic18.c: 109: if (real_numbers[k] >= 0) {
  2463  006A3E  0E80               	movlw	low _real_numbers
  2464  006A40  6E4D               	movwf	??_main& (0+255),c
  2465  006A42  0E01               	movlw	high _real_numbers
  2466  006A44  6E4E               	movwf	(??_main+1)& (0+255),c
  2467  006A46  90D8               	bcf	status,0,c
  2468  006A48  0100               	movlb	0	; () banked
  2469  006A4A  35CF               	rlcf	main@k& (0+255),w,b
  2470  006A4C  6ED9               	movwf	fsr2l,c
  2471  006A4E  0100               	movlb	0	; () banked
  2472  006A50  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2473  006A52  6EDA               	movwf	fsr2h,c
  2474  006A54  504D               	movf	??_main,w,c
  2475  006A56  26D9               	addwf	fsr2l,f,c
  2476  006A58  504E               	movf	??_main+1,w,c
  2477  006A5A  22DA               	addwfc	fsr2h,f,c
  2478  006A5C  CFDE F04F          	movff	postinc2,??_main+2
  2479  006A60  CFDD F050          	movff	postdec2,??_main+3
  2480  006A64  AE50               	btfss	??_main+3,7,c
  2481  006A66  D021               	goto	l2539
  2482  006A68  D105               	goto	l2553
  2483  006A6A                     l2537:
  2484                           
  2485                           ; BSR set to: 0
  2486  006A6A  0E02               	movlw	2
  2487  006A6C  6E4D               	movwf	??_main& (0+255),c
  2488  006A6E  0100               	movlb	0	; () banked
  2489  006A70  C0CB  F04E         	movff	main@place,??_main+1
  2490  006A74  0100               	movlb	0	; () banked
  2491  006A76  C0CC  F04F         	movff	main@place+1,??_main+2
  2492  006A7A  0100               	movlb	0	; () banked
  2493  006A7C  C0CD  F050         	movff	main@place+2,??_main+3
  2494  006A80  0100               	movlb	0	; () banked
  2495  006A82  C0CE  F051         	movff	main@place+3,??_main+4
  2496  006A86                     u2025:
  2497  006A86  664D               	tstfsz	??_main,c
  2498  006A88  D001               	goto	u2026
  2499  006A8A  D007               	goto	u2027
  2500  006A8C                     u2026:
  2501  006A8C  3451               	rlcf	??_main+4,w,c
  2502  006A8E  3251               	rrcf	??_main+4,f,c
  2503  006A90  3250               	rrcf	??_main+3,f,c
  2504  006A92  324F               	rrcf	??_main+2,f,c
  2505  006A94  324E               	rrcf	??_main+1,f,c
  2506  006A96  2E4D               	decfsz	??_main,f,c
  2507  006A98  D7F6               	goto	u2025
  2508  006A9A                     u2027:
  2509  006A9A  C04E  F0CB         	movff	??_main+1,main@place
  2510  006A9E  C04F  F0CC         	movff	??_main+2,main@place+1
  2511  006AA2  C050  F0CD         	movff	??_main+3,main@place+2
  2512  006AA6  C051  F0CE         	movff	??_main+4,main@place+3
  2513  006AAA                     l2539:
  2514                           
  2515                           ; BSR set to: 0
  2516  006AAA  0E80               	movlw	low _real_numbers
  2517  006AAC  6E4D               	movwf	??_main& (0+255),c
  2518  006AAE  0E01               	movlw	high _real_numbers
  2519  006AB0  6E4E               	movwf	(??_main+1)& (0+255),c
  2520  006AB2  90D8               	bcf	status,0,c
  2521  006AB4  0100               	movlb	0	; () banked
  2522  006AB6  35CF               	rlcf	main@k& (0+255),w,b
  2523  006AB8  6ED9               	movwf	fsr2l,c
  2524  006ABA  0100               	movlb	0	; () banked
  2525  006ABC  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2526  006ABE  6EDA               	movwf	fsr2h,c
  2527  006AC0  504D               	movf	??_main,w,c
  2528  006AC2  26D9               	addwf	fsr2l,f,c
  2529  006AC4  504E               	movf	??_main+1,w,c
  2530  006AC6  22DA               	addwfc	fsr2h,f,c
  2531  006AC8  CFDE F04F          	movff	postinc2,??_main+2
  2532  006ACC  CFDD F050          	movff	postdec2,??_main+3
  2533  006AD0  C04F  F051         	movff	??_main+2,??_main+4
  2534  006AD4  C050  F052         	movff	??_main+3,??_main+5
  2535  006AD8  0E00               	movlw	0
  2536  006ADA  BE52               	btfsc	(??_main+5)& (0+255),7,c
  2537  006ADC  0EFF               	movlw	255
  2538  006ADE  6E53               	movwf	(??_main+6)& (0+255),c
  2539  006AE0  6E54               	movwf	(??_main+7)& (0+255),c
  2540  006AE2  5054               	movf	??_main+7,w,c
  2541  006AE4  0A80               	xorlw	128
  2542  006AE6  6E55               	movwf	(??_main+8)& (0+255),c
  2543  006AE8  0100               	movlb	0	; () banked
  2544  006AEA  51CB               	movf	main@place& (0+255),w,b
  2545  006AEC  5C51               	subwf	??_main+4,w,c
  2546  006AEE  0100               	movlb	0	; () banked
  2547  006AF0  51CC               	movf	(main@place+1)& (0+255),w,b
  2548  006AF2  5852               	subwfb	??_main+5,w,c
  2549  006AF4  0100               	movlb	0	; () banked
  2550  006AF6  51CD               	movf	(main@place+2)& (0+255),w,b
  2551  006AF8  5853               	subwfb	??_main+6,w,c
  2552  006AFA  0100               	movlb	0	; () banked
  2553  006AFC  51CE               	movf	(main@place+3)& (0+255),w,b
  2554  006AFE  0A80               	xorlw	128
  2555  006B00  5855               	subwfb	(??_main+8)& (0+255),w,c
  2556  006B02  B0D8               	btfsc	status,0,c
  2557  006B04  D0B0               	goto	l2551
  2558  006B06  D7B1               	goto	l2537
  2559  006B08                     l2541:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main pic18.c: 114: if (real_numbers[k] >= root + place) {
  2563  006B08  0100               	movlb	0	; () banked
  2564  006B0A  51CB               	movf	main@place& (0+255),w,b
  2565  006B0C  0100               	movlb	0	; () banked
  2566  006B0E  25C7               	addwf	main@root& (0+255),w,b
  2567  006B10  6E4D               	movwf	??_main& (0+255),c
  2568  006B12  0100               	movlb	0	; () banked
  2569  006B14  51CC               	movf	(main@place+1)& (0+255),w,b
  2570  006B16  0100               	movlb	0	; () banked
  2571  006B18  21C8               	addwfc	(main@root+1)& (0+255),w,b
  2572  006B1A  6E4E               	movwf	(??_main+1)& (0+255),c
  2573  006B1C  0100               	movlb	0	; () banked
  2574  006B1E  51CD               	movf	(main@place+2)& (0+255),w,b
  2575  006B20  0100               	movlb	0	; () banked
  2576  006B22  21C9               	addwfc	(main@root+2)& (0+255),w,b
  2577  006B24  6E4F               	movwf	(??_main+2)& (0+255),c
  2578  006B26  0100               	movlb	0	; () banked
  2579  006B28  51CE               	movf	(main@place+3)& (0+255),w,b
  2580  006B2A  0100               	movlb	0	; () banked
  2581  006B2C  21CA               	addwfc	(main@root+3)& (0+255),w,b
  2582  006B2E  6E50               	movwf	(??_main+3)& (0+255),c
  2583  006B30  0E80               	movlw	low _real_numbers
  2584  006B32  6E51               	movwf	(??_main+4)& (0+255),c
  2585  006B34  0E01               	movlw	high _real_numbers
  2586  006B36  6E52               	movwf	(??_main+5)& (0+255),c
  2587  006B38  90D8               	bcf	status,0,c
  2588  006B3A  0100               	movlb	0	; () banked
  2589  006B3C  35CF               	rlcf	main@k& (0+255),w,b
  2590  006B3E  6ED9               	movwf	fsr2l,c
  2591  006B40  0100               	movlb	0	; () banked
  2592  006B42  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2593  006B44  6EDA               	movwf	fsr2h,c
  2594  006B46  5051               	movf	??_main+4,w,c
  2595  006B48  26D9               	addwf	fsr2l,f,c
  2596  006B4A  5052               	movf	??_main+5,w,c
  2597  006B4C  22DA               	addwfc	fsr2h,f,c
  2598  006B4E  CFDE F053          	movff	postinc2,??_main+6
  2599  006B52  CFDD F054          	movff	postdec2,??_main+7
  2600  006B56  C053  F055         	movff	??_main+6,??_main+8
  2601  006B5A  C054  F056         	movff	??_main+7,??_main+9
  2602  006B5E  0E00               	movlw	0
  2603  006B60  BE56               	btfsc	(??_main+9)& (0+255),7,c
  2604  006B62  0EFF               	movlw	255
  2605  006B64  6E57               	movwf	(??_main+10)& (0+255),c
  2606  006B66  6E58               	movwf	(??_main+11)& (0+255),c
  2607  006B68  5058               	movf	??_main+11,w,c
  2608  006B6A  0A80               	xorlw	128
  2609  006B6C  6E59               	movwf	(??_main+12)& (0+255),c
  2610  006B6E  504D               	movf	??_main,w,c
  2611  006B70  5C55               	subwf	??_main+8,w,c
  2612  006B72  504E               	movf	??_main+1,w,c
  2613  006B74  5856               	subwfb	??_main+9,w,c
  2614  006B76  504F               	movf	??_main+2,w,c
  2615  006B78  5857               	subwfb	??_main+10,w,c
  2616  006B7A  5050               	movf	??_main+3,w,c
  2617  006B7C  0A80               	xorlw	128
  2618  006B7E  5859               	subwfb	(??_main+12)& (0+255),w,c
  2619  006B80  A0D8               	btfss	status,0,c
  2620  006B82  D038               	goto	l2547
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;main pic18.c: 115: real_numbers[k] -= root + place;
  2624  006B84  0100               	movlb	0	; () banked
  2625  006B86  C0C7  F04D         	movff	main@root,??_main
  2626  006B8A  0100               	movlb	0	; () banked
  2627  006B8C  C0C8  F04E         	movff	main@root+1,??_main+1
  2628  006B90  0100               	movlb	0	; () banked
  2629  006B92  51CB               	movf	main@place& (0+255),w,b
  2630  006B94  264D               	addwf	??_main,f,c
  2631  006B96  0100               	movlb	0	; () banked
  2632  006B98  51CC               	movf	(main@place+1)& (0+255),w,b
  2633  006B9A  224E               	addwfc	??_main+1,f,c
  2634  006B9C  0E80               	movlw	low _real_numbers
  2635  006B9E  6E4F               	movwf	(??_main+2)& (0+255),c
  2636  006BA0  0E01               	movlw	high _real_numbers
  2637  006BA2  6E50               	movwf	(??_main+3)& (0+255),c
  2638  006BA4  90D8               	bcf	status,0,c
  2639  006BA6  0100               	movlb	0	; () banked
  2640  006BA8  35CF               	rlcf	main@k& (0+255),w,b
  2641  006BAA  6ED9               	movwf	fsr2l,c
  2642  006BAC  0100               	movlb	0	; () banked
  2643  006BAE  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2644  006BB0  6EDA               	movwf	fsr2h,c
  2645  006BB2  504F               	movf	??_main+2,w,c
  2646  006BB4  26D9               	addwf	fsr2l,f,c
  2647  006BB6  5050               	movf	??_main+3,w,c
  2648  006BB8  22DA               	addwfc	fsr2h,f,c
  2649  006BBA  504D               	movf	??_main,w,c
  2650  006BBC  5EDE               	subwf	postinc2,f,c
  2651  006BBE  504E               	movf	??_main+1,w,c
  2652  006BC0  5ADD               	subwfb	postdec2,f,c
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main pic18.c: 116: root += place * 2;
  2656  006BC2  90D8               	bcf	status,0,c
  2657  006BC4  0100               	movlb	0	; () banked
  2658  006BC6  35CB               	rlcf	main@place& (0+255),w,b
  2659  006BC8  6E4D               	movwf	??_main& (0+255),c
  2660  006BCA  0100               	movlb	0	; () banked
  2661  006BCC  35CC               	rlcf	(main@place+1)& (0+255),w,b
  2662  006BCE  6E4E               	movwf	(??_main+1)& (0+255),c
  2663  006BD0  0100               	movlb	0	; () banked
  2664  006BD2  35CD               	rlcf	(main@place+2)& (0+255),w,b
  2665  006BD4  6E4F               	movwf	(??_main+2)& (0+255),c
  2666  006BD6  0100               	movlb	0	; () banked
  2667  006BD8  35CE               	rlcf	(main@place+3)& (0+255),w,b
  2668  006BDA  6E50               	movwf	(??_main+3)& (0+255),c
  2669  006BDC  504D               	movf	??_main,w,c
  2670  006BDE  0100               	movlb	0	; () banked
  2671  006BE0  27C7               	addwf	main@root& (0+255),f,b
  2672  006BE2  504E               	movf	??_main+1,w,c
  2673  006BE4  0100               	movlb	0	; () banked
  2674  006BE6  23C8               	addwfc	(main@root+1)& (0+255),f,b
  2675  006BE8  504F               	movf	??_main+2,w,c
  2676  006BEA  0100               	movlb	0	; () banked
  2677  006BEC  23C9               	addwfc	(main@root+2)& (0+255),f,b
  2678  006BEE  5050               	movf	??_main+3,w,c
  2679  006BF0  0100               	movlb	0	; () banked
  2680  006BF2  23CA               	addwfc	(main@root+3)& (0+255),f,b
  2681  006BF4                     l2547:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main pic18.c: 117: }
  2685                           ;main pic18.c: 119: root = root >> 1;
  2686  006BF4  0100               	movlb	0	; () banked
  2687  006BF6  C0C7  F04D         	movff	main@root,??_main
  2688  006BFA  0100               	movlb	0	; () banked
  2689  006BFC  C0C8  F04E         	movff	main@root+1,??_main+1
  2690  006C00  0100               	movlb	0	; () banked
  2691  006C02  C0C9  F04F         	movff	main@root+2,??_main+2
  2692  006C06  0100               	movlb	0	; () banked
  2693  006C08  C0CA  F050         	movff	main@root+3,??_main+3
  2694  006C0C  3450               	rlcf	??_main+3,w,c
  2695  006C0E  3250               	rrcf	??_main+3,f,c
  2696  006C10  324F               	rrcf	??_main+2,f,c
  2697  006C12  324E               	rrcf	??_main+1,f,c
  2698  006C14  324D               	rrcf	??_main,f,c
  2699  006C16  C04D  F0C7         	movff	??_main,main@root
  2700  006C1A  C04E  F0C8         	movff	??_main+1,main@root+1
  2701  006C1E  C04F  F0C9         	movff	??_main+2,main@root+2
  2702  006C22  C050  F0CA         	movff	??_main+3,main@root+3
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main pic18.c: 120: place = place >> 2;
  2706  006C26  0E02               	movlw	2
  2707  006C28  6E4D               	movwf	??_main& (0+255),c
  2708  006C2A  0100               	movlb	0	; () banked
  2709  006C2C  C0CB  F04E         	movff	main@place,??_main+1
  2710  006C30  0100               	movlb	0	; () banked
  2711  006C32  C0CC  F04F         	movff	main@place+1,??_main+2
  2712  006C36  0100               	movlb	0	; () banked
  2713  006C38  C0CD  F050         	movff	main@place+2,??_main+3
  2714  006C3C  0100               	movlb	0	; () banked
  2715  006C3E  C0CE  F051         	movff	main@place+3,??_main+4
  2716  006C42                     u2055:
  2717  006C42  664D               	tstfsz	??_main,c
  2718  006C44  D001               	goto	u2056
  2719  006C46  D007               	goto	u2057
  2720  006C48                     u2056:
  2721  006C48  3451               	rlcf	??_main+4,w,c
  2722  006C4A  3251               	rrcf	??_main+4,f,c
  2723  006C4C  3250               	rrcf	??_main+3,f,c
  2724  006C4E  324F               	rrcf	??_main+2,f,c
  2725  006C50  324E               	rrcf	??_main+1,f,c
  2726  006C52  2E4D               	decfsz	??_main,f,c
  2727  006C54  D7F6               	goto	u2055
  2728  006C56                     u2057:
  2729  006C56  C04E  F0CB         	movff	??_main+1,main@place
  2730  006C5A  C04F  F0CC         	movff	??_main+2,main@place+1
  2731  006C5E  C050  F0CD         	movff	??_main+3,main@place+2
  2732  006C62  C051  F0CE         	movff	??_main+4,main@place+3
  2733  006C66                     l2551:
  2734                           
  2735                           ; BSR set to: 0
  2736  006C66  0100               	movlb	0	; () banked
  2737  006C68  51CE               	movf	(main@place+3)& (0+255),w,b
  2738  006C6A  11CB               	iorwf	main@place& (0+255),w,b
  2739  006C6C  11CC               	iorwf	(main@place+1)& (0+255),w,b
  2740  006C6E  11CD               	iorwf	(main@place+2)& (0+255),w,b
  2741  006C70  A4D8               	btfss	status,2,c
  2742  006C72  D74A               	goto	l2541
  2743  006C74                     l2553:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main pic18.c: 121: }
  2747                           ;main pic18.c: 122: }
  2748                           ;main pic18.c: 124: real_numbers[k] = root;
  2749  006C74  0E80               	movlw	low _real_numbers
  2750  006C76  6E4D               	movwf	??_main& (0+255),c
  2751  006C78  0E01               	movlw	high _real_numbers
  2752  006C7A  6E4E               	movwf	(??_main+1)& (0+255),c
  2753  006C7C  90D8               	bcf	status,0,c
  2754  006C7E  0100               	movlb	0	; () banked
  2755  006C80  35CF               	rlcf	main@k& (0+255),w,b
  2756  006C82  6ED9               	movwf	fsr2l,c
  2757  006C84  0100               	movlb	0	; () banked
  2758  006C86  35D0               	rlcf	(main@k+1)& (0+255),w,b
  2759  006C88  6EDA               	movwf	fsr2h,c
  2760  006C8A  504D               	movf	??_main,w,c
  2761  006C8C  26D9               	addwf	fsr2l,f,c
  2762  006C8E  504E               	movf	??_main+1,w,c
  2763  006C90  22DA               	addwfc	fsr2h,f,c
  2764  006C92  0100               	movlb	0	; () banked
  2765  006C94  C0C7  FFDE         	movff	main@root,postinc2
  2766  006C98  0100               	movlb	0	; () banked
  2767  006C9A  C0C8  FFDD         	movff	main@root+1,postdec2
  2768                           
  2769                           ; BSR set to: 0
  2770  006C9E  0100               	movlb	0	; () banked
  2771  006CA0  4BCF               	infsnz	main@k& (0+255),f,b
  2772  006CA2  2BD0               	incf	(main@k+1)& (0+255),f,b
  2773  006CA4  D640               	goto	L2
  2774  006CA6                     l2559:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main pic18.c: 125: }
  2778                           ;main pic18.c: 127: for(i = 1; i < 33; i++) {
  2779  006CA6  0E00               	movlw	0
  2780  006CA8  0100               	movlb	0	; () banked
  2781  006CAA  6FD2               	movwf	(main@i+1)& (0+255),b
  2782  006CAC  0E01               	movlw	1
  2783  006CAE  0100               	movlb	0	; () banked
  2784  006CB0  6FD1               	movwf	main@i& (0+255),b
  2785  006CB2                     
  2786                           ; BSR set to: 0
  2787  006CB2  0100               	movlb	0	; () banked
  2788  006CB4  51D2               	movf	(main@i+1)& (0+255),w,b
  2789  006CB6  0A80               	xorlw	128
  2790  006CB8  0F80               	addlw	-128
  2791  006CBA  0E21               	movlw	33
  2792  006CBC  B4D8               	btfsc	status,2,c
  2793  006CBE  5DD1               	subwf	main@i& (0+255),w,b
  2794  006CC0  B0D8               	btfsc	status,0,c
  2795  006CC2  D06F               	goto	l2571
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main pic18.c: 128: real_numbers[i] = oldRealNumbers[i - 1] * 10 / 16 +
  2799                           ;main pic18.c: 129: real_numbers[i] * 6 / 16;
  2800                           
  2801                           ; BSR set to: 0
  2802                           
  2803                           ; BSR set to: 0
  2804  006CC4  0EFE               	movlw	254
  2805  006CC6  6E4D               	movwf	??_main& (0+255),c
  2806  006CC8  0EFF               	movlw	255
  2807  006CCA  6E4E               	movwf	(??_main+1)& (0+255),c
  2808  006CCC  0100               	movlb	0	; () banked
  2809  006CCE  C0D1  F04F         	movff	main@i,??_main+2
  2810  006CD2  0100               	movlb	0	; () banked
  2811  006CD4  C0D2  F050         	movff	main@i+1,??_main+3
  2812  006CD8  90D8               	bcf	status,0,c
  2813  006CDA  364F               	rlcf	??_main+2,f,c
  2814  006CDC  3650               	rlcf	??_main+3,f,c
  2815  006CDE  504D               	movf	??_main,w,c
  2816  006CE0  264F               	addwf	??_main+2,f,c
  2817  006CE2  504E               	movf	??_main+1,w,c
  2818  006CE4  2250               	addwfc	??_main+3,f,c
  2819  006CE6  0100               	movlb	0	; () banked
  2820  006CE8  0E60               	movlw	low _oldRealNumbers
  2821  006CEA  244F               	addwf	??_main+2,w,c
  2822  006CEC  6ED9               	movwf	fsr2l,c
  2823  006CEE  0100               	movlb	0	; () banked
  2824  006CF0  0E00               	movlw	high _oldRealNumbers
  2825  006CF2  2050               	addwfc	??_main+3,w,c
  2826  006CF4  6EDA               	movwf	fsr2h,c
  2827  006CF6  CFDE F001          	movff	postinc2,___wmul@multiplier
  2828  006CFA  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2829  006CFE  0E00               	movlw	0
  2830  006D00  6E04               	movwf	___wmul@multiplicand+1,c
  2831  006D02  0E0A               	movlw	10
  2832  006D04  6E03               	movwf	___wmul@multiplicand,c
  2833  006D06  EC05  F02C         	call	___wmul	;wreg free
  2834  006D0A  C001  F007         	movff	?___wmul,___awdiv@dividend
  2835  006D0E  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2836  006D12  0E00               	movlw	0
  2837  006D14  6E0A               	movwf	___awdiv@divisor+1,c
  2838  006D16  0E10               	movlw	16
  2839  006D18  6E09               	movwf	___awdiv@divisor,c
  2840  006D1A  EC34  F02E         	call	___awdiv	;wreg free
  2841  006D1E  C007  F051         	movff	?___awdiv,??_main+4
  2842  006D22  C008  F052         	movff	?___awdiv+1,??_main+5
  2843  006D26  0E80               	movlw	low _real_numbers
  2844  006D28  6E53               	movwf	(??_main+6)& (0+255),c
  2845  006D2A  0E01               	movlw	high _real_numbers
  2846  006D2C  6E54               	movwf	(??_main+7)& (0+255),c
  2847  006D2E  90D8               	bcf	status,0,c
  2848  006D30  0100               	movlb	0	; () banked
  2849  006D32  35D1               	rlcf	main@i& (0+255),w,b
  2850  006D34  6ED9               	movwf	fsr2l,c
  2851  006D36  0100               	movlb	0	; () banked
  2852  006D38  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2853  006D3A  6EDA               	movwf	fsr2h,c
  2854  006D3C  5053               	movf	??_main+6,w,c
  2855  006D3E  26D9               	addwf	fsr2l,f,c
  2856  006D40  5054               	movf	??_main+7,w,c
  2857  006D42  22DA               	addwfc	fsr2h,f,c
  2858  006D44  CFDE F001          	movff	postinc2,___wmul@multiplier
  2859  006D48  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2860  006D4C  0E00               	movlw	0
  2861  006D4E  6E04               	movwf	___wmul@multiplicand+1,c
  2862  006D50  0E06               	movlw	6
  2863  006D52  6E03               	movwf	___wmul@multiplicand,c
  2864  006D54  EC05  F02C         	call	___wmul	;wreg free
  2865  006D58  C001  F007         	movff	?___wmul,___awdiv@dividend
  2866  006D5C  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2867  006D60  0E00               	movlw	0
  2868  006D62  6E0A               	movwf	___awdiv@divisor+1,c
  2869  006D64  0E10               	movlw	16
  2870  006D66  6E09               	movwf	___awdiv@divisor,c
  2871  006D68  EC34  F02E         	call	___awdiv	;wreg free
  2872  006D6C  5007               	movf	?___awdiv,w,c
  2873  006D6E  2651               	addwf	??_main+4,f,c
  2874  006D70  5008               	movf	?___awdiv+1,w,c
  2875  006D72  2252               	addwfc	??_main+5,f,c
  2876  006D74  0E80               	movlw	low _real_numbers
  2877  006D76  6E55               	movwf	(??_main+8)& (0+255),c
  2878  006D78  0E01               	movlw	high _real_numbers
  2879  006D7A  6E56               	movwf	(??_main+9)& (0+255),c
  2880  006D7C  90D8               	bcf	status,0,c
  2881  006D7E  0100               	movlb	0	; () banked
  2882  006D80  35D1               	rlcf	main@i& (0+255),w,b
  2883  006D82  6ED9               	movwf	fsr2l,c
  2884  006D84  0100               	movlb	0	; () banked
  2885  006D86  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2886  006D88  6EDA               	movwf	fsr2h,c
  2887  006D8A  5055               	movf	??_main+8,w,c
  2888  006D8C  26D9               	addwf	fsr2l,f,c
  2889  006D8E  5056               	movf	??_main+9,w,c
  2890  006D90  22DA               	addwfc	fsr2h,f,c
  2891  006D92  C051  FFDE         	movff	??_main+4,postinc2
  2892  006D96  C052  FFDD         	movff	??_main+5,postdec2
  2893                           
  2894                           ; BSR set to: 0
  2895  006D9A  0100               	movlb	0	; () banked
  2896  006D9C  4BD1               	infsnz	main@i& (0+255),f,b
  2897  006D9E  2BD2               	incf	(main@i+1)& (0+255),f,b
  2898  006DA0  D788               	goto	L3
  2899  006DA2                     l2571:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main pic18.c: 130: }
  2903                           ;main pic18.c: 132: for (i = 1; i < 33; i++) {
  2904  006DA2  0E00               	movlw	0
  2905  006DA4  0100               	movlb	0	; () banked
  2906  006DA6  6FD2               	movwf	(main@i+1)& (0+255),b
  2907  006DA8  0E01               	movlw	1
  2908  006DAA  0100               	movlb	0	; () banked
  2909  006DAC  6FD1               	movwf	main@i& (0+255),b
  2910  006DAE                     
  2911                           ; BSR set to: 0
  2912  006DAE  0100               	movlb	0	; () banked
  2913  006DB0  51D2               	movf	(main@i+1)& (0+255),w,b
  2914  006DB2  0A80               	xorlw	128
  2915  006DB4  0F80               	addlw	-128
  2916  006DB6  0E21               	movlw	33
  2917  006DB8  B4D8               	btfsc	status,2,c
  2918  006DBA  5DD1               	subwf	main@i& (0+255),w,b
  2919  006DBC  B0D8               	btfsc	status,0,c
  2920  006DBE  D030               	goto	l2583
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;main pic18.c: 133: oldRealNumbers[i - 1] = real_numbers[i];
  2924                           
  2925                           ; BSR set to: 0
  2926                           
  2927                           ; BSR set to: 0
  2928  006DC0  0E80               	movlw	low _real_numbers
  2929  006DC2  6E4D               	movwf	??_main& (0+255),c
  2930  006DC4  0E01               	movlw	high _real_numbers
  2931  006DC6  6E4E               	movwf	(??_main+1)& (0+255),c
  2932  006DC8  90D8               	bcf	status,0,c
  2933  006DCA  0100               	movlb	0	; () banked
  2934  006DCC  35D1               	rlcf	main@i& (0+255),w,b
  2935  006DCE  6ED9               	movwf	fsr2l,c
  2936  006DD0  0100               	movlb	0	; () banked
  2937  006DD2  35D2               	rlcf	(main@i+1)& (0+255),w,b
  2938  006DD4  6EDA               	movwf	fsr2h,c
  2939  006DD6  504D               	movf	??_main,w,c
  2940  006DD8  26D9               	addwf	fsr2l,f,c
  2941  006DDA  504E               	movf	??_main+1,w,c
  2942  006DDC  22DA               	addwfc	fsr2h,f,c
  2943  006DDE  0EFE               	movlw	254
  2944  006DE0  6E4F               	movwf	(??_main+2)& (0+255),c
  2945  006DE2  0EFF               	movlw	255
  2946  006DE4  6E50               	movwf	(??_main+3)& (0+255),c
  2947  006DE6  0100               	movlb	0	; () banked
  2948  006DE8  C0D1  F051         	movff	main@i,??_main+4
  2949  006DEC  0100               	movlb	0	; () banked
  2950  006DEE  C0D2  F052         	movff	main@i+1,??_main+5
  2951  006DF2  90D8               	bcf	status,0,c
  2952  006DF4  3651               	rlcf	??_main+4,f,c
  2953  006DF6  3652               	rlcf	??_main+5,f,c
  2954  006DF8  504F               	movf	??_main+2,w,c
  2955  006DFA  2651               	addwf	??_main+4,f,c
  2956  006DFC  5050               	movf	??_main+3,w,c
  2957  006DFE  2252               	addwfc	??_main+5,f,c
  2958  006E00  0100               	movlb	0	; () banked
  2959  006E02  0E60               	movlw	low _oldRealNumbers
  2960  006E04  2451               	addwf	??_main+4,w,c
  2961  006E06  6EE1               	movwf	fsr1l,c
  2962  006E08  0100               	movlb	0	; () banked
  2963  006E0A  0E00               	movlw	high _oldRealNumbers
  2964  006E0C  2052               	addwfc	??_main+5,w,c
  2965  006E0E  6EE2               	movwf	fsr1h,c
  2966  006E10  CFDE FFE6          	movff	postinc2,postinc1
  2967  006E14  CFDD FFE5          	movff	postdec2,postdec1
  2968                           
  2969                           ; BSR set to: 0
  2970  006E18  0100               	movlb	0	; () banked
  2971  006E1A  4BD1               	infsnz	main@i& (0+255),f,b
  2972  006E1C  2BD2               	incf	(main@i+1)& (0+255),f,b
  2973  006E1E  D7C7               	goto	L4
  2974  006E20                     l2583:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main pic18.c: 134: }
  2978                           ;main pic18.c: 138: alarm_tally = 0;
  2979  006E20  0E00               	movlw	0
  2980  006E22  0100               	movlb	0	; () banked
  2981  006E24  6FAA               	movwf	(_alarm_tally+1)& (0+255),b
  2982  006E26  0E00               	movlw	0
  2983  006E28  0100               	movlb	0	; () banked
  2984  006E2A  6FA9               	movwf	_alarm_tally& (0+255),b
  2985                           
  2986                           ;main pic18.c: 139: growl_tally = 0;
  2987  006E2C  0E00               	movlw	0
  2988  006E2E  0100               	movlb	0	; () banked
  2989  006E30  6FAE               	movwf	(_growl_tally+1)& (0+255),b
  2990  006E32  0E00               	movlw	0
  2991  006E34  0100               	movlb	0	; () banked
  2992  006E36  6FAD               	movwf	_growl_tally& (0+255),b
  2993                           
  2994                           ;main pic18.c: 140: horn_tally = 0;
  2995  006E38  0E00               	movlw	0
  2996  006E3A  0100               	movlb	0	; () banked
  2997  006E3C  6FB2               	movwf	(_horn_tally+1)& (0+255),b
  2998  006E3E  0E00               	movlw	0
  2999  006E40  0100               	movlb	0	; () banked
  3000  006E42  6FB1               	movwf	_horn_tally& (0+255),b
  3001                           
  3002                           ;main pic18.c: 141: scream_tally = 0;
  3003  006E44  0E00               	movlw	0
  3004  006E46  0100               	movlb	0	; () banked
  3005  006E48  6FB8               	movwf	(_scream_tally+1)& (0+255),b
  3006  006E4A  0E00               	movlw	0
  3007  006E4C  0100               	movlb	0	; () banked
  3008  006E4E  6FB7               	movwf	_scream_tally& (0+255),b
  3009                           
  3010                           ;main pic18.c: 144: for(i = 0; i < 31; i++) {
  3011  006E50  0E00               	movlw	0
  3012  006E52  0100               	movlb	0	; () banked
  3013  006E54  6FD2               	movwf	(main@i+1)& (0+255),b
  3014  006E56  0E00               	movlw	0
  3015  006E58  0100               	movlb	0	; () banked
  3016  006E5A  6FD1               	movwf	main@i& (0+255),b
  3017  006E5C                     
  3018                           ; BSR set to: 0
  3019  006E5C  0100               	movlb	0	; () banked
  3020  006E5E  51D2               	movf	(main@i+1)& (0+255),w,b
  3021  006E60  0A80               	xorlw	128
  3022  006E62  0F80               	addlw	-128
  3023  006E64  0E1F               	movlw	31
  3024  006E66  B4D8               	btfsc	status,2,c
  3025  006E68  5DD1               	subwf	main@i& (0+255),w,b
  3026  006E6A  B0D8               	btfsc	status,0,c
  3027  006E6C  D03A               	goto	l2595
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main pic18.c: 145: alarm_tally += (alarm_prob_weights[i] * real_numbers[i+1]);
  3031                           
  3032                           ; BSR set to: 0
  3033                           
  3034                           ; BSR set to: 0
  3035  006E6E  0100               	movlb	0	; () banked
  3036  006E70  C0D1  F04D         	movff	main@i,??_main
  3037  006E74  0100               	movlb	0	; () banked
  3038  006E76  C0D2  F04E         	movff	main@i+1,??_main+1
  3039  006E7A  90D8               	bcf	status,0,c
  3040  006E7C  364D               	rlcf	??_main,f,c
  3041  006E7E  364E               	rlcf	??_main+1,f,c
  3042  006E80  0EF3               	movlw	low _alarm_prob_weights
  3043  006E82  244D               	addwf	??_main,w,c
  3044  006E84  6EF6               	movwf	tblptrl,c
  3045  006E86  0E7E               	movlw	high _alarm_prob_weights
  3046  006E88  204E               	addwfc	??_main+1,w,c
  3047  006E8A  6EF7               	movwf	tblptrh,c
  3048  006E8C                     	if	0	;There are less than 3 active tblptr bytes
  3049  006E8C                     	endif
  3050  006E8C  0009               	tblrd		*+
  3051  006E8E  CFF5 F001          	movff	tablat,___wmul@multiplier
  3052  006E92  000A               	tblrd		*-
  3053  006E94  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3054  006E98  0100               	movlb	0	; () banked
  3055  006E9A  C0D1  F04F         	movff	main@i,??_main+2
  3056  006E9E  0100               	movlb	0	; () banked
  3057  006EA0  C0D2  F050         	movff	main@i+1,??_main+3
  3058  006EA4  90D8               	bcf	status,0,c
  3059  006EA6  364F               	rlcf	??_main+2,f,c
  3060  006EA8  3650               	rlcf	??_main+3,f,c
  3061  006EAA  0E02               	movlw	2
  3062  006EAC  264F               	addwf	??_main+2,f,c
  3063  006EAE  0E00               	movlw	0
  3064  006EB0  2250               	addwfc	??_main+3,f,c
  3065  006EB2  0101               	movlb	1	; () banked
  3066  006EB4  0E80               	movlw	low _real_numbers
  3067  006EB6  244F               	addwf	??_main+2,w,c
  3068  006EB8  6ED9               	movwf	fsr2l,c
  3069  006EBA  0101               	movlb	1	; () banked
  3070  006EBC  0E01               	movlw	high _real_numbers
  3071  006EBE  2050               	addwfc	??_main+3,w,c
  3072  006EC0  6EDA               	movwf	fsr2h,c
  3073  006EC2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3074  006EC6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3075  006ECA  EC05  F02C         	call	___wmul	;wreg free
  3076  006ECE  5001               	movf	?___wmul,w,c
  3077  006ED0  0100               	movlb	0	; () banked
  3078  006ED2  27A9               	addwf	_alarm_tally& (0+255),f,b
  3079  006ED4  5002               	movf	?___wmul+1,w,c
  3080  006ED6  0100               	movlb	0	; () banked
  3081  006ED8  23AA               	addwfc	(_alarm_tally+1)& (0+255),f,b
  3082                           
  3083                           ; BSR set to: 0
  3084  006EDA  0100               	movlb	0	; () banked
  3085  006EDC  4BD1               	infsnz	main@i& (0+255),f,b
  3086  006EDE  2BD2               	incf	(main@i+1)& (0+255),f,b
  3087  006EE0  D7BD               	goto	L5
  3088  006EE2                     l2595:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main pic18.c: 146: }
  3092                           ;main pic18.c: 148: if(alarm_tally < 0) {
  3093  006EE2  0100               	movlb	0	; () banked
  3094  006EE4  51AA               	movf	(_alarm_tally+1)& (0+255),w,b
  3095  006EE6  0A80               	xorlw	128
  3096  006EE8  6EF3               	movwf	prodl,c
  3097  006EEA  0E80               	movlw	128
  3098  006EEC  5CF3               	subwf	prodl,w,c
  3099  006EEE  0E00               	movlw	0
  3100  006EF0  B4D8               	btfsc	status,2,c
  3101  006EF2  5DA9               	subwf	_alarm_tally& (0+255),w,b
  3102  006EF4  B0D8               	btfsc	status,0,c
  3103  006EF6  D007               	goto	l2599
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main pic18.c: 149: alarm_tally = 0;
  3107  006EF8  0E00               	movlw	0
  3108  006EFA  0100               	movlb	0	; () banked
  3109  006EFC  6FAA               	movwf	(_alarm_tally+1)& (0+255),b
  3110  006EFE  0E00               	movlw	0
  3111  006F00  0100               	movlb	0	; () banked
  3112  006F02  6FA9               	movwf	_alarm_tally& (0+255),b
  3113                           
  3114                           ;main pic18.c: 150: } else if(real_numbers[16] > real_numbers[3] &&
  3115  006F04  D034               	goto	l2605
  3116  006F06                     l2599:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main pic18.c: 151: real_numbers[13] > real_numbers[23]) {
  3120  006F06  0101               	movlb	1	; () banked
  3121  006F08  EE21  F0A0         	lfsr	2,_real_numbers+32
  3122  006F0C  0101               	movlb	1	; () banked
  3123  006F0E  EE11  F086         	lfsr	1,_real_numbers+6
  3124  006F12  52E6               	movf	postinc1,f,c
  3125  006F14  52DE               	movf	postinc2,f,c
  3126  006F16  50E5               	movf	postdec1,w,c
  3127  006F18  0A80               	xorlw	128
  3128  006F1A  6E4D               	movwf	??_main& (0+255),c
  3129  006F1C  50DD               	movf	postdec2,w,c
  3130  006F1E  0A80               	xorlw	128
  3131  006F20  5C4D               	subwf	??_main& (0+255),w,c
  3132  006F22  E102               	bnz	u2155
  3133  006F24  50DF               	movf	indf2,w,c
  3134  006F26  5CE7               	subwf	indf1,w,c
  3135  006F28                     u2155:
  3136  006F28  B0D8               	btfsc	status,0,c
  3137  006F2A  D021               	goto	l2605
  3138                           
  3139                           ; BSR set to: 1
  3140  006F2C  0101               	movlb	1	; () banked
  3141  006F2E  EE21  F09A         	lfsr	2,_real_numbers+26
  3142  006F32  0101               	movlb	1	; () banked
  3143  006F34  EE11  F0AE         	lfsr	1,_real_numbers+46
  3144  006F38  52E6               	movf	postinc1,f,c
  3145  006F3A  52DE               	movf	postinc2,f,c
  3146  006F3C  50E5               	movf	postdec1,w,c
  3147  006F3E  0A80               	xorlw	128
  3148  006F40  6E4D               	movwf	??_main& (0+255),c
  3149  006F42  50DD               	movf	postdec2,w,c
  3150  006F44  0A80               	xorlw	128
  3151  006F46  5C4D               	subwf	??_main& (0+255),w,c
  3152  006F48  E102               	bnz	u2165
  3153  006F4A  50DF               	movf	indf2,w,c
  3154  006F4C  5CE7               	subwf	indf1,w,c
  3155  006F4E                     u2165:
  3156  006F4E  B0D8               	btfsc	status,0,c
  3157  006F50  D00E               	goto	l2605
  3158                           
  3159                           ; BSR set to: 1
  3160                           ;main pic18.c: 152: alarm_tally = alarm_tally / 4;
  3161  006F52  C0A9  F007         	movff	_alarm_tally,___awdiv@dividend
  3162  006F56  C0AA  F008         	movff	_alarm_tally+1,___awdiv@dividend+1
  3163  006F5A  0E00               	movlw	0
  3164  006F5C  6E0A               	movwf	___awdiv@divisor+1,c
  3165  006F5E  0E04               	movlw	4
  3166  006F60  6E09               	movwf	___awdiv@divisor,c
  3167  006F62  EC34  F02E         	call	___awdiv	;wreg free
  3168  006F66  C007  F0A9         	movff	?___awdiv,_alarm_tally
  3169  006F6A  C008  F0AA         	movff	?___awdiv+1,_alarm_tally+1
  3170  006F6E                     l2605:
  3171                           
  3172                           ;main pic18.c: 153: }
  3173                           ;main pic18.c: 156: for(i = 0; i < 31; i++) {
  3174  006F6E  0E00               	movlw	0
  3175  006F70  0100               	movlb	0	; () banked
  3176  006F72  6FD2               	movwf	(main@i+1)& (0+255),b
  3177  006F74  0E00               	movlw	0
  3178  006F76  0100               	movlb	0	; () banked
  3179  006F78  6FD1               	movwf	main@i& (0+255),b
  3180  006F7A                     
  3181                           ; BSR set to: 0
  3182  006F7A  0100               	movlb	0	; () banked
  3183  006F7C  51D2               	movf	(main@i+1)& (0+255),w,b
  3184  006F7E  0A80               	xorlw	128
  3185  006F80  0F80               	addlw	-128
  3186  006F82  0E1F               	movlw	31
  3187  006F84  B4D8               	btfsc	status,2,c
  3188  006F86  5DD1               	subwf	main@i& (0+255),w,b
  3189  006F88  B0D8               	btfsc	status,0,c
  3190  006F8A  D03A               	goto	l2617
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main pic18.c: 157: growl_tally += (growl_prob_weights[i] * real_numbers[i+1]);
  3194                           
  3195                           ; BSR set to: 0
  3196                           
  3197                           ; BSR set to: 0
  3198  006F8C  0100               	movlb	0	; () banked
  3199  006F8E  C0D1  F04D         	movff	main@i,??_main
  3200  006F92  0100               	movlb	0	; () banked
  3201  006F94  C0D2  F04E         	movff	main@i+1,??_main+1
  3202  006F98  90D8               	bcf	status,0,c
  3203  006F9A  364D               	rlcf	??_main,f,c
  3204  006F9C  364E               	rlcf	??_main+1,f,c
  3205  006F9E  0E31               	movlw	low _growl_prob_weights
  3206  006FA0  244D               	addwf	??_main,w,c
  3207  006FA2  6EF6               	movwf	tblptrl,c
  3208  006FA4  0E7F               	movlw	high _growl_prob_weights
  3209  006FA6  204E               	addwfc	??_main+1,w,c
  3210  006FA8  6EF7               	movwf	tblptrh,c
  3211  006FAA                     	if	0	;There are less than 3 active tblptr bytes
  3212  006FAA                     	endif
  3213  006FAA  0009               	tblrd		*+
  3214  006FAC  CFF5 F001          	movff	tablat,___wmul@multiplier
  3215  006FB0  000A               	tblrd		*-
  3216  006FB2  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3217  006FB6  0100               	movlb	0	; () banked
  3218  006FB8  C0D1  F04F         	movff	main@i,??_main+2
  3219  006FBC  0100               	movlb	0	; () banked
  3220  006FBE  C0D2  F050         	movff	main@i+1,??_main+3
  3221  006FC2  90D8               	bcf	status,0,c
  3222  006FC4  364F               	rlcf	??_main+2,f,c
  3223  006FC6  3650               	rlcf	??_main+3,f,c
  3224  006FC8  0E02               	movlw	2
  3225  006FCA  264F               	addwf	??_main+2,f,c
  3226  006FCC  0E00               	movlw	0
  3227  006FCE  2250               	addwfc	??_main+3,f,c
  3228  006FD0  0101               	movlb	1	; () banked
  3229  006FD2  0E80               	movlw	low _real_numbers
  3230  006FD4  244F               	addwf	??_main+2,w,c
  3231  006FD6  6ED9               	movwf	fsr2l,c
  3232  006FD8  0101               	movlb	1	; () banked
  3233  006FDA  0E01               	movlw	high _real_numbers
  3234  006FDC  2050               	addwfc	??_main+3,w,c
  3235  006FDE  6EDA               	movwf	fsr2h,c
  3236  006FE0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3237  006FE4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3238  006FE8  EC05  F02C         	call	___wmul	;wreg free
  3239  006FEC  5001               	movf	?___wmul,w,c
  3240  006FEE  0100               	movlb	0	; () banked
  3241  006FF0  27AD               	addwf	_growl_tally& (0+255),f,b
  3242  006FF2  5002               	movf	?___wmul+1,w,c
  3243  006FF4  0100               	movlb	0	; () banked
  3244  006FF6  23AE               	addwfc	(_growl_tally+1)& (0+255),f,b
  3245                           
  3246                           ; BSR set to: 0
  3247  006FF8  0100               	movlb	0	; () banked
  3248  006FFA  4BD1               	infsnz	main@i& (0+255),f,b
  3249  006FFC  2BD2               	incf	(main@i+1)& (0+255),f,b
  3250  006FFE  D7BD               	goto	L6
  3251  007000                     l2617:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main pic18.c: 158: }
  3255                           ;main pic18.c: 160: if(growl_tally < 0) {
  3256  007000  0100               	movlb	0	; () banked
  3257  007002  51AE               	movf	(_growl_tally+1)& (0+255),w,b
  3258  007004  0A80               	xorlw	128
  3259  007006  6EF3               	movwf	prodl,c
  3260  007008  0E80               	movlw	128
  3261  00700A  5CF3               	subwf	prodl,w,c
  3262  00700C  0E00               	movlw	0
  3263  00700E  B4D8               	btfsc	status,2,c
  3264  007010  5DAD               	subwf	_growl_tally& (0+255),w,b
  3265  007012  B0D8               	btfsc	status,0,c
  3266  007014  D007               	goto	l2621
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main pic18.c: 161: growl_tally = 0;
  3270  007016  0E00               	movlw	0
  3271  007018  0100               	movlb	0	; () banked
  3272  00701A  6FAE               	movwf	(_growl_tally+1)& (0+255),b
  3273  00701C  0E00               	movlw	0
  3274  00701E  0100               	movlb	0	; () banked
  3275  007020  6FAD               	movwf	_growl_tally& (0+255),b
  3276                           
  3277                           ;main pic18.c: 162: } else if(real_numbers[30] > real_numbers[24] &&
  3278  007022  D047               	goto	l2629
  3279  007024                     l2621:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main pic18.c: 163: real_numbers[15] > real_numbers[1] &&
  3283                           ;main pic18.c: 164: real_numbers[29] > real_numbers[8]) {
  3284  007024  0101               	movlb	1	; () banked
  3285  007026  EE21  F0BC         	lfsr	2,_real_numbers+60
  3286  00702A  0101               	movlb	1	; () banked
  3287  00702C  EE11  F0B0         	lfsr	1,_real_numbers+48
  3288  007030  52E6               	movf	postinc1,f,c
  3289  007032  52DE               	movf	postinc2,f,c
  3290  007034  50E5               	movf	postdec1,w,c
  3291  007036  0A80               	xorlw	128
  3292  007038  6E4D               	movwf	??_main& (0+255),c
  3293  00703A  50DD               	movf	postdec2,w,c
  3294  00703C  0A80               	xorlw	128
  3295  00703E  5C4D               	subwf	??_main& (0+255),w,c
  3296  007040  E102               	bnz	u2205
  3297  007042  50DF               	movf	indf2,w,c
  3298  007044  5CE7               	subwf	indf1,w,c
  3299  007046                     u2205:
  3300  007046  B0D8               	btfsc	status,0,c
  3301  007048  D034               	goto	l2629
  3302                           
  3303                           ; BSR set to: 1
  3304  00704A  0101               	movlb	1	; () banked
  3305  00704C  EE21  F09E         	lfsr	2,_real_numbers+30
  3306  007050  0101               	movlb	1	; () banked
  3307  007052  EE11  F082         	lfsr	1,_real_numbers+2
  3308  007056  52E6               	movf	postinc1,f,c
  3309  007058  52DE               	movf	postinc2,f,c
  3310  00705A  50E5               	movf	postdec1,w,c
  3311  00705C  0A80               	xorlw	128
  3312  00705E  6E4D               	movwf	??_main& (0+255),c
  3313  007060  50DD               	movf	postdec2,w,c
  3314  007062  0A80               	xorlw	128
  3315  007064  5C4D               	subwf	??_main& (0+255),w,c
  3316  007066  E102               	bnz	u2215
  3317  007068  50DF               	movf	indf2,w,c
  3318  00706A  5CE7               	subwf	indf1,w,c
  3319  00706C                     u2215:
  3320  00706C  B0D8               	btfsc	status,0,c
  3321  00706E  D021               	goto	l2629
  3322                           
  3323                           ; BSR set to: 1
  3324  007070  0101               	movlb	1	; () banked
  3325  007072  EE21  F0BA         	lfsr	2,_real_numbers+58
  3326  007076  0101               	movlb	1	; () banked
  3327  007078  EE11  F090         	lfsr	1,_real_numbers+16
  3328  00707C  52E6               	movf	postinc1,f,c
  3329  00707E  52DE               	movf	postinc2,f,c
  3330  007080  50E5               	movf	postdec1,w,c
  3331  007082  0A80               	xorlw	128
  3332  007084  6E4D               	movwf	??_main& (0+255),c
  3333  007086  50DD               	movf	postdec2,w,c
  3334  007088  0A80               	xorlw	128
  3335  00708A  5C4D               	subwf	??_main& (0+255),w,c
  3336  00708C  E102               	bnz	u2225
  3337  00708E  50DF               	movf	indf2,w,c
  3338  007090  5CE7               	subwf	indf1,w,c
  3339  007092                     u2225:
  3340  007092  B0D8               	btfsc	status,0,c
  3341  007094  D00E               	goto	l2629
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;main pic18.c: 165: growl_tally = growl_tally / 4;
  3345  007096  C0AD  F007         	movff	_growl_tally,___awdiv@dividend
  3346  00709A  C0AE  F008         	movff	_growl_tally+1,___awdiv@dividend+1
  3347  00709E  0E00               	movlw	0
  3348  0070A0  6E0A               	movwf	___awdiv@divisor+1,c
  3349  0070A2  0E04               	movlw	4
  3350  0070A4  6E09               	movwf	___awdiv@divisor,c
  3351  0070A6  EC34  F02E         	call	___awdiv	;wreg free
  3352  0070AA  C007  F0AD         	movff	?___awdiv,_growl_tally
  3353  0070AE  C008  F0AE         	movff	?___awdiv+1,_growl_tally+1
  3354  0070B2                     l2629:
  3355                           
  3356                           ;main pic18.c: 166: }
  3357                           ;main pic18.c: 169: for(i = 0; i < 31; i++) {
  3358  0070B2  0E00               	movlw	0
  3359  0070B4  0100               	movlb	0	; () banked
  3360  0070B6  6FD2               	movwf	(main@i+1)& (0+255),b
  3361  0070B8  0E00               	movlw	0
  3362  0070BA  0100               	movlb	0	; () banked
  3363  0070BC  6FD1               	movwf	main@i& (0+255),b
  3364  0070BE                     
  3365                           ; BSR set to: 0
  3366  0070BE  0100               	movlb	0	; () banked
  3367  0070C0  51D2               	movf	(main@i+1)& (0+255),w,b
  3368  0070C2  0A80               	xorlw	128
  3369  0070C4  0F80               	addlw	-128
  3370  0070C6  0E1F               	movlw	31
  3371  0070C8  B4D8               	btfsc	status,2,c
  3372  0070CA  5DD1               	subwf	main@i& (0+255),w,b
  3373  0070CC  B0D8               	btfsc	status,0,c
  3374  0070CE  D03A               	goto	l2641
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main pic18.c: 170: horn_tally += (horn_prob_weights[i] * real_numbers[i+1]);
  3378                           
  3379                           ; BSR set to: 0
  3380                           
  3381                           ; BSR set to: 0
  3382  0070D0  0100               	movlb	0	; () banked
  3383  0070D2  C0D1  F04D         	movff	main@i,??_main
  3384  0070D6  0100               	movlb	0	; () banked
  3385  0070D8  C0D2  F04E         	movff	main@i+1,??_main+1
  3386  0070DC  90D8               	bcf	status,0,c
  3387  0070DE  364D               	rlcf	??_main,f,c
  3388  0070E0  364E               	rlcf	??_main+1,f,c
  3389  0070E2  0E6F               	movlw	low _horn_prob_weights
  3390  0070E4  244D               	addwf	??_main,w,c
  3391  0070E6  6EF6               	movwf	tblptrl,c
  3392  0070E8  0E7F               	movlw	high _horn_prob_weights
  3393  0070EA  204E               	addwfc	??_main+1,w,c
  3394  0070EC  6EF7               	movwf	tblptrh,c
  3395  0070EE                     	if	0	;There are less than 3 active tblptr bytes
  3396  0070EE                     	endif
  3397  0070EE  0009               	tblrd		*+
  3398  0070F0  CFF5 F001          	movff	tablat,___wmul@multiplier
  3399  0070F4  000A               	tblrd		*-
  3400  0070F6  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3401  0070FA  0100               	movlb	0	; () banked
  3402  0070FC  C0D1  F04F         	movff	main@i,??_main+2
  3403  007100  0100               	movlb	0	; () banked
  3404  007102  C0D2  F050         	movff	main@i+1,??_main+3
  3405  007106  90D8               	bcf	status,0,c
  3406  007108  364F               	rlcf	??_main+2,f,c
  3407  00710A  3650               	rlcf	??_main+3,f,c
  3408  00710C  0E02               	movlw	2
  3409  00710E  264F               	addwf	??_main+2,f,c
  3410  007110  0E00               	movlw	0
  3411  007112  2250               	addwfc	??_main+3,f,c
  3412  007114  0101               	movlb	1	; () banked
  3413  007116  0E80               	movlw	low _real_numbers
  3414  007118  244F               	addwf	??_main+2,w,c
  3415  00711A  6ED9               	movwf	fsr2l,c
  3416  00711C  0101               	movlb	1	; () banked
  3417  00711E  0E01               	movlw	high _real_numbers
  3418  007120  2050               	addwfc	??_main+3,w,c
  3419  007122  6EDA               	movwf	fsr2h,c
  3420  007124  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3421  007128  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3422  00712C  EC05  F02C         	call	___wmul	;wreg free
  3423  007130  5001               	movf	?___wmul,w,c
  3424  007132  0100               	movlb	0	; () banked
  3425  007134  27B1               	addwf	_horn_tally& (0+255),f,b
  3426  007136  5002               	movf	?___wmul+1,w,c
  3427  007138  0100               	movlb	0	; () banked
  3428  00713A  23B2               	addwfc	(_horn_tally+1)& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431  00713C  0100               	movlb	0	; () banked
  3432  00713E  4BD1               	infsnz	main@i& (0+255),f,b
  3433  007140  2BD2               	incf	(main@i+1)& (0+255),f,b
  3434  007142  D7BD               	goto	L7
  3435  007144                     l2641:
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main pic18.c: 171: }
  3439                           ;main pic18.c: 173: if(horn_tally < 0) {
  3440  007144  0100               	movlb	0	; () banked
  3441  007146  51B2               	movf	(_horn_tally+1)& (0+255),w,b
  3442  007148  0A80               	xorlw	128
  3443  00714A  6EF3               	movwf	prodl,c
  3444  00714C  0E80               	movlw	128
  3445  00714E  5CF3               	subwf	prodl,w,c
  3446  007150  0E00               	movlw	0
  3447  007152  B4D8               	btfsc	status,2,c
  3448  007154  5DB1               	subwf	_horn_tally& (0+255),w,b
  3449  007156  B0D8               	btfsc	status,0,c
  3450  007158  D007               	goto	l2645
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main pic18.c: 174: horn_tally = 5;
  3454  00715A  0E00               	movlw	0
  3455  00715C  0100               	movlb	0	; () banked
  3456  00715E  6FB2               	movwf	(_horn_tally+1)& (0+255),b
  3457  007160  0E05               	movlw	5
  3458  007162  0100               	movlb	0	; () banked
  3459  007164  6FB1               	movwf	_horn_tally& (0+255),b
  3460                           
  3461                           ;main pic18.c: 175: } else if(real_numbers[21] > real_numbers[7] &&
  3462  007166  D080               	goto	l2659
  3463  007168                     l2645:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;main pic18.c: 176: real_numbers[16] > real_numbers[10] &&
  3467                           ;main pic18.c: 177: real_numbers[25] > real_numbers[1] &&
  3468                           ;main pic18.c: 178: real_numbers[20] > real_numbers[24] &&
  3469                           ;main pic18.c: 179: real_numbers[12] > real_numbers[5] &&
  3470                           ;main pic18.c: 180: real_numbers[27] > real_numbers[10]) {
  3471  007168  0101               	movlb	1	; () banked
  3472  00716A  EE21  F0AA         	lfsr	2,_real_numbers+42
  3473  00716E  0101               	movlb	1	; () banked
  3474  007170  EE11  F08E         	lfsr	1,_real_numbers+14
  3475  007174  52E6               	movf	postinc1,f,c
  3476  007176  52DE               	movf	postinc2,f,c
  3477  007178  50E5               	movf	postdec1,w,c
  3478  00717A  0A80               	xorlw	128
  3479  00717C  6E4D               	movwf	??_main& (0+255),c
  3480  00717E  50DD               	movf	postdec2,w,c
  3481  007180  0A80               	xorlw	128
  3482  007182  5C4D               	subwf	??_main& (0+255),w,c
  3483  007184  E102               	bnz	u2265
  3484  007186  50DF               	movf	indf2,w,c
  3485  007188  5CE7               	subwf	indf1,w,c
  3486  00718A                     u2265:
  3487  00718A  B0D8               	btfsc	status,0,c
  3488  00718C  D06D               	goto	l2659
  3489                           
  3490                           ; BSR set to: 1
  3491  00718E  0101               	movlb	1	; () banked
  3492  007190  EE21  F0A0         	lfsr	2,_real_numbers+32
  3493  007194  0101               	movlb	1	; () banked
  3494  007196  EE11  F094         	lfsr	1,_real_numbers+20
  3495  00719A  52E6               	movf	postinc1,f,c
  3496  00719C  52DE               	movf	postinc2,f,c
  3497  00719E  50E5               	movf	postdec1,w,c
  3498  0071A0  0A80               	xorlw	128
  3499  0071A2  6E4D               	movwf	??_main& (0+255),c
  3500  0071A4  50DD               	movf	postdec2,w,c
  3501  0071A6  0A80               	xorlw	128
  3502  0071A8  5C4D               	subwf	??_main& (0+255),w,c
  3503  0071AA  E102               	bnz	u2275
  3504  0071AC  50DF               	movf	indf2,w,c
  3505  0071AE  5CE7               	subwf	indf1,w,c
  3506  0071B0                     u2275:
  3507  0071B0  B0D8               	btfsc	status,0,c
  3508  0071B2  D05A               	goto	l2659
  3509                           
  3510                           ; BSR set to: 1
  3511  0071B4  0101               	movlb	1	; () banked
  3512  0071B6  EE21  F0B2         	lfsr	2,_real_numbers+50
  3513  0071BA  0101               	movlb	1	; () banked
  3514  0071BC  EE11  F082         	lfsr	1,_real_numbers+2
  3515  0071C0  52E6               	movf	postinc1,f,c
  3516  0071C2  52DE               	movf	postinc2,f,c
  3517  0071C4  50E5               	movf	postdec1,w,c
  3518  0071C6  0A80               	xorlw	128
  3519  0071C8  6E4D               	movwf	??_main& (0+255),c
  3520  0071CA  50DD               	movf	postdec2,w,c
  3521  0071CC  0A80               	xorlw	128
  3522  0071CE  5C4D               	subwf	??_main& (0+255),w,c
  3523  0071D0  E102               	bnz	u2285
  3524  0071D2  50DF               	movf	indf2,w,c
  3525  0071D4  5CE7               	subwf	indf1,w,c
  3526  0071D6                     u2285:
  3527  0071D6  B0D8               	btfsc	status,0,c
  3528  0071D8  D047               	goto	l2659
  3529                           
  3530                           ; BSR set to: 1
  3531  0071DA  0101               	movlb	1	; () banked
  3532  0071DC  EE21  F0A8         	lfsr	2,_real_numbers+40
  3533  0071E0  0101               	movlb	1	; () banked
  3534  0071E2  EE11  F0B0         	lfsr	1,_real_numbers+48
  3535  0071E6  52E6               	movf	postinc1,f,c
  3536  0071E8  52DE               	movf	postinc2,f,c
  3537  0071EA  50E5               	movf	postdec1,w,c
  3538  0071EC  0A80               	xorlw	128
  3539  0071EE  6E4D               	movwf	??_main& (0+255),c
  3540  0071F0  50DD               	movf	postdec2,w,c
  3541  0071F2  0A80               	xorlw	128
  3542  0071F4  5C4D               	subwf	??_main& (0+255),w,c
  3543  0071F6  E102               	bnz	u2295
  3544  0071F8  50DF               	movf	indf2,w,c
  3545  0071FA  5CE7               	subwf	indf1,w,c
  3546  0071FC                     u2295:
  3547  0071FC  B0D8               	btfsc	status,0,c
  3548  0071FE  D034               	goto	l2659
  3549                           
  3550                           ; BSR set to: 1
  3551  007200  0101               	movlb	1	; () banked
  3552  007202  EE21  F098         	lfsr	2,_real_numbers+24
  3553  007206  0101               	movlb	1	; () banked
  3554  007208  EE11  F08A         	lfsr	1,_real_numbers+10
  3555  00720C  52E6               	movf	postinc1,f,c
  3556  00720E  52DE               	movf	postinc2,f,c
  3557  007210  50E5               	movf	postdec1,w,c
  3558  007212  0A80               	xorlw	128
  3559  007214  6E4D               	movwf	??_main& (0+255),c
  3560  007216  50DD               	movf	postdec2,w,c
  3561  007218  0A80               	xorlw	128
  3562  00721A  5C4D               	subwf	??_main& (0+255),w,c
  3563  00721C  E102               	bnz	u2305
  3564  00721E  50DF               	movf	indf2,w,c
  3565  007220  5CE7               	subwf	indf1,w,c
  3566  007222                     u2305:
  3567  007222  B0D8               	btfsc	status,0,c
  3568  007224  D021               	goto	l2659
  3569                           
  3570                           ; BSR set to: 1
  3571  007226  0101               	movlb	1	; () banked
  3572  007228  EE21  F0B6         	lfsr	2,_real_numbers+54
  3573  00722C  0101               	movlb	1	; () banked
  3574  00722E  EE11  F094         	lfsr	1,_real_numbers+20
  3575  007232  52E6               	movf	postinc1,f,c
  3576  007234  52DE               	movf	postinc2,f,c
  3577  007236  50E5               	movf	postdec1,w,c
  3578  007238  0A80               	xorlw	128
  3579  00723A  6E4D               	movwf	??_main& (0+255),c
  3580  00723C  50DD               	movf	postdec2,w,c
  3581  00723E  0A80               	xorlw	128
  3582  007240  5C4D               	subwf	??_main& (0+255),w,c
  3583  007242  E102               	bnz	u2315
  3584  007244  50DF               	movf	indf2,w,c
  3585  007246  5CE7               	subwf	indf1,w,c
  3586  007248                     u2315:
  3587  007248  B0D8               	btfsc	status,0,c
  3588  00724A  D00E               	goto	l2659
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;main pic18.c: 181: horn_tally = horn_tally / 4;
  3592  00724C  C0B1  F007         	movff	_horn_tally,___awdiv@dividend
  3593  007250  C0B2  F008         	movff	_horn_tally+1,___awdiv@dividend+1
  3594  007254  0E00               	movlw	0
  3595  007256  6E0A               	movwf	___awdiv@divisor+1,c
  3596  007258  0E04               	movlw	4
  3597  00725A  6E09               	movwf	___awdiv@divisor,c
  3598  00725C  EC34  F02E         	call	___awdiv	;wreg free
  3599  007260  C007  F0B1         	movff	?___awdiv,_horn_tally
  3600  007264  C008  F0B2         	movff	?___awdiv+1,_horn_tally+1
  3601  007268                     l2659:
  3602                           
  3603                           ;main pic18.c: 182: }
  3604                           ;main pic18.c: 185: for(i = 0; i < 31; i++) {
  3605  007268  0E00               	movlw	0
  3606  00726A  0100               	movlb	0	; () banked
  3607  00726C  6FD2               	movwf	(main@i+1)& (0+255),b
  3608  00726E  0E00               	movlw	0
  3609  007270  0100               	movlb	0	; () banked
  3610  007272  6FD1               	movwf	main@i& (0+255),b
  3611  007274                     
  3612                           ; BSR set to: 0
  3613  007274  0100               	movlb	0	; () banked
  3614  007276  51D2               	movf	(main@i+1)& (0+255),w,b
  3615  007278  0A80               	xorlw	128
  3616  00727A  0F80               	addlw	-128
  3617  00727C  0E1F               	movlw	31
  3618  00727E  B4D8               	btfsc	status,2,c
  3619  007280  5DD1               	subwf	main@i& (0+255),w,b
  3620  007282  B0D8               	btfsc	status,0,c
  3621  007284  D03A               	goto	l2671
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;main pic18.c: 186: scream_tally += (scream_prob_weights[i] * real_numbers[i+1]);
  3625                           
  3626                           ; BSR set to: 0
  3627                           
  3628                           ; BSR set to: 0
  3629  007286  0100               	movlb	0	; () banked
  3630  007288  C0D1  F04D         	movff	main@i,??_main
  3631  00728C  0100               	movlb	0	; () banked
  3632  00728E  C0D2  F04E         	movff	main@i+1,??_main+1
  3633  007292  90D8               	bcf	status,0,c
  3634  007294  364D               	rlcf	??_main,f,c
  3635  007296  364E               	rlcf	??_main+1,f,c
  3636  007298  0EAD               	movlw	low _scream_prob_weights
  3637  00729A  244D               	addwf	??_main,w,c
  3638  00729C  6EF6               	movwf	tblptrl,c
  3639  00729E  0E7F               	movlw	high _scream_prob_weights
  3640  0072A0  204E               	addwfc	??_main+1,w,c
  3641  0072A2  6EF7               	movwf	tblptrh,c
  3642  0072A4                     	if	0	;There are less than 3 active tblptr bytes
  3643  0072A4                     	endif
  3644  0072A4  0009               	tblrd		*+
  3645  0072A6  CFF5 F001          	movff	tablat,___wmul@multiplier
  3646  0072AA  000A               	tblrd		*-
  3647  0072AC  CFF5 F002          	movff	tablat,___wmul@multiplier+1
  3648  0072B0  0100               	movlb	0	; () banked
  3649  0072B2  C0D1  F04F         	movff	main@i,??_main+2
  3650  0072B6  0100               	movlb	0	; () banked
  3651  0072B8  C0D2  F050         	movff	main@i+1,??_main+3
  3652  0072BC  90D8               	bcf	status,0,c
  3653  0072BE  364F               	rlcf	??_main+2,f,c
  3654  0072C0  3650               	rlcf	??_main+3,f,c
  3655  0072C2  0E02               	movlw	2
  3656  0072C4  264F               	addwf	??_main+2,f,c
  3657  0072C6  0E00               	movlw	0
  3658  0072C8  2250               	addwfc	??_main+3,f,c
  3659  0072CA  0101               	movlb	1	; () banked
  3660  0072CC  0E80               	movlw	low _real_numbers
  3661  0072CE  244F               	addwf	??_main+2,w,c
  3662  0072D0  6ED9               	movwf	fsr2l,c
  3663  0072D2  0101               	movlb	1	; () banked
  3664  0072D4  0E01               	movlw	high _real_numbers
  3665  0072D6  2050               	addwfc	??_main+3,w,c
  3666  0072D8  6EDA               	movwf	fsr2h,c
  3667  0072DA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3668  0072DE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3669  0072E2  EC05  F02C         	call	___wmul	;wreg free
  3670  0072E6  5001               	movf	?___wmul,w,c
  3671  0072E8  0100               	movlb	0	; () banked
  3672  0072EA  27B7               	addwf	_scream_tally& (0+255),f,b
  3673  0072EC  5002               	movf	?___wmul+1,w,c
  3674  0072EE  0100               	movlb	0	; () banked
  3675  0072F0  23B8               	addwfc	(_scream_tally+1)& (0+255),f,b
  3676                           
  3677                           ; BSR set to: 0
  3678  0072F2  0100               	movlb	0	; () banked
  3679  0072F4  4BD1               	infsnz	main@i& (0+255),f,b
  3680  0072F6  2BD2               	incf	(main@i+1)& (0+255),f,b
  3681  0072F8  D7BD               	goto	L8
  3682  0072FA                     l2671:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main pic18.c: 187: }
  3686                           ;main pic18.c: 189: if(scream_tally < 0) {
  3687  0072FA  0100               	movlb	0	; () banked
  3688  0072FC  51B8               	movf	(_scream_tally+1)& (0+255),w,b
  3689  0072FE  0A80               	xorlw	128
  3690  007300  6EF3               	movwf	prodl,c
  3691  007302  0E80               	movlw	128
  3692  007304  5CF3               	subwf	prodl,w,c
  3693  007306  0E00               	movlw	0
  3694  007308  B4D8               	btfsc	status,2,c
  3695  00730A  5DB7               	subwf	_scream_tally& (0+255),w,b
  3696  00730C  B0D8               	btfsc	status,0,c
  3697  00730E  D007               	goto	l2675
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main pic18.c: 190: scream_tally = 0;
  3701  007310  0E00               	movlw	0
  3702  007312  0100               	movlb	0	; () banked
  3703  007314  6FB8               	movwf	(_scream_tally+1)& (0+255),b
  3704  007316  0E00               	movlw	0
  3705  007318  0100               	movlb	0	; () banked
  3706  00731A  6FB7               	movwf	_scream_tally& (0+255),b
  3707                           
  3708                           ;main pic18.c: 191: } else if(real_numbers[28] > real_numbers[8] &&
  3709  00731C  D05A               	goto	l2685
  3710  00731E                     l2675:
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;main pic18.c: 192: real_numbers[17] > real_numbers[27] &&
  3714                           ;main pic18.c: 193: real_numbers[29] > real_numbers[1] &&
  3715                           ;main pic18.c: 194: real_numbers[21] > real_numbers[2]) {
  3716  00731E  0101               	movlb	1	; () banked
  3717  007320  EE21  F0B8         	lfsr	2,_real_numbers+56
  3718  007324  0101               	movlb	1	; () banked
  3719  007326  EE11  F090         	lfsr	1,_real_numbers+16
  3720  00732A  52E6               	movf	postinc1,f,c
  3721  00732C  52DE               	movf	postinc2,f,c
  3722  00732E  50E5               	movf	postdec1,w,c
  3723  007330  0A80               	xorlw	128
  3724  007332  6E4D               	movwf	??_main& (0+255),c
  3725  007334  50DD               	movf	postdec2,w,c
  3726  007336  0A80               	xorlw	128
  3727  007338  5C4D               	subwf	??_main& (0+255),w,c
  3728  00733A  E102               	bnz	u2355
  3729  00733C  50DF               	movf	indf2,w,c
  3730  00733E  5CE7               	subwf	indf1,w,c
  3731  007340                     u2355:
  3732  007340  B0D8               	btfsc	status,0,c
  3733  007342  D047               	goto	l2685
  3734                           
  3735                           ; BSR set to: 1
  3736  007344  0101               	movlb	1	; () banked
  3737  007346  EE21  F0A2         	lfsr	2,_real_numbers+34
  3738  00734A  0101               	movlb	1	; () banked
  3739  00734C  EE11  F0B6         	lfsr	1,_real_numbers+54
  3740  007350  52E6               	movf	postinc1,f,c
  3741  007352  52DE               	movf	postinc2,f,c
  3742  007354  50E5               	movf	postdec1,w,c
  3743  007356  0A80               	xorlw	128
  3744  007358  6E4D               	movwf	??_main& (0+255),c
  3745  00735A  50DD               	movf	postdec2,w,c
  3746  00735C  0A80               	xorlw	128
  3747  00735E  5C4D               	subwf	??_main& (0+255),w,c
  3748  007360  E102               	bnz	u2365
  3749  007362  50DF               	movf	indf2,w,c
  3750  007364  5CE7               	subwf	indf1,w,c
  3751  007366                     u2365:
  3752  007366  B0D8               	btfsc	status,0,c
  3753  007368  D034               	goto	l2685
  3754                           
  3755                           ; BSR set to: 1
  3756  00736A  0101               	movlb	1	; () banked
  3757  00736C  EE21  F0BA         	lfsr	2,_real_numbers+58
  3758  007370  0101               	movlb	1	; () banked
  3759  007372  EE11  F082         	lfsr	1,_real_numbers+2
  3760  007376  52E6               	movf	postinc1,f,c
  3761  007378  52DE               	movf	postinc2,f,c
  3762  00737A  50E5               	movf	postdec1,w,c
  3763  00737C  0A80               	xorlw	128
  3764  00737E  6E4D               	movwf	??_main& (0+255),c
  3765  007380  50DD               	movf	postdec2,w,c
  3766  007382  0A80               	xorlw	128
  3767  007384  5C4D               	subwf	??_main& (0+255),w,c
  3768  007386  E102               	bnz	u2375
  3769  007388  50DF               	movf	indf2,w,c
  3770  00738A  5CE7               	subwf	indf1,w,c
  3771  00738C                     u2375:
  3772  00738C  B0D8               	btfsc	status,0,c
  3773  00738E  D021               	goto	l2685
  3774                           
  3775                           ; BSR set to: 1
  3776  007390  0101               	movlb	1	; () banked
  3777  007392  EE21  F0AA         	lfsr	2,_real_numbers+42
  3778  007396  0101               	movlb	1	; () banked
  3779  007398  EE11  F084         	lfsr	1,_real_numbers+4
  3780  00739C  52E6               	movf	postinc1,f,c
  3781  00739E  52DE               	movf	postinc2,f,c
  3782  0073A0  50E5               	movf	postdec1,w,c
  3783  0073A2  0A80               	xorlw	128
  3784  0073A4  6E4D               	movwf	??_main& (0+255),c
  3785  0073A6  50DD               	movf	postdec2,w,c
  3786  0073A8  0A80               	xorlw	128
  3787  0073AA  5C4D               	subwf	??_main& (0+255),w,c
  3788  0073AC  E102               	bnz	u2385
  3789  0073AE  50DF               	movf	indf2,w,c
  3790  0073B0  5CE7               	subwf	indf1,w,c
  3791  0073B2                     u2385:
  3792  0073B2  B0D8               	btfsc	status,0,c
  3793  0073B4  D00E               	goto	l2685
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;main pic18.c: 195: scream_tally = scream_tally / 4;
  3797  0073B6  C0B7  F007         	movff	_scream_tally,___awdiv@dividend
  3798  0073BA  C0B8  F008         	movff	_scream_tally+1,___awdiv@dividend+1
  3799  0073BE  0E00               	movlw	0
  3800  0073C0  6E0A               	movwf	___awdiv@divisor+1,c
  3801  0073C2  0E04               	movlw	4
  3802  0073C4  6E09               	movwf	___awdiv@divisor,c
  3803  0073C6  EC34  F02E         	call	___awdiv	;wreg free
  3804  0073CA  C007  F0B7         	movff	?___awdiv,_scream_tally
  3805  0073CE  C008  F0B8         	movff	?___awdiv+1,_scream_tally+1
  3806  0073D2                     l2685:
  3807                           
  3808                           ;main pic18.c: 196: }
  3809                           ;main pic18.c: 198: guesses[0] = 255;
  3810  0073D2  0E00               	movlw	0
  3811  0073D4  0100               	movlb	0	; () banked
  3812  0073D6  6FBC               	movwf	(_guesses+1)& (0+255),b
  3813  0073D8  0100               	movlb	0	; () banked
  3814  0073DA  69BB               	setf	_guesses& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main pic18.c: 199: guesses[1] = alarm_tally;
  3818  0073DC  C0A9  F0BD         	movff	_alarm_tally,_guesses+2
  3819  0073E0  C0AA  F0BE         	movff	_alarm_tally+1,_guesses+3
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;main pic18.c: 200: guesses[2] = growl_tally;
  3823  0073E4  C0AD  F0BF         	movff	_growl_tally,_guesses+4
  3824  0073E8  C0AE  F0C0         	movff	_growl_tally+1,_guesses+5
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main pic18.c: 201: guesses[3] = horn_tally;
  3828  0073EC  C0B1  F0C1         	movff	_horn_tally,_guesses+6
  3829  0073F0  C0B2  F0C2         	movff	_horn_tally+1,_guesses+7
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main pic18.c: 202: guesses[4] = scream_tally;
  3833  0073F4  C0B7  F0C3         	movff	_scream_tally,_guesses+8
  3834  0073F8  C0B8  F0C4         	movff	_scream_tally+1,_guesses+9
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main pic18.c: 204: max_tally = 0;
  3838  0073FC  0E00               	movlw	0
  3839  0073FE  0100               	movlb	0	; () banked
  3840  007400  6FB4               	movwf	(_max_tally+1)& (0+255),b
  3841  007402  0E00               	movlw	0
  3842  007404  0100               	movlb	0	; () banked
  3843  007406  6FB3               	movwf	_max_tally& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main pic18.c: 205: for(i = 1; i < 5; i++) {
  3847  007408  0E00               	movlw	0
  3848  00740A  0100               	movlb	0	; () banked
  3849  00740C  6FD2               	movwf	(main@i+1)& (0+255),b
  3850  00740E  0E01               	movlw	1
  3851  007410  0100               	movlb	0	; () banked
  3852  007412  6FD1               	movwf	main@i& (0+255),b
  3853  007414                     
  3854                           ; BSR set to: 0
  3855  007414  0100               	movlb	0	; () banked
  3856  007416  51D2               	movf	(main@i+1)& (0+255),w,b
  3857  007418  0A80               	xorlw	128
  3858  00741A  0F80               	addlw	-128
  3859  00741C  0E05               	movlw	5
  3860  00741E  B4D8               	btfsc	status,2,c
  3861  007420  5DD1               	subwf	main@i& (0+255),w,b
  3862  007422  B0D8               	btfsc	status,0,c
  3863  007424  D038               	goto	l2711
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;main pic18.c: 206: if(guesses[i] > max_tally) {
  3867                           
  3868                           ; BSR set to: 0
  3869                           
  3870                           ; BSR set to: 0
  3871  007426  0EBB               	movlw	low _guesses
  3872  007428  6E4D               	movwf	??_main& (0+255),c
  3873  00742A  0E00               	movlw	high _guesses
  3874  00742C  6E4E               	movwf	(??_main+1)& (0+255),c
  3875  00742E  90D8               	bcf	status,0,c
  3876  007430  0100               	movlb	0	; () banked
  3877  007432  35D1               	rlcf	main@i& (0+255),w,b
  3878  007434  6ED9               	movwf	fsr2l,c
  3879  007436  0100               	movlb	0	; () banked
  3880  007438  35D2               	rlcf	(main@i+1)& (0+255),w,b
  3881  00743A  6EDA               	movwf	fsr2h,c
  3882  00743C  504D               	movf	??_main,w,c
  3883  00743E  26D9               	addwf	fsr2l,f,c
  3884  007440  504E               	movf	??_main+1,w,c
  3885  007442  22DA               	addwfc	fsr2h,f,c
  3886  007444  CFDE F04F          	movff	postinc2,??_main+2
  3887  007448  CFDD F050          	movff	postdec2,??_main+3
  3888  00744C  0100               	movlb	0	; () banked
  3889  00744E  51B4               	movf	(_max_tally+1)& (0+255),w,b
  3890  007450  0A80               	xorlw	128
  3891  007452  6E51               	movwf	(??_main+4)& (0+255),c
  3892  007454  504F               	movf	??_main+2,w,c
  3893  007456  0100               	movlb	0	; () banked
  3894  007458  5DB3               	subwf	_max_tally& (0+255),w,b
  3895  00745A  5050               	movf	??_main+3,w,c
  3896  00745C  0A80               	xorlw	128
  3897  00745E  5851               	subwfb	(??_main+4)& (0+255),w,c
  3898  007460  B0D8               	btfsc	status,0,c
  3899  007462  D015               	goto	l2707
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;main pic18.c: 207: max_tally = guesses[i];
  3903  007464  0EBB               	movlw	low _guesses
  3904  007466  6E4D               	movwf	??_main& (0+255),c
  3905  007468  0E00               	movlw	high _guesses
  3906  00746A  6E4E               	movwf	(??_main+1)& (0+255),c
  3907  00746C  90D8               	bcf	status,0,c
  3908  00746E  0100               	movlb	0	; () banked
  3909  007470  35D1               	rlcf	main@i& (0+255),w,b
  3910  007472  6ED9               	movwf	fsr2l,c
  3911  007474  0100               	movlb	0	; () banked
  3912  007476  35D2               	rlcf	(main@i+1)& (0+255),w,b
  3913  007478  6EDA               	movwf	fsr2h,c
  3914  00747A  504D               	movf	??_main,w,c
  3915  00747C  26D9               	addwf	fsr2l,f,c
  3916  00747E  504E               	movf	??_main+1,w,c
  3917  007480  22DA               	addwfc	fsr2h,f,c
  3918  007482  0100               	movlb	0	; () banked
  3919  007484  CFDE F0B3          	movff	postinc2,_max_tally
  3920  007488  0100               	movlb	0	; () banked
  3921  00748A  CFDD F0B4          	movff	postdec2,_max_tally+1
  3922  00748E                     l2707:
  3923                           
  3924                           ; BSR set to: 0
  3925  00748E  0100               	movlb	0	; () banked
  3926  007490  4BD1               	infsnz	main@i& (0+255),f,b
  3927  007492  2BD2               	incf	(main@i+1)& (0+255),f,b
  3928  007494  D7BF               	goto	L9
  3929  007496                     l2711:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main pic18.c: 208: }
  3933                           ;main pic18.c: 209: }
  3934                           ;main pic18.c: 211: alarm_prob = 0;
  3935  007496  0E00               	movlw	0
  3936  007498  0100               	movlb	0	; () banked
  3937  00749A  6FA8               	movwf	(_alarm_prob+1)& (0+255),b
  3938  00749C  0E00               	movlw	0
  3939  00749E  0100               	movlb	0	; () banked
  3940  0074A0  6FA7               	movwf	_alarm_prob& (0+255),b
  3941                           
  3942                           ;main pic18.c: 212: growl_prob = 0;
  3943  0074A2  0E00               	movlw	0
  3944  0074A4  0100               	movlb	0	; () banked
  3945  0074A6  6FAC               	movwf	(_growl_prob+1)& (0+255),b
  3946  0074A8  0E00               	movlw	0
  3947  0074AA  0100               	movlb	0	; () banked
  3948  0074AC  6FAB               	movwf	_growl_prob& (0+255),b
  3949                           
  3950                           ;main pic18.c: 213: horn_prob = 0;
  3951  0074AE  0E00               	movlw	0
  3952  0074B0  0100               	movlb	0	; () banked
  3953  0074B2  6FB0               	movwf	(_horn_prob+1)& (0+255),b
  3954  0074B4  0E00               	movlw	0
  3955  0074B6  0100               	movlb	0	; () banked
  3956  0074B8  6FAF               	movwf	_horn_prob& (0+255),b
  3957                           
  3958                           ;main pic18.c: 214: scream_prob = 0;
  3959  0074BA  0E00               	movlw	0
  3960  0074BC  0100               	movlb	0	; () banked
  3961  0074BE  6FB6               	movwf	(_scream_prob+1)& (0+255),b
  3962  0074C0  0E00               	movlw	0
  3963  0074C2  0100               	movlb	0	; () banked
  3964  0074C4  6FB5               	movwf	_scream_prob& (0+255),b
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;main pic18.c: 216: if(max_tally > 20) {
  3968  0074C6  0100               	movlb	0	; () banked
  3969  0074C8  51B4               	movf	(_max_tally+1)& (0+255),w,b
  3970  0074CA  0A80               	xorlw	128
  3971  0074CC  0F80               	addlw	-128
  3972  0074CE  0E15               	movlw	21
  3973  0074D0  B4D8               	btfsc	status,2,c
  3974  0074D2  5DB3               	subwf	_max_tally& (0+255),w,b
  3975  0074D4  A0D8               	btfss	status,0,c
  3976  0074D6  D0E5               	goto	l2765
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;main pic18.c: 217: LATBbits.LATB1 = 1;
  3980  0074D8  828A               	bsf	3978,1,c	;volatile
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main pic18.c: 218: total_tally = alarm_tally + growl_tally + horn_tally + scream_tally;
  3984  0074DA  0100               	movlb	0	; () banked
  3985  0074DC  C0A9  F04D         	movff	_alarm_tally,??_main
  3986  0074E0  0100               	movlb	0	; () banked
  3987  0074E2  C0AA  F04E         	movff	_alarm_tally+1,??_main+1
  3988  0074E6  0100               	movlb	0	; () banked
  3989  0074E8  51AD               	movf	_growl_tally& (0+255),w,b
  3990  0074EA  264D               	addwf	??_main,f,c
  3991  0074EC  0100               	movlb	0	; () banked
  3992  0074EE  51AE               	movf	(_growl_tally+1)& (0+255),w,b
  3993  0074F0  224E               	addwfc	??_main+1,f,c
  3994  0074F2  0100               	movlb	0	; () banked
  3995  0074F4  51B1               	movf	_horn_tally& (0+255),w,b
  3996  0074F6  264D               	addwf	??_main,f,c
  3997  0074F8  0100               	movlb	0	; () banked
  3998  0074FA  51B2               	movf	(_horn_tally+1)& (0+255),w,b
  3999  0074FC  224E               	addwfc	??_main+1,f,c
  4000  0074FE  0100               	movlb	0	; () banked
  4001  007500  51B7               	movf	_scream_tally& (0+255),w,b
  4002  007502  244D               	addwf	??_main,w,c
  4003  007504  0100               	movlb	0	; () banked
  4004  007506  6FB9               	movwf	_total_tally& (0+255),b
  4005  007508  0100               	movlb	0	; () banked
  4006  00750A  51B8               	movf	(_scream_tally+1)& (0+255),w,b
  4007  00750C  204E               	addwfc	??_main+1,w,c
  4008  00750E  0100               	movlb	0	; () banked
  4009  007510  6FBA               	movwf	(_total_tally+1)& (0+255),b
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;main pic18.c: 219: alarm_prob = alarm_tally / total_tally;
  4013  007512  C0A9  F007         	movff	_alarm_tally,___awdiv@dividend
  4014  007516  C0AA  F008         	movff	_alarm_tally+1,___awdiv@dividend+1
  4015  00751A  C0B9  F009         	movff	_total_tally,___awdiv@divisor
  4016  00751E  C0BA  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4017  007522  EC34  F02E         	call	___awdiv	;wreg free
  4018  007526  C007  F0A7         	movff	?___awdiv,_alarm_prob
  4019  00752A  C008  F0A8         	movff	?___awdiv+1,_alarm_prob+1
  4020                           
  4021                           ;main pic18.c: 220: growl_prob = growl_tally / total_tally;
  4022  00752E  C0AD  F007         	movff	_growl_tally,___awdiv@dividend
  4023  007532  C0AE  F008         	movff	_growl_tally+1,___awdiv@dividend+1
  4024  007536  C0B9  F009         	movff	_total_tally,___awdiv@divisor
  4025  00753A  C0BA  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4026  00753E  EC34  F02E         	call	___awdiv	;wreg free
  4027  007542  C007  F0AB         	movff	?___awdiv,_growl_prob
  4028  007546  C008  F0AC         	movff	?___awdiv+1,_growl_prob+1
  4029                           
  4030                           ;main pic18.c: 221: horn_prob = horn_tally / total_tally;
  4031  00754A  C0B1  F007         	movff	_horn_tally,___awdiv@dividend
  4032  00754E  C0B2  F008         	movff	_horn_tally+1,___awdiv@dividend+1
  4033  007552  C0B9  F009         	movff	_total_tally,___awdiv@divisor
  4034  007556  C0BA  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4035  00755A  EC34  F02E         	call	___awdiv	;wreg free
  4036  00755E  C007  F0AF         	movff	?___awdiv,_horn_prob
  4037  007562  C008  F0B0         	movff	?___awdiv+1,_horn_prob+1
  4038                           
  4039                           ;main pic18.c: 222: scream_prob = scream_tally / total_tally;
  4040  007566  C0B7  F007         	movff	_scream_tally,___awdiv@dividend
  4041  00756A  C0B8  F008         	movff	_scream_tally+1,___awdiv@dividend+1
  4042  00756E  C0B9  F009         	movff	_total_tally,___awdiv@divisor
  4043  007572  C0BA  F00A         	movff	_total_tally+1,___awdiv@divisor+1
  4044  007576  EC34  F02E         	call	___awdiv	;wreg free
  4045  00757A  C007  F0B5         	movff	?___awdiv,_scream_prob
  4046  00757E  C008  F0B6         	movff	?___awdiv+1,_scream_prob+1
  4047                           
  4048                           ;main pic18.c: 225: if(max_tally == alarm_tally) {
  4049  007582  0100               	movlb	0	; () banked
  4050  007584  51AA               	movf	(_alarm_tally+1)& (0+255),w,b
  4051  007586  0100               	movlb	0	; () banked
  4052  007588  19B4               	xorwf	(_max_tally+1)& (0+255),w,b
  4053  00758A  E104               	bnz	u2435
  4054  00758C  0100               	movlb	0	; () banked
  4055  00758E  51A9               	movf	_alarm_tally& (0+255),w,b
  4056  007590  0100               	movlb	0	; () banked
  4057  007592  19B3               	xorwf	_max_tally& (0+255),w,b
  4058  007594                     u2435:
  4059  007594  A4D8               	btfss	status,2,c
  4060  007596  D00C               	goto	l2729
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;main pic18.c: 226: writeGuess('A', alarm_prob, 1);
  4064  007598  C0A7  F025         	movff	_alarm_prob,writeGuess@prob
  4065  00759C  C0A8  F026         	movff	_alarm_prob+1,writeGuess@prob+1
  4066  0075A0  0E00               	movlw	0
  4067  0075A2  6E28               	movwf	writeGuess@row+1,c
  4068  0075A4  0E01               	movlw	1
  4069  0075A6  6E27               	movwf	writeGuess@row,c
  4070  0075A8  0E41               	movlw	65
  4071  0075AA  ECFB  F02C         	call	_writeGuess
  4072                           
  4073                           ;main pic18.c: 227: } else if(max_tally == growl_tally) {
  4074  0075AE  D044               	goto	l2741
  4075  0075B0                     l2729:
  4076  0075B0  0100               	movlb	0	; () banked
  4077  0075B2  51AE               	movf	(_growl_tally+1)& (0+255),w,b
  4078  0075B4  0100               	movlb	0	; () banked
  4079  0075B6  19B4               	xorwf	(_max_tally+1)& (0+255),w,b
  4080  0075B8  E104               	bnz	u2445
  4081  0075BA  0100               	movlb	0	; () banked
  4082  0075BC  51AD               	movf	_growl_tally& (0+255),w,b
  4083  0075BE  0100               	movlb	0	; () banked
  4084  0075C0  19B3               	xorwf	_max_tally& (0+255),w,b
  4085  0075C2                     u2445:
  4086  0075C2  A4D8               	btfss	status,2,c
  4087  0075C4  D00C               	goto	l2733
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;main pic18.c: 228: writeGuess('G', alarm_prob, 1);
  4091  0075C6  C0A7  F025         	movff	_alarm_prob,writeGuess@prob
  4092  0075CA  C0A8  F026         	movff	_alarm_prob+1,writeGuess@prob+1
  4093  0075CE  0E00               	movlw	0
  4094  0075D0  6E28               	movwf	writeGuess@row+1,c
  4095  0075D2  0E01               	movlw	1
  4096  0075D4  6E27               	movwf	writeGuess@row,c
  4097  0075D6  0E47               	movlw	71
  4098  0075D8  ECFB  F02C         	call	_writeGuess
  4099                           
  4100                           ;main pic18.c: 229: } else if(max_tally == horn_tally) {
  4101  0075DC  D02D               	goto	l2741
  4102  0075DE                     l2733:
  4103  0075DE  0100               	movlb	0	; () banked
  4104  0075E0  51B2               	movf	(_horn_tally+1)& (0+255),w,b
  4105  0075E2  0100               	movlb	0	; () banked
  4106  0075E4  19B4               	xorwf	(_max_tally+1)& (0+255),w,b
  4107  0075E6  E104               	bnz	u2455
  4108  0075E8  0100               	movlb	0	; () banked
  4109  0075EA  51B1               	movf	_horn_tally& (0+255),w,b
  4110  0075EC  0100               	movlb	0	; () banked
  4111  0075EE  19B3               	xorwf	_max_tally& (0+255),w,b
  4112  0075F0                     u2455:
  4113  0075F0  A4D8               	btfss	status,2,c
  4114  0075F2  D00C               	goto	l2737
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;main pic18.c: 230: writeGuess('H', alarm_prob, 1);
  4118  0075F4  C0A7  F025         	movff	_alarm_prob,writeGuess@prob
  4119  0075F8  C0A8  F026         	movff	_alarm_prob+1,writeGuess@prob+1
  4120  0075FC  0E00               	movlw	0
  4121  0075FE  6E28               	movwf	writeGuess@row+1,c
  4122  007600  0E01               	movlw	1
  4123  007602  6E27               	movwf	writeGuess@row,c
  4124  007604  0E48               	movlw	72
  4125  007606  ECFB  F02C         	call	_writeGuess
  4126                           
  4127                           ;main pic18.c: 231: } else if(max_tally == scream_tally) {
  4128  00760A  D016               	goto	l2741
  4129  00760C                     l2737:
  4130  00760C  0100               	movlb	0	; () banked
  4131  00760E  51B8               	movf	(_scream_tally+1)& (0+255),w,b
  4132  007610  0100               	movlb	0	; () banked
  4133  007612  19B4               	xorwf	(_max_tally+1)& (0+255),w,b
  4134  007614  E104               	bnz	u2465
  4135  007616  0100               	movlb	0	; () banked
  4136  007618  51B7               	movf	_scream_tally& (0+255),w,b
  4137  00761A  0100               	movlb	0	; () banked
  4138  00761C  19B3               	xorwf	_max_tally& (0+255),w,b
  4139  00761E                     u2465:
  4140  00761E  A4D8               	btfss	status,2,c
  4141  007620  D00B               	goto	l2741
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;main pic18.c: 232: writeGuess('S', alarm_prob, 1);
  4145  007622  C0A7  F025         	movff	_alarm_prob,writeGuess@prob
  4146  007626  C0A8  F026         	movff	_alarm_prob+1,writeGuess@prob+1
  4147  00762A  0E00               	movlw	0
  4148  00762C  6E28               	movwf	writeGuess@row+1,c
  4149  00762E  0E01               	movlw	1
  4150  007630  6E27               	movwf	writeGuess@row,c
  4151  007632  0E53               	movlw	83
  4152  007634  ECFB  F02C         	call	_writeGuess
  4153  007638                     l2741:
  4154                           
  4155                           ;main pic18.c: 233: }
  4156                           ;main pic18.c: 235: for(i = 0; i < 10; i++) {
  4157  007638  0E00               	movlw	0
  4158  00763A  0100               	movlb	0	; () banked
  4159  00763C  6FD2               	movwf	(main@i+1)& (0+255),b
  4160  00763E  0E00               	movlw	0
  4161  007640  0100               	movlb	0	; () banked
  4162  007642  6FD1               	movwf	main@i& (0+255),b
  4163  007644                     
  4164                           ; BSR set to: 0
  4165  007644  0100               	movlb	0	; () banked
  4166  007646  51D2               	movf	(main@i+1)& (0+255),w,b
  4167  007648  0A80               	xorlw	128
  4168  00764A  0F80               	addlw	-128
  4169  00764C  0E0A               	movlw	10
  4170  00764E  B4D8               	btfsc	status,2,c
  4171  007650  5DD1               	subwf	main@i& (0+255),w,b
  4172  007652  B0D8               	btfsc	status,0,c
  4173  007654  D00B               	goto	l163
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;main pic18.c: 236: _delay(100000);
  4177                           
  4178                           ; BSR set to: 0
  4179                           
  4180                           ; BSR set to: 0
  4181  007656  0E82               	movlw	130
  4182  007658  6E4D               	movwf	??_main& (0+255),c
  4183  00765A  0EDE               	movlw	222
  4184  00765C                     u2577:
  4185  00765C  2EE8               	decfsz	wreg,f,c
  4186  00765E  D7FE               	goto	u2577
  4187  007660  2E4D               	decfsz	??_main& (0+255),f,c
  4188  007662  D7FC               	goto	u2577
  4189  007664  0100               	movlb	0	; () banked
  4190  007666  4BD1               	infsnz	main@i& (0+255),f,b
  4191  007668  2BD2               	incf	(main@i+1)& (0+255),f,b
  4192  00766A  D7EC               	goto	L10
  4193  00766C                     l163:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;main pic18.c: 237: }
  4197                           ;main pic18.c: 238: LATBbits.LATB1 = 0;
  4198  00766C  928A               	bcf	3978,1,c	;volatile
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;main pic18.c: 239: for(i = 0; i < 10; i++) {
  4202  00766E  0E00               	movlw	0
  4203  007670  0100               	movlb	0	; () banked
  4204  007672  6FD2               	movwf	(main@i+1)& (0+255),b
  4205  007674  0E00               	movlw	0
  4206  007676  0100               	movlb	0	; () banked
  4207  007678  6FD1               	movwf	main@i& (0+255),b
  4208  00767A                     
  4209                           ; BSR set to: 0
  4210  00767A  0100               	movlb	0	; () banked
  4211  00767C  51D2               	movf	(main@i+1)& (0+255),w,b
  4212  00767E  0A80               	xorlw	128
  4213  007680  0F80               	addlw	-128
  4214  007682  0E0A               	movlw	10
  4215  007684  B4D8               	btfsc	status,2,c
  4216  007686  5DD1               	subwf	main@i& (0+255),w,b
  4217  007688  B0D8               	btfsc	status,0,c
  4218  00768A  D00B               	goto	l2765
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;main pic18.c: 240: _delay(100000);
  4222                           
  4223                           ; BSR set to: 0
  4224                           
  4225                           ; BSR set to: 0
  4226  00768C  0E82               	movlw	130
  4227  00768E  6E4D               	movwf	??_main& (0+255),c
  4228  007690  0EDE               	movlw	222
  4229  007692                     u2587:
  4230  007692  2EE8               	decfsz	wreg,f,c
  4231  007694  D7FE               	goto	u2587
  4232  007696  2E4D               	decfsz	??_main& (0+255),f,c
  4233  007698  D7FC               	goto	u2587
  4234  00769A  0100               	movlb	0	; () banked
  4235  00769C  4BD1               	infsnz	main@i& (0+255),f,b
  4236  00769E  2BD2               	incf	(main@i+1)& (0+255),f,b
  4237  0076A0  D7EC               	goto	L11
  4238  0076A2                     l2765:
  4239                           
  4240                           ;main pic18.c: 249: sendIntArray(guesses, 5);
  4241  0076A2  0100               	movlb	0	; () banked
  4242  0076A4  0E00               	movlw	high _guesses
  4243  0076A6  6E04               	movwf	sendIntArray@array+1,c
  4244  0076A8  0100               	movlb	0	; () banked
  4245  0076AA  0EBB               	movlw	low _guesses
  4246  0076AC  6E03               	movwf	sendIntArray@array,c
  4247  0076AE  0E00               	movlw	0
  4248  0076B0  6E06               	movwf	sendIntArray@size+1,c
  4249  0076B2  0E05               	movlw	5
  4250  0076B4  6E05               	movwf	sendIntArray@size,c
  4251  0076B6  EC2F  F02C         	call	_sendIntArray	;wreg free
  4252  0076BA  EF16  F034         	goto	l2495
  4253  0076BE                     __end_of_main:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodl	equ	0xFF3
  4260                           postinc0	equ	0xFEE
  4261                           wreg	equ	0xFE8
  4262                           indf1	equ	0xFE7
  4263                           postinc1	equ	0xFE6
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _writeGuess *****************
  4275 ;; Defined at:
  4276 ;;		line 309 in file "main pic18.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  guess           1    wreg     unsigned char 
  4279 ;;  prob            2   36[COMRAM] int 
  4280 ;;  row             2   38[COMRAM] int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  guess           1   48[COMRAM] unsigned char 
  4283 ;;  percent         8   40[COMRAM] unsigned char [8]
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4293 ;;      Params:         4       0       0       0       0       0       0
  4294 ;;      Locals:         9       0       0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0
  4296 ;;      Totals:        13       0       0       0       0       0       0
  4297 ;;Total ram usage:       13 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    4
  4300 ;; This function calls:
  4301 ;;		_LCDStr
  4302 ;;		___awdiv
  4303 ;;		_sprintf
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text1
  4310  0059F6                     __ptext1:
  4311                           	opt stack 0
  4312  0059F6                     _writeGuess:
  4313                           	opt stack 25
  4314                           
  4315                           ;incstack = 0
  4316                           ;writeGuess@guess stored from wreg
  4317  0059F6  6E31               	movwf	writeGuess@guess,c
  4318                           
  4319                           ;main pic18.c: 329: char percent[8];
  4320                           ;main pic18.c: 330: sprintf(percent, "%c %d %c", guess, prob/10, '%');
  4321  0059F8  0E00               	movlw	high writeGuess@percent
  4322  0059FA  6E10               	movwf	sprintf@sp+1,c
  4323  0059FC  0E29               	movlw	low writeGuess@percent
  4324  0059FE  6E0F               	movwf	sprintf@sp,c
  4325  005A00  0E7F               	movlw	high STR_1
  4326  005A02  6E12               	movwf	sprintf@f+1,c
  4327  005A04  0EF5               	movlw	low STR_1
  4328  005A06  6E11               	movwf	sprintf@f,c
  4329  005A08  C031  F013         	movff	writeGuess@guess,?_sprintf+4
  4330  005A0C  6A14               	clrf	?_sprintf+5,c
  4331  005A0E  C025  F007         	movff	writeGuess@prob,___awdiv@dividend
  4332  005A12  C026  F008         	movff	writeGuess@prob+1,___awdiv@dividend+1
  4333  005A16  0E00               	movlw	0
  4334  005A18  6E0A               	movwf	___awdiv@divisor+1,c
  4335  005A1A  0E0A               	movlw	10
  4336  005A1C  6E09               	movwf	___awdiv@divisor,c
  4337  005A1E  EC34  F02E         	call	___awdiv	;wreg free
  4338  005A22  C007  F015         	movff	?___awdiv,?_sprintf+6
  4339  005A26  C008  F016         	movff	?___awdiv+1,?_sprintf+7
  4340  005A2A  0E00               	movlw	0
  4341  005A2C  6E18               	movwf	?_sprintf+9,c
  4342  005A2E  0E25               	movlw	37
  4343  005A30  6E17               	movwf	?_sprintf+8,c
  4344  005A32  EC91  F02F         	call	_sprintf	;wreg free
  4345                           
  4346                           ;main pic18.c: 331: LCDStr(1, percent, 0);
  4347  005A36  0E00               	movlw	high writeGuess@percent
  4348  005A38  6E1B               	movwf	LCDStr@dataPtr+1,c
  4349  005A3A  0E29               	movlw	low writeGuess@percent
  4350  005A3C  6E1A               	movwf	LCDStr@dataPtr,c
  4351  005A3E  0E00               	movlw	0
  4352  005A40  6E1C               	movwf	LCDStr@inv,c
  4353  005A42  0E01               	movlw	1
  4354  005A44  EC49  F02C         	call	_LCDStr
  4355  005A48  0012               	return	
  4356  005A4A                     __end_of_writeGuess:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodl	equ	0xFF3
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           indf1	equ	0xFE7
  4366                           postinc1	equ	0xFE6
  4367                           postdec1	equ	0xFE5
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _sprintf *****************
  4378 ;; Defined at:
  4379 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  sp              2   14[COMRAM] PTR unsigned char 
  4382 ;;		 -> writeGuess@percent(8), 
  4383 ;;  f               2   16[COMRAM] PTR const unsigned char 
  4384 ;;		 -> STR_1(9), 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  _val            5   30[COMRAM] struct .
  4387 ;;  ap              2   28[COMRAM] PTR void [1]
  4388 ;;		 -> ?_sprintf(2), 
  4389 ;;  c               1   35[COMRAM] char 
  4390 ;;  prec            1   27[COMRAM] char 
  4391 ;;  flag            1   26[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  2   14[COMRAM] int 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:        10       0       0       0       0       0       0
  4402 ;;      Locals:        10       0       0       0       0       0       0
  4403 ;;      Temps:          2       0       0       0       0       0       0
  4404 ;;      Totals:        22       0       0       0       0       0       0
  4405 ;;Total ram usage:       22 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    1
  4408 ;; This function calls:
  4409 ;;		___lwdiv
  4410 ;;		___lwmod
  4411 ;; This function is called by:
  4412 ;;		_writeGuess
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text2
  4417  005F22                     __ptext2:
  4418                           	opt stack 0
  4419  005F22                     _sprintf:
  4420                           	opt stack 27
  4421                           
  4422                           ;doprnt.c: 494: va_list ap;
  4423                           ;doprnt.c: 499: signed char c;
  4424                           ;doprnt.c: 506: signed char prec;
  4425                           ;doprnt.c: 508: unsigned char flag;
  4426                           ;doprnt.c: 527: union {
  4427                           ;doprnt.c: 528: unsigned int _val;
  4428                           ;doprnt.c: 529: struct {
  4429                           ;doprnt.c: 530: const char * _cp;
  4430                           ;doprnt.c: 531: unsigned _len;
  4431                           ;doprnt.c: 532: } _str;
  4432                           ;doprnt.c: 533: } _val;
  4433                           ;doprnt.c: 542: *ap = __va_start();
  4434                           
  4435                           ;incstack = 0
  4436  005F22  0E00               	movlw	high (?_sprintf+4)
  4437  005F24  6E1E               	movwf	sprintf@ap+1,c
  4438  005F26  0E13               	movlw	low (?_sprintf+4)
  4439  005F28  6E1D               	movwf	sprintf@ap,c
  4440                           
  4441                           ;doprnt.c: 545: while(c = *f++) {
  4442  005F2A  D0A6               	goto	l2269
  4443  005F2C                     l2209:
  4444                           
  4445                           ;doprnt.c: 547: if(c != '%')
  4446  005F2C  5024               	movf	sprintf@c,w,c
  4447  005F2E  0A25               	xorlw	37
  4448  005F30  A4D8               	btfss	status,2,c
  4449  005F32  D00D               	goto	l2221
  4450                           
  4451                           ;doprnt.c: 552: }
  4452                           ;doprnt.c: 557: flag = 0;
  4453                           
  4454                           ;doprnt.c: 551: continue;
  4455                           
  4456                           ;doprnt.c: 549: {
  4457                           ;doprnt.c: 550: ((*sp++ = (c)));
  4458  005F34  0E00               	movlw	0
  4459  005F36  6E1B               	movwf	sprintf@flag,c
  4460                           
  4461                           ;doprnt.c: 644: switch(c = *f++) {
  4462  005F38  D013               	goto	l2227
  4463  005F3A                     l2217:
  4464                           
  4465                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4466  005F3A  C01D  FFD9         	movff	sprintf@ap,fsr2l
  4467  005F3E  C01E  FFDA         	movff	sprintf@ap+1,fsr2h
  4468  005F42  50DF               	movf	indf2,w,c
  4469  005F44  6E24               	movwf	sprintf@c,c
  4470  005F46  0E02               	movlw	2
  4471  005F48  261D               	addwf	sprintf@ap,f,c
  4472  005F4A  0E00               	movlw	0
  4473  005F4C  221E               	addwfc	sprintf@ap+1,f,c
  4474  005F4E                     l2221:
  4475                           
  4476                           ;doprnt.c: 818: ((*sp++ = (c)));
  4477  005F4E  C00F  FFD9         	movff	sprintf@sp,fsr2l
  4478  005F52  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  4479  005F56  C024  FFDF         	movff	sprintf@c,indf2
  4480  005F5A  4A0F               	infsnz	sprintf@sp,f,c
  4481  005F5C  2A10               	incf	sprintf@sp+1,f,c
  4482                           
  4483                           ;doprnt.c: 819: continue;
  4484  005F5E  D08C               	goto	l2269
  4485  005F60                     l2227:
  4486  005F60  C011  FFF6         	movff	sprintf@f,tblptrl
  4487  005F64  C012  FFF7         	movff	sprintf@f+1,tblptrh
  4488  005F68  4A11               	infsnz	sprintf@f,f,c
  4489  005F6A  2A12               	incf	sprintf@f+1,f,c
  4490  005F6C                     	if	0	;tblptru may be non-zero
  4491  005F6C                     	endif
  4492  005F6C                     	if	0	;tblptru may be non-zero
  4493  005F6C                     	endif
  4494  005F6C  0008               	tblrd		*
  4495  005F6E  CFF5 F024          	movff	tablat,sprintf@c
  4496  005F72  5024               	movf	sprintf@c& (0+255),w,c
  4497                           
  4498                           ; Switch size 1, requested type "space"
  4499                           ; Number of cases is 4, Range of values is 0 to 105
  4500                           ; switch strategies available:
  4501                           ; Name         Instructions Cycles
  4502                           ; simple_byte           13     7 (average)
  4503                           ;	Chosen strategy is simple_byte
  4504  005F74  0A00               	xorlw	0	; case 0
  4505  005F76  B4D8               	btfsc	status,2,c
  4506  005F78  D08A               	goto	l2271
  4507  005F7A  0A63               	xorlw	99	; case 99
  4508  005F7C  B4D8               	btfsc	status,2,c
  4509  005F7E  D7DD               	goto	l2217
  4510  005F80  0A07               	xorlw	7	; case 100
  4511  005F82  B4D8               	btfsc	status,2,c
  4512  005F84  D003               	goto	l2229
  4513  005F86  0A0D               	xorlw	13	; case 105
  4514  005F88  A4D8               	btfss	status,2,c
  4515  005F8A  D7E1               	goto	l2221
  4516  005F8C                     l2229:
  4517                           
  4518                           ;doprnt.c: 1262: {
  4519                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4520  005F8C  C01D  FFD9         	movff	sprintf@ap,fsr2l
  4521  005F90  C01E  FFDA         	movff	sprintf@ap+1,fsr2h
  4522  005F94  CFDE F01F          	movff	postinc2,sprintf@_val
  4523  005F98  CFDD F020          	movff	postdec2,sprintf@_val+1
  4524  005F9C  0E02               	movlw	2
  4525  005F9E  261D               	addwf	sprintf@ap,f,c
  4526  005FA0  0E00               	movlw	0
  4527  005FA2  221E               	addwfc	sprintf@ap+1,f,c
  4528                           
  4529                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  4530  005FA4  5020               	movf	sprintf@_val+1,w,c
  4531  005FA6  0A80               	xorlw	128
  4532  005FA8  6EF3               	movwf	prodl,c
  4533  005FAA  0E80               	movlw	128
  4534  005FAC  5CF3               	subwf	prodl,w,c
  4535  005FAE  0E00               	movlw	0
  4536  005FB0  B4D8               	btfsc	status,2,c
  4537  005FB2  5C1F               	subwf	sprintf@_val,w,c
  4538  005FB4  B0D8               	btfsc	status,0,c
  4539  005FB6  D006               	goto	l2239
  4540                           
  4541                           ;doprnt.c: 1271: flag |= 0x03;
  4542  005FB8  0E03               	movlw	3
  4543  005FBA  121B               	iorwf	sprintf@flag,f,c
  4544                           
  4545                           ;doprnt.c: 1272: _val._val = -_val._val;
  4546  005FBC  6C1F               	negf	sprintf@_val,c
  4547  005FBE  1E20               	comf	sprintf@_val+1,f,c
  4548  005FC0  B0D8               	btfsc	status,0,c
  4549  005FC2  2A20               	incf	sprintf@_val+1,f,c
  4550  005FC4                     l2239:
  4551                           
  4552                           ;doprnt.c: 1273: }
  4553                           ;doprnt.c: 1275: }
  4554                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4555  005FC4  0E01               	movlw	1
  4556  005FC6  6E24               	movwf	sprintf@c,c
  4557  005FC8  5024               	movf	sprintf@c,w,c
  4558  005FCA  0A05               	xorlw	5
  4559  005FCC  B4D8               	btfsc	status,2,c
  4560  005FCE  D016               	goto	l2253
  4561                           
  4562                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4563  005FD0  5024               	movf	sprintf@c,w,c
  4564  005FD2  0D02               	mullw	2
  4565  005FD4  0EEB               	movlw	low _dpowers
  4566  005FD6  24F3               	addwf	prodl,w,c
  4567  005FD8  6EF6               	movwf	tblptrl,c
  4568  005FDA  0E7F               	movlw	high _dpowers
  4569  005FDC  20F4               	addwfc	prodh,w,c
  4570  005FDE  6EF7               	movwf	tblptrh,c
  4571  005FE0                     	if	0	;There are less than 3 active tblptr bytes
  4572  005FE0                     	endif
  4573  005FE0  0009               	tblrd		*+
  4574  005FE2  CFF5 F019          	movff	tablat,??_sprintf
  4575  005FE6  0009               	tblrd		*+
  4576  005FE8  CFF5 F01A          	movff	tablat,??_sprintf+1
  4577  005FEC  5019               	movf	??_sprintf,w,c
  4578  005FEE  5C1F               	subwf	sprintf@_val,w,c
  4579  005FF0  501A               	movf	??_sprintf+1,w,c
  4580  005FF2  5820               	subwfb	sprintf@_val+1,w,c
  4581  005FF4  A0D8               	btfss	status,0,c
  4582  005FF6  D002               	goto	l2253
  4583                           
  4584                           ;doprnt.c: 1316: break;
  4585  005FF8  2A24               	incf	sprintf@c,f,c
  4586  005FFA  D7E6               	goto	L12
  4587  005FFC                     l2253:
  4588                           
  4589                           ;doprnt.c: 1431: {
  4590                           ;doprnt.c: 1447: if(flag & 0x03)
  4591  005FFC  C01B  F019         	movff	sprintf@flag,??_sprintf
  4592  006000  0E03               	movlw	3
  4593  006002  1619               	andwf	??_sprintf,f,c
  4594  006004  B4D8               	btfsc	status,2,c
  4595  006006  D008               	goto	l2259
  4596                           
  4597                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4598  006008  C00F  FFD9         	movff	sprintf@sp,fsr2l
  4599  00600C  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  4600  006010  0E2D               	movlw	45
  4601  006012  6EDF               	movwf	indf2,c
  4602  006014  4A0F               	infsnz	sprintf@sp,f,c
  4603  006016  2A10               	incf	sprintf@sp+1,f,c
  4604  006018                     l2259:
  4605                           
  4606                           ;doprnt.c: 1478: }
  4607                           ;doprnt.c: 1481: prec = c;
  4608  006018  C024  F01C         	movff	sprintf@c,sprintf@prec
  4609                           
  4610                           ;doprnt.c: 1483: while(prec--) {
  4611  00601C  D029               	goto	l2267
  4612  00601E                     l2261:
  4613                           
  4614                           ;doprnt.c: 1487: {
  4615                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4616  00601E  501C               	movf	sprintf@prec,w,c
  4617  006020  0D02               	mullw	2
  4618  006022  0EEB               	movlw	low _dpowers
  4619  006024  24F3               	addwf	prodl,w,c
  4620  006026  6EF6               	movwf	tblptrl,c
  4621  006028  0E7F               	movlw	high _dpowers
  4622  00602A  20F4               	addwfc	prodh,w,c
  4623  00602C  6EF7               	movwf	tblptrh,c
  4624  00602E                     	if	0	;There are less than 3 active tblptr bytes
  4625  00602E                     	endif
  4626  00602E  0009               	tblrd		*+
  4627  006030  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4628  006034  000A               	tblrd		*-
  4629  006036  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4630  00603A  C01F  F001         	movff	sprintf@_val,___lwdiv@dividend
  4631  00603E  C020  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
  4632  006042  ECD2  F02C         	call	___lwdiv	;wreg free
  4633  006046  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4634  00604A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4635  00604E  0E00               	movlw	0
  4636  006050  6E0B               	movwf	___lwmod@divisor+1,c
  4637  006052  0E0A               	movlw	10
  4638  006054  6E0A               	movwf	___lwmod@divisor,c
  4639  006056  EC65  F02C         	call	___lwmod	;wreg free
  4640  00605A  5008               	movf	?___lwmod,w,c
  4641  00605C  0F30               	addlw	48
  4642  00605E  6E24               	movwf	sprintf@c,c
  4643                           
  4644                           ;doprnt.c: 1532: }
  4645                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4646  006060  C00F  FFD9         	movff	sprintf@sp,fsr2l
  4647  006064  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  4648  006068  C024  FFDF         	movff	sprintf@c,indf2
  4649  00606C  4A0F               	infsnz	sprintf@sp,f,c
  4650  00606E  2A10               	incf	sprintf@sp+1,f,c
  4651  006070                     l2267:
  4652  006070  061C               	decf	sprintf@prec,f,c
  4653  006072  281C               	incf	sprintf@prec& (0+255),w,c
  4654  006074  A4D8               	btfss	status,2,c
  4655  006076  D7D3               	goto	l2261
  4656  006078                     l2269:
  4657  006078  C011  FFF6         	movff	sprintf@f,tblptrl
  4658  00607C  C012  FFF7         	movff	sprintf@f+1,tblptrh
  4659  006080  4A11               	infsnz	sprintf@f,f,c
  4660  006082  2A12               	incf	sprintf@f+1,f,c
  4661  006084                     	if	0	;tblptru may be non-zero
  4662  006084                     	endif
  4663  006084                     	if	0	;tblptru may be non-zero
  4664  006084                     	endif
  4665  006084  0008               	tblrd		*
  4666  006086  CFF5 F024          	movff	tablat,sprintf@c
  4667  00608A  6624               	tstfsz	sprintf@c& (0+255),c
  4668  00608C  D74F               	goto	l2209
  4669  00608E                     l2271:
  4670                           
  4671                           ;doprnt.c: 1547: *sp = 0;
  4672  00608E  C00F  FFD9         	movff	sprintf@sp,fsr2l
  4673  006092  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  4674  006096  0E00               	movlw	0
  4675  006098  6EDF               	movwf	indf2,c
  4676  00609A  0012               	return	
  4677  00609C                     __end_of_sprintf:
  4678                           	opt stack 0
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           postinc0	equ	0xFEE
  4686                           wreg	equ	0xFE8
  4687                           indf1	equ	0xFE7
  4688                           postinc1	equ	0xFE6
  4689                           postdec1	equ	0xFE5
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function ___lwdiv *****************
  4700 ;; Defined at:
  4701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  dividend        2    0[COMRAM] unsigned int 
  4704 ;;  divisor         2    2[COMRAM] unsigned int 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  quotient        2    4[COMRAM] unsigned int 
  4707 ;;  counter         1    6[COMRAM] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  2    0[COMRAM] unsigned int 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4717 ;;      Params:         4       0       0       0       0       0       0
  4718 ;;      Locals:         3       0       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0
  4720 ;;      Totals:         7       0       0       0       0       0       0
  4721 ;;Total ram usage:        7 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_sprintf
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text3
  4731  0059A4                     __ptext3:
  4732                           	opt stack 0
  4733  0059A4                     ___lwdiv:
  4734                           	opt stack 27
  4735                           
  4736                           ;incstack = 0
  4737  0059A4  0E00               	movlw	0
  4738  0059A6  6E06               	movwf	___lwdiv@quotient+1,c
  4739  0059A8  0E00               	movlw	0
  4740  0059AA  6E05               	movwf	___lwdiv@quotient,c
  4741  0059AC  5004               	movf	___lwdiv@divisor+1,w,c
  4742  0059AE  1003               	iorwf	___lwdiv@divisor,w,c
  4743  0059B0  B4D8               	btfsc	status,2,c
  4744  0059B2  D01C               	goto	l980
  4745  0059B4  0E01               	movlw	1
  4746  0059B6  6E07               	movwf	___lwdiv@counter,c
  4747  0059B8  D004               	goto	l2081
  4748  0059BA                     l2079:
  4749  0059BA  90D8               	bcf	status,0,c
  4750  0059BC  3603               	rlcf	___lwdiv@divisor,f,c
  4751  0059BE  3604               	rlcf	___lwdiv@divisor+1,f,c
  4752  0059C0  2A07               	incf	___lwdiv@counter,f,c
  4753  0059C2                     l2081:
  4754  0059C2  AE04               	btfss	___lwdiv@divisor+1,7,c
  4755  0059C4  D7FA               	goto	l2079
  4756  0059C6                     l2083:
  4757  0059C6  90D8               	bcf	status,0,c
  4758  0059C8  3605               	rlcf	___lwdiv@quotient,f,c
  4759  0059CA  3606               	rlcf	___lwdiv@quotient+1,f,c
  4760  0059CC  5003               	movf	___lwdiv@divisor,w,c
  4761  0059CE  5C01               	subwf	___lwdiv@dividend,w,c
  4762  0059D0  5004               	movf	___lwdiv@divisor+1,w,c
  4763  0059D2  5802               	subwfb	___lwdiv@dividend+1,w,c
  4764  0059D4  A0D8               	btfss	status,0,c
  4765  0059D6  D005               	goto	l2091
  4766  0059D8  5003               	movf	___lwdiv@divisor,w,c
  4767  0059DA  5E01               	subwf	___lwdiv@dividend,f,c
  4768  0059DC  5004               	movf	___lwdiv@divisor+1,w,c
  4769  0059DE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4770  0059E0  8005               	bsf	___lwdiv@quotient,0,c
  4771  0059E2                     l2091:
  4772  0059E2  90D8               	bcf	status,0,c
  4773  0059E4  3204               	rrcf	___lwdiv@divisor+1,f,c
  4774  0059E6  3203               	rrcf	___lwdiv@divisor,f,c
  4775  0059E8  2E07               	decfsz	___lwdiv@counter,f,c
  4776  0059EA  D7ED               	goto	l2083
  4777  0059EC                     l980:
  4778  0059EC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4779  0059F0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4780  0059F4  0012               	return	
  4781  0059F6                     __end_of___lwdiv:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           prodh	equ	0xFF4
  4788                           prodl	equ	0xFF3
  4789                           postinc0	equ	0xFEE
  4790                           wreg	equ	0xFE8
  4791                           indf1	equ	0xFE7
  4792                           postinc1	equ	0xFE6
  4793                           postdec1	equ	0xFE5
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function ___awdiv *****************
  4804 ;; Defined at:
  4805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  dividend        2    6[COMRAM] int 
  4808 ;;  divisor         2    8[COMRAM] int 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  quotient        2   12[COMRAM] int 
  4811 ;;  sign            1   11[COMRAM] unsigned char 
  4812 ;;  counter         1   10[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  2    6[COMRAM] int 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, prodl
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4822 ;;      Params:         4       0       0       0       0       0       0
  4823 ;;      Locals:         4       0       0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0
  4825 ;;      Totals:         8       0       0       0       0       0       0
  4826 ;;Total ram usage:        8 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;;		_writeGuess
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text4
  4837  005C68                     __ptext4:
  4838                           	opt stack 0
  4839  005C68                     ___awdiv:
  4840                           	opt stack 28
  4841                           
  4842                           ;incstack = 0
  4843  005C68  0E00               	movlw	0
  4844  005C6A  6E0C               	movwf	___awdiv@sign,c
  4845  005C6C  500A               	movf	___awdiv@divisor+1,w,c
  4846  005C6E  0A80               	xorlw	128
  4847  005C70  6EF3               	movwf	prodl,c
  4848  005C72  0E80               	movlw	128
  4849  005C74  5CF3               	subwf	prodl,w,c
  4850  005C76  0E00               	movlw	0
  4851  005C78  B4D8               	btfsc	status,2,c
  4852  005C7A  5C09               	subwf	___awdiv@divisor,w,c
  4853  005C7C  B0D8               	btfsc	status,0,c
  4854  005C7E  D006               	goto	l2309
  4855  005C80  6C09               	negf	___awdiv@divisor,c
  4856  005C82  1E0A               	comf	___awdiv@divisor+1,f,c
  4857  005C84  B0D8               	btfsc	status,0,c
  4858  005C86  2A0A               	incf	___awdiv@divisor+1,f,c
  4859  005C88  0E01               	movlw	1
  4860  005C8A  6E0C               	movwf	___awdiv@sign,c
  4861  005C8C                     l2309:
  4862  005C8C  5008               	movf	___awdiv@dividend+1,w,c
  4863  005C8E  0A80               	xorlw	128
  4864  005C90  6EF3               	movwf	prodl,c
  4865  005C92  0E80               	movlw	128
  4866  005C94  5CF3               	subwf	prodl,w,c
  4867  005C96  0E00               	movlw	0
  4868  005C98  B4D8               	btfsc	status,2,c
  4869  005C9A  5C07               	subwf	___awdiv@dividend,w,c
  4870  005C9C  B0D8               	btfsc	status,0,c
  4871  005C9E  D006               	goto	l2315
  4872  005CA0  6C07               	negf	___awdiv@dividend,c
  4873  005CA2  1E08               	comf	___awdiv@dividend+1,f,c
  4874  005CA4  B0D8               	btfsc	status,0,c
  4875  005CA6  2A08               	incf	___awdiv@dividend+1,f,c
  4876  005CA8  0E01               	movlw	1
  4877  005CAA  1A0C               	xorwf	___awdiv@sign,f,c
  4878  005CAC                     l2315:
  4879  005CAC  0E00               	movlw	0
  4880  005CAE  6E0E               	movwf	___awdiv@quotient+1,c
  4881  005CB0  0E00               	movlw	0
  4882  005CB2  6E0D               	movwf	___awdiv@quotient,c
  4883  005CB4  500A               	movf	___awdiv@divisor+1,w,c
  4884  005CB6  1009               	iorwf	___awdiv@divisor,w,c
  4885  005CB8  B4D8               	btfsc	status,2,c
  4886  005CBA  D01C               	goto	l2337
  4887  005CBC  0E01               	movlw	1
  4888  005CBE  6E0B               	movwf	___awdiv@counter,c
  4889  005CC0  D004               	goto	l2323
  4890  005CC2                     l2321:
  4891  005CC2  90D8               	bcf	status,0,c
  4892  005CC4  3609               	rlcf	___awdiv@divisor,f,c
  4893  005CC6  360A               	rlcf	___awdiv@divisor+1,f,c
  4894  005CC8  2A0B               	incf	___awdiv@counter,f,c
  4895  005CCA                     l2323:
  4896  005CCA  AE0A               	btfss	___awdiv@divisor+1,7,c
  4897  005CCC  D7FA               	goto	l2321
  4898  005CCE                     l2325:
  4899  005CCE  90D8               	bcf	status,0,c
  4900  005CD0  360D               	rlcf	___awdiv@quotient,f,c
  4901  005CD2  360E               	rlcf	___awdiv@quotient+1,f,c
  4902  005CD4  5009               	movf	___awdiv@divisor,w,c
  4903  005CD6  5C07               	subwf	___awdiv@dividend,w,c
  4904  005CD8  500A               	movf	___awdiv@divisor+1,w,c
  4905  005CDA  5808               	subwfb	___awdiv@dividend+1,w,c
  4906  005CDC  A0D8               	btfss	status,0,c
  4907  005CDE  D005               	goto	l2333
  4908  005CE0  5009               	movf	___awdiv@divisor,w,c
  4909  005CE2  5E07               	subwf	___awdiv@dividend,f,c
  4910  005CE4  500A               	movf	___awdiv@divisor+1,w,c
  4911  005CE6  5A08               	subwfb	___awdiv@dividend+1,f,c
  4912  005CE8  800D               	bsf	___awdiv@quotient,0,c
  4913  005CEA                     l2333:
  4914  005CEA  90D8               	bcf	status,0,c
  4915  005CEC  320A               	rrcf	___awdiv@divisor+1,f,c
  4916  005CEE  3209               	rrcf	___awdiv@divisor,f,c
  4917  005CF0  2E0B               	decfsz	___awdiv@counter,f,c
  4918  005CF2  D7ED               	goto	l2325
  4919  005CF4                     l2337:
  4920  005CF4  500C               	movf	___awdiv@sign,w,c
  4921  005CF6  B4D8               	btfsc	status,2,c
  4922  005CF8  D004               	goto	l2341
  4923  005CFA  6C0D               	negf	___awdiv@quotient,c
  4924  005CFC  1E0E               	comf	___awdiv@quotient+1,f,c
  4925  005CFE  B0D8               	btfsc	status,0,c
  4926  005D00  2A0E               	incf	___awdiv@quotient+1,f,c
  4927  005D02                     l2341:
  4928  005D02  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4929  005D06  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4930  005D0A  0012               	return	
  4931  005D0C                     __end_of___awdiv:
  4932                           	opt stack 0
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           indf1	equ	0xFE7
  4942                           postinc1	equ	0xFE6
  4943                           postdec1	equ	0xFE5
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _LCDStr *****************
  4954 ;; Defined at:
  4955 ;;		line 399 in file "lcd3310_SPI.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  row             1    wreg     unsigned char 
  4958 ;;  dataPtr         2   25[COMRAM] PTR const unsigned char 
  4959 ;;		 -> writeGuess@percent(8), 
  4960 ;;  inv             1   27[COMRAM] unsigned char 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  row             1   28[COMRAM] unsigned char 
  4963 ;;  x               1   29[COMRAM] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;		None               void
  4966 ;; Registers used:
  4967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4973 ;;      Params:         3       0       0       0       0       0       0
  4974 ;;      Locals:         2       0       0       0       0       0       0
  4975 ;;      Temps:          0       0       0       0       0       0       0
  4976 ;;      Totals:         5       0       0       0       0       0       0
  4977 ;;Total ram usage:        5 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    3
  4980 ;; This function calls:
  4981 ;;		_LCDChrXY
  4982 ;;		_LCDUpdate
  4983 ;; This function is called by:
  4984 ;;		_writeGuess
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text5
  4989  005892                     __ptext5:
  4990                           	opt stack 0
  4991  005892                     _LCDStr:
  4992                           	opt stack 25
  4993                           
  4994                           ;incstack = 0
  4995                           ;LCDStr@row stored from wreg
  4996  005892  6E1D               	movwf	LCDStr@row,c
  4997                           
  4998                           ;lcd3310_SPI.c: 402: unsigned char x = 0;
  4999  005894  0E00               	movlw	0
  5000  005896  6E1E               	movwf	LCDStr@x,c
  5001                           
  5002                           ;lcd3310_SPI.c: 405: while ( *dataPtr ) {
  5003  005898  D00E               	goto	l2283
  5004  00589A                     l2277:
  5005                           
  5006                           ;lcd3310_SPI.c: 409: LCDChrXY( x, row, *dataPtr);
  5007  00589A  C01D  F00D         	movff	LCDStr@row,LCDChrXY@y
  5008  00589E  C01A  FFD9         	movff	LCDStr@dataPtr,fsr2l
  5009  0058A2  C01B  FFDA         	movff	LCDStr@dataPtr+1,fsr2h
  5010  0058A6  50DF               	movf	indf2,w,c
  5011  0058A8  6E0E               	movwf	LCDChrXY@ch,c
  5012  0058AA  501E               	movf	LCDStr@x,w,c
  5013  0058AC  ECE3  F02E         	call	_LCDChrXY
  5014                           
  5015                           ;lcd3310_SPI.c: 411: x++;
  5016  0058B0  2A1E               	incf	LCDStr@x,f,c
  5017                           
  5018                           ;lcd3310_SPI.c: 412: dataPtr++;
  5019  0058B2  4A1A               	infsnz	LCDStr@dataPtr,f,c
  5020  0058B4  2A1B               	incf	LCDStr@dataPtr+1,f,c
  5021  0058B6                     l2283:
  5022  0058B6  C01A  FFD9         	movff	LCDStr@dataPtr,fsr2l
  5023  0058BA  C01B  FFDA         	movff	LCDStr@dataPtr+1,fsr2h
  5024  0058BE  50DF               	movf	indf2,w,c
  5025  0058C0  A4D8               	btfss	status,2,c
  5026  0058C2  D7EB               	goto	l2277
  5027                           
  5028                           ;lcd3310_SPI.c: 413: }
  5029                           ;lcd3310_SPI.c: 415: LCDUpdate();
  5030  0058C4  ECA7  F02D         	call	_LCDUpdate	;wreg free
  5031  0058C8  0012               	return	
  5032  0058CA                     __end_of_LCDStr:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           postinc0	equ	0xFEE
  5041                           wreg	equ	0xFE8
  5042                           indf1	equ	0xFE7
  5043                           postinc1	equ	0xFE6
  5044                           postdec1	equ	0xFE5
  5045                           fsr1h	equ	0xFE2
  5046                           fsr1l	equ	0xFE1
  5047                           indf2	equ	0xFDF
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _LCDChrXY *****************
  5055 ;; Defined at:
  5056 ;;		line 306 in file "lcd3310_SPI.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  x               1    wreg     unsigned char 
  5059 ;;  y               1   12[COMRAM] unsigned char 
  5060 ;;  ch              1   13[COMRAM] unsigned char 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  x               1   18[COMRAM] unsigned char 
  5063 ;;  index           2   23[COMRAM] unsigned int 
  5064 ;;  i               2   21[COMRAM] unsigned int 
  5065 ;;  mid_shift       2   19[COMRAM] unsigned int 
  5066 ;;  offset          2   16[COMRAM] unsigned int 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5076 ;;      Params:         2       0       0       0       0       0       0
  5077 ;;      Locals:         9       0       0       0       0       0       0
  5078 ;;      Temps:          2       0       0       0       0       0       0
  5079 ;;      Totals:        13       0       0       0       0       0       0
  5080 ;;Total ram usage:       13 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    1
  5083 ;; This function calls:
  5084 ;;		___lwmod
  5085 ;;		___wmul
  5086 ;; This function is called by:
  5087 ;;		_LCDStr
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text6
  5092  005DC6                     __ptext6:
  5093                           	opt stack 0
  5094  005DC6                     _LCDChrXY:
  5095                           	opt stack 26
  5096                           
  5097                           ;incstack = 0
  5098                           ;LCDChrXY@x stored from wreg
  5099  005DC6  6E13               	movwf	LCDChrXY@x,c
  5100                           
  5101                           ;lcd3310_SPI.c: 308: unsigned int index = 0;
  5102  005DC8  0E00               	movlw	0
  5103  005DCA  6E19               	movwf	LCDChrXY@index+1,c
  5104  005DCC  0E00               	movlw	0
  5105  005DCE  6E18               	movwf	LCDChrXY@index,c
  5106                           
  5107                           ;lcd3310_SPI.c: 309: unsigned int offset = 0;
  5108  005DD0  0E00               	movlw	0
  5109  005DD2  6E12               	movwf	LCDChrXY@offset+1,c
  5110  005DD4  0E00               	movlw	0
  5111  005DD6  6E11               	movwf	LCDChrXY@offset,c
  5112                           
  5113                           ;lcd3310_SPI.c: 310: unsigned int i = 0;
  5114  005DD8  0E00               	movlw	0
  5115  005DDA  6E17               	movwf	LCDChrXY@i+1,c
  5116  005DDC  0E00               	movlw	0
  5117  005DDE  6E16               	movwf	LCDChrXY@i,c
  5118                           
  5119                           ;lcd3310_SPI.c: 311: unsigned int mid_shift = 0;
  5120  005DE0  0E00               	movlw	0
  5121  005DE2  6E15               	movwf	LCDChrXY@mid_shift+1,c
  5122  005DE4  0E00               	movlw	0
  5123  005DE6  6E14               	movwf	LCDChrXY@mid_shift,c
  5124                           
  5125                           ;lcd3310_SPI.c: 314: if ( x > (103 / 6) ) return;
  5126  005DE8  0E11               	movlw	17
  5127  005DEA  6413               	cpfsgt	LCDChrXY@x,c
  5128  005DEC  D001               	goto	l2039
  5129  005DEE  0012               	return	
  5130  005DF0                     l2039:
  5131                           
  5132                           ;lcd3310_SPI.c: 315: if ( y > (48 / 13) | (y < 1) ) return;
  5133  005DF0  0E04               	movlw	4
  5134  005DF2  5C0D               	subwf	LCDChrXY@y,w,c
  5135  005DF4  B0D8               	btfsc	status,0,c
  5136  005DF6  0012               	return	
  5137  005DF8  660D               	tstfsz	LCDChrXY@y,c
  5138  005DFA  D001               	goto	l2043
  5139  005DFC  0012               	return	
  5140  005DFE                     l2043:
  5141                           
  5142                           ;lcd3310_SPI.c: 317: index = (((unsigned int)x*5+(unsigned int)1*103+66) % ((103 * 48) /
      +                           8));
  5143  005DFE  5013               	movf	LCDChrXY@x,w,c
  5144  005E00  0D05               	mullw	5
  5145  005E02  0EA9               	movlw	169
  5146  005E04  24F3               	addwf	prodl,w,c
  5147  005E06  6E08               	movwf	___lwmod@dividend,c
  5148  005E08  0E00               	movlw	0
  5149  005E0A  20F4               	addwfc	prodh,w,c
  5150  005E0C  6E09               	movwf	___lwmod@dividend+1,c
  5151  005E0E  0E02               	movlw	2
  5152  005E10  6E0B               	movwf	___lwmod@divisor+1,c
  5153  005E12  0E6A               	movlw	106
  5154  005E14  6E0A               	movwf	___lwmod@divisor,c
  5155  005E16  EC65  F02C         	call	___lwmod	;wreg free
  5156  005E1A  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5157  005E1E  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5158                           
  5159                           ;lcd3310_SPI.c: 319: for ( i = 0; i < 5; i++ )
  5160  005E22  0E00               	movlw	0
  5161  005E24  6E17               	movwf	LCDChrXY@i+1,c
  5162  005E26  0E00               	movlw	0
  5163  005E28  6E16               	movwf	LCDChrXY@i,c
  5164  005E2A  0E05               	movlw	5
  5165  005E2C  5C16               	subwf	LCDChrXY@i,w,c
  5166  005E2E  0E00               	movlw	0
  5167  005E30  5817               	subwfb	LCDChrXY@i+1,w,c
  5168  005E32  B0D8               	btfsc	status,0,c
  5169  005E34  0012               	return	
  5170                           
  5171                           ;lcd3310_SPI.c: 321: {
  5172                           ;lcd3310_SPI.c: 322: mid_shift = index%103;
  5173  005E36  C018  F008         	movff	LCDChrXY@index,___lwmod@dividend
  5174  005E3A  C019  F009         	movff	LCDChrXY@index+1,___lwmod@dividend+1
  5175  005E3E  0E00               	movlw	0
  5176  005E40  6E0B               	movwf	___lwmod@divisor+1,c
  5177  005E42  0E67               	movlw	103
  5178  005E44  6E0A               	movwf	___lwmod@divisor,c
  5179  005E46  EC65  F02C         	call	___lwmod	;wreg free
  5180  005E4A  C008  F014         	movff	?___lwmod,LCDChrXY@mid_shift
  5181  005E4E  C009  F015         	movff	?___lwmod+1,LCDChrXY@mid_shift+1
  5182                           
  5183                           ;lcd3310_SPI.c: 323: if(mid_shift < 51){
  5184  005E52  0E33               	movlw	51
  5185  005E54  5C14               	subwf	LCDChrXY@mid_shift,w,c
  5186  005E56  0E00               	movlw	0
  5187  005E58  5815               	subwfb	LCDChrXY@mid_shift+1,w,c
  5188  005E5A  B0D8               	btfsc	status,0,c
  5189  005E5C  D020               	goto	l2059
  5190                           
  5191                           ;lcd3310_SPI.c: 324: if((mid_shift-3)%5 == 0){
  5192  005E5E  0EFD               	movlw	253
  5193  005E60  2414               	addwf	LCDChrXY@mid_shift,w,c
  5194  005E62  6E08               	movwf	___lwmod@dividend,c
  5195  005E64  0EFF               	movlw	255
  5196  005E66  2015               	addwfc	LCDChrXY@mid_shift+1,w,c
  5197  005E68  6E09               	movwf	___lwmod@dividend+1,c
  5198  005E6A  0E00               	movlw	0
  5199  005E6C  6E0B               	movwf	___lwmod@divisor+1,c
  5200  005E6E  0E05               	movlw	5
  5201  005E70  6E0A               	movwf	___lwmod@divisor,c
  5202  005E72  EC65  F02C         	call	___lwmod	;wreg free
  5203  005E76  5009               	movf	?___lwmod+1,w,c
  5204  005E78  1008               	iorwf	?___lwmod,w,c
  5205  005E7A  A4D8               	btfss	status,2,c
  5206  005E7C  D010               	goto	l2059
  5207                           
  5208                           ;lcd3310_SPI.c: 325: index = (index + 412) % ((103 * 48) / 8);
  5209  005E7E  0E9C               	movlw	156
  5210  005E80  2418               	addwf	LCDChrXY@index,w,c
  5211  005E82  6E08               	movwf	___lwmod@dividend,c
  5212  005E84  0E01               	movlw	1
  5213  005E86  2019               	addwfc	LCDChrXY@index+1,w,c
  5214  005E88  6E09               	movwf	___lwmod@dividend+1,c
  5215  005E8A  0E02               	movlw	2
  5216  005E8C  6E0B               	movwf	___lwmod@divisor+1,c
  5217  005E8E  0E6A               	movlw	106
  5218  005E90  6E0A               	movwf	___lwmod@divisor,c
  5219  005E92  EC65  F02C         	call	___lwmod	;wreg free
  5220  005E96  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5221  005E9A  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5222  005E9E                     l2059:
  5223                           
  5224                           ;lcd3310_SPI.c: 326: }
  5225                           ;lcd3310_SPI.c: 327: }
  5226                           ;lcd3310_SPI.c: 328: if(mid_shift == 46){
  5227  005E9E  5014               	movf	LCDChrXY@mid_shift,w,c
  5228  005EA0  0A2E               	xorlw	46
  5229  005EA2  1015               	iorwf	LCDChrXY@mid_shift+1,w,c
  5230  005EA4  A4D8               	btfss	status,2,c
  5231  005EA6  D010               	goto	l2063
  5232                           
  5233                           ;lcd3310_SPI.c: 329: index = (index +121) % ((103 * 48) / 8);
  5234  005EA8  0E79               	movlw	121
  5235  005EAA  2418               	addwf	LCDChrXY@index,w,c
  5236  005EAC  6E08               	movwf	___lwmod@dividend,c
  5237  005EAE  0E00               	movlw	0
  5238  005EB0  2019               	addwfc	LCDChrXY@index+1,w,c
  5239  005EB2  6E09               	movwf	___lwmod@dividend+1,c
  5240  005EB4  0E02               	movlw	2
  5241  005EB6  6E0B               	movwf	___lwmod@divisor+1,c
  5242  005EB8  0E6A               	movlw	106
  5243  005EBA  6E0A               	movwf	___lwmod@divisor,c
  5244  005EBC  EC65  F02C         	call	___lwmod	;wreg free
  5245  005EC0  C008  F018         	movff	?___lwmod,LCDChrXY@index
  5246  005EC4  C009  F019         	movff	?___lwmod+1,LCDChrXY@index+1
  5247  005EC8                     l2063:
  5248                           
  5249                           ;lcd3310_SPI.c: 330: }
  5250                           ;lcd3310_SPI.c: 331: offset = FontLookup[ch - 32][i];
  5251  005EC8  0EE0               	movlw	224
  5252  005ECA  240E               	addwf	LCDChrXY@ch,w,c
  5253  005ECC  6E01               	movwf	___wmul@multiplier,c
  5254  005ECE  6A02               	clrf	___wmul@multiplier+1,c
  5255  005ED0  0EFF               	movlw	255
  5256  005ED2  2202               	addwfc	___wmul@multiplier+1,f,c
  5257  005ED4  0E00               	movlw	0
  5258  005ED6  6E04               	movwf	___wmul@multiplicand+1,c
  5259  005ED8  0E06               	movlw	6
  5260  005EDA  6E03               	movwf	___wmul@multiplicand,c
  5261  005EDC  EC05  F02C         	call	___wmul	;wreg free
  5262  005EE0  0EBF               	movlw	low _FontLookup
  5263  005EE2  6E0F               	movwf	??_LCDChrXY& (0+255),c
  5264  005EE4  0E7C               	movlw	high _FontLookup
  5265  005EE6  6E10               	movwf	(??_LCDChrXY+1)& (0+255),c
  5266  005EE8  5001               	movf	?___wmul,w,c
  5267  005EEA  260F               	addwf	??_LCDChrXY,f,c
  5268  005EEC  5002               	movf	?___wmul+1,w,c
  5269  005EEE  2210               	addwfc	??_LCDChrXY+1,f,c
  5270  005EF0  5016               	movf	LCDChrXY@i,w,c
  5271  005EF2  260F               	addwf	??_LCDChrXY,f,c
  5272  005EF4  5017               	movf	LCDChrXY@i+1,w,c
  5273  005EF6  2210               	addwfc	??_LCDChrXY+1,f,c
  5274  005EF8  C00F  FFF6         	movff	??_LCDChrXY,tblptrl
  5275  005EFC  C010  FFF7         	movff	??_LCDChrXY+1,tblptrh
  5276  005F00                     	if	0	;tblptru may be non-zero
  5277  005F00                     	endif
  5278  005F00                     	if	0	;tblptru may be non-zero
  5279  005F00                     	endif
  5280  005F00  0008               	tblrd		*
  5281  005F02  50F5               	movf	tablat,w,c
  5282  005F04  6E11               	movwf	LCDChrXY@offset,c
  5283  005F06  6A12               	clrf	LCDChrXY@offset+1,c
  5284                           
  5285                           ;lcd3310_SPI.c: 332: LcdMemory[index] = offset;
  5286  005F08  0E00               	movlw	low _LcdMemory
  5287  005F0A  2418               	addwf	LCDChrXY@index,w,c
  5288  005F0C  6ED9               	movwf	fsr2l,c
  5289  005F0E  0E02               	movlw	high _LcdMemory
  5290  005F10  2019               	addwfc	LCDChrXY@index+1,w,c
  5291  005F12  6EDA               	movwf	fsr2h,c
  5292  005F14  C011  FFDF         	movff	LCDChrXY@offset,indf2
  5293                           
  5294                           ;lcd3310_SPI.c: 333: index++;
  5295  005F18  4A18               	infsnz	LCDChrXY@index,f,c
  5296  005F1A  2A19               	incf	LCDChrXY@index+1,f,c
  5297  005F1C  4A16               	infsnz	LCDChrXY@i,f,c
  5298  005F1E  2A17               	incf	LCDChrXY@i+1,f,c
  5299  005F20  D784               	goto	L13
  5300  005F22                     __end_of_LCDChrXY:
  5301                           	opt stack 0
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf1	equ	0xFE7
  5311                           postinc1	equ	0xFE6
  5312                           postdec1	equ	0xFE5
  5313                           fsr1h	equ	0xFE2
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function ___lwmod *****************
  5323 ;; Defined at:
  5324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;  dividend        2    7[COMRAM] unsigned int 
  5327 ;;  divisor         2    9[COMRAM] unsigned int 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  counter         1   11[COMRAM] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2    7[COMRAM] unsigned int 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5339 ;;      Params:         4       0       0       0       0       0       0
  5340 ;;      Locals:         1       0       0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0
  5342 ;;      Totals:         5       0       0       0       0       0       0
  5343 ;;Total ram usage:        5 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_LCDChrXY
  5349 ;;		_sprintf
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text7
  5354  0058CA                     __ptext7:
  5355                           	opt stack 0
  5356  0058CA                     ___lwmod:
  5357                           	opt stack 27
  5358                           
  5359                           ;incstack = 0
  5360  0058CA  500B               	movf	___lwmod@divisor+1,w,c
  5361  0058CC  100A               	iorwf	___lwmod@divisor,w,c
  5362  0058CE  B4D8               	btfsc	status,2,c
  5363  0058D0  D018               	goto	l990
  5364  0058D2  0E01               	movlw	1
  5365  0058D4  6E0C               	movwf	___lwmod@counter,c
  5366  0058D6  D004               	goto	l1975
  5367  0058D8                     l1973:
  5368  0058D8  90D8               	bcf	status,0,c
  5369  0058DA  360A               	rlcf	___lwmod@divisor,f,c
  5370  0058DC  360B               	rlcf	___lwmod@divisor+1,f,c
  5371  0058DE  2A0C               	incf	___lwmod@counter,f,c
  5372  0058E0                     l1975:
  5373  0058E0  AE0B               	btfss	___lwmod@divisor+1,7,c
  5374  0058E2  D7FA               	goto	l1973
  5375  0058E4                     l1977:
  5376  0058E4  500A               	movf	___lwmod@divisor,w,c
  5377  0058E6  5C08               	subwf	___lwmod@dividend,w,c
  5378  0058E8  500B               	movf	___lwmod@divisor+1,w,c
  5379  0058EA  5809               	subwfb	___lwmod@dividend+1,w,c
  5380  0058EC  A0D8               	btfss	status,0,c
  5381  0058EE  D004               	goto	l1981
  5382  0058F0  500A               	movf	___lwmod@divisor,w,c
  5383  0058F2  5E08               	subwf	___lwmod@dividend,f,c
  5384  0058F4  500B               	movf	___lwmod@divisor+1,w,c
  5385  0058F6  5A09               	subwfb	___lwmod@dividend+1,f,c
  5386  0058F8                     l1981:
  5387  0058F8  90D8               	bcf	status,0,c
  5388  0058FA  320B               	rrcf	___lwmod@divisor+1,f,c
  5389  0058FC  320A               	rrcf	___lwmod@divisor,f,c
  5390  0058FE  2E0C               	decfsz	___lwmod@counter,f,c
  5391  005900  D7F1               	goto	l1977
  5392  005902                     l990:
  5393  005902  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5394  005906  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5395  00590A  0012               	return	
  5396  00590C                     __end_of___lwmod:
  5397                           	opt stack 0
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           indf1	equ	0xFE7
  5407                           postinc1	equ	0xFE6
  5408                           postdec1	equ	0xFE5
  5409                           fsr1h	equ	0xFE2
  5410                           fsr1l	equ	0xFE1
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           
  5418 ;; *************** function _setup *****************
  5419 ;; Defined at:
  5420 ;;		line 254 in file "main pic18.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;		None
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;		None
  5425 ;; Return value:  Size  Location     Type
  5426 ;;		None               void
  5427 ;; Registers used:
  5428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5434 ;;      Params:         0       0       0       0       0       0       0
  5435 ;;      Locals:         0       0       0       0       0       0       0
  5436 ;;      Temps:          0       0       0       0       0       0       0
  5437 ;;      Totals:         0       0       0       0       0       0       0
  5438 ;;Total ram usage:        0 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    4
  5441 ;; This function calls:
  5442 ;;		_LCDInit
  5443 ;;		_Open1USART
  5444 ;;		_OpenADC
  5445 ;;		_OpenSPI1
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text8
  5452  005BD8                     __ptext8:
  5453                           	opt stack 0
  5454  005BD8                     _setup:
  5455                           	opt stack 25
  5456                           
  5457                           ;main pic18.c: 255: TRISAbits.RA3 = 1;
  5458                           
  5459                           ;incstack = 0
  5460  005BD8  8692               	bsf	3986,3,c	;volatile
  5461                           
  5462                           ;main pic18.c: 256: ANSELAbits.ANSA3 = 1;
  5463  005BDA  010F               	movlb	15	; () banked
  5464  005BDC  8738               	bsf	56,3,b	;volatile
  5465                           
  5466                           ;main pic18.c: 257: TRISAbits.RA7 = 1;
  5467  005BDE  8E92               	bsf	3986,7,c	;volatile
  5468                           
  5469                           ; BSR set to: 15
  5470                           ;main pic18.c: 258: TRISC = 0x00;
  5471  005BE0  0E00               	movlw	0
  5472  005BE2  6E94               	movwf	3988,c	;volatile
  5473                           
  5474                           ;main pic18.c: 259: LATC = 0x00;
  5475  005BE4  0E00               	movlw	0
  5476  005BE6  6E8B               	movwf	3979,c	;volatile
  5477                           
  5478                           ;main pic18.c: 260: ANSELC = 0x00;
  5479  005BE8  0E00               	movlw	0
  5480  005BEA  010F               	movlb	15	; () banked
  5481  005BEC  6F3A               	movwf	58,b	;volatile
  5482                           
  5483                           ; BSR set to: 15
  5484                           ;main pic18.c: 261: TRISCbits.TRISC6 = 1;
  5485  005BEE  8C94               	bsf	3988,6,c	;volatile
  5486                           
  5487                           ; BSR set to: 15
  5488                           ;main pic18.c: 262: TRISCbits.TRISC7 = 1;
  5489  005BF0  8E94               	bsf	3988,7,c	;volatile
  5490                           
  5491                           ; BSR set to: 15
  5492                           ;main pic18.c: 263: TRISBbits.TRISB1 = 0;
  5493  005BF2  9293               	bcf	3987,1,c	;volatile
  5494                           
  5495                           ; BSR set to: 15
  5496                           ;main pic18.c: 264: LATBbits.LATB1 = 0;
  5497  005BF4  928A               	bcf	3978,1,c	;volatile
  5498                           
  5499                           ; BSR set to: 15
  5500                           ;main pic18.c: 267: OSCCONbits.IRCF = 0b111;
  5501  005BF6  88D3               	bsf	4051,4,c	;volatile
  5502  005BF8  8AD3               	bsf	4051,5,c	;volatile
  5503  005BFA  8CD3               	bsf	4051,6,c	;volatile
  5504                           
  5505                           ;main pic18.c: 268: OSCCONbits.SCS = 0b10;
  5506  005BFC  50D3               	movf	4051,w,c	;volatile
  5507  005BFE  0BFC               	andlw	-4
  5508  005C00  0902               	iorlw	2
  5509  005C02  6ED3               	movwf	4051,c	;volatile
  5510                           
  5511                           ; BSR set to: 15
  5512                           ;main pic18.c: 269: OSCTUNEbits.TUN = 0b000000;
  5513  005C04  909B               	bcf	3995,0,c	;volatile
  5514  005C06  929B               	bcf	3995,1,c	;volatile
  5515  005C08  949B               	bcf	3995,2,c	;volatile
  5516  005C0A  969B               	bcf	3995,3,c	;volatile
  5517  005C0C  989B               	bcf	3995,4,c	;volatile
  5518  005C0E  9A9B               	bcf	3995,5,c	;volatile
  5519                           
  5520                           ; BSR set to: 15
  5521                           ;main pic18.c: 270: OSCTUNEbits.PLLEN = 1;
  5522  005C10  8C9B               	bsf	3995,6,c	;volatile
  5523                           
  5524                           ; BSR set to: 15
  5525                           ;main pic18.c: 271: OSCCON2bits.MFIOSEL = 0;
  5526  005C12  98D2               	bcf	4050,4,c	;volatile
  5527                           
  5528                           ; BSR set to: 15
  5529                           ;main pic18.c: 272: OSCTUNEbits.INTSRC = 1;
  5530  005C14  8E9B               	bsf	3995,7,c	;volatile
  5531                           
  5532                           ; BSR set to: 15
  5533                           ;main pic18.c: 275: OpenSPI1(0b00000000,
  5534                           ;main pic18.c: 276: 0b00000001,
  5535                           ;main pic18.c: 277: 0b00000000);
  5536  005C16  0E01               	movlw	1
  5537  005C18  6E01               	movwf	OpenSPI1@bus_mode,c
  5538  005C1A  0E00               	movlw	0
  5539  005C1C  6E02               	movwf	OpenSPI1@smp_phase,c
  5540  005C1E  0E00               	movlw	0
  5541  005C20  EC50  F02D         	call	_OpenSPI1
  5542                           
  5543                           ;main pic18.c: 286: LCDInit();
  5544  005C24  EC86  F02E         	call	_LCDInit	;wreg free
  5545                           
  5546                           ;main pic18.c: 289: baud_rate = (4000000 / 9600 / 16 - 1);
  5547  005C28  0E19               	movlw	25
  5548  005C2A  0100               	movlb	0	; () banked
  5549  005C2C  6FA3               	movwf	_baud_rate& (0+255),b
  5550  005C2E  0E00               	movlw	0
  5551  005C30  0100               	movlb	0	; () banked
  5552  005C32  6FA4               	movwf	(_baud_rate+1)& (0+255),b
  5553  005C34  0E00               	movlw	0
  5554  005C36  0100               	movlb	0	; () banked
  5555  005C38  6FA5               	movwf	(_baud_rate+2)& (0+255),b
  5556  005C3A  0E00               	movlw	0
  5557  005C3C  0100               	movlb	0	; () banked
  5558  005C3E  6FA6               	movwf	(_baud_rate+3)& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;main pic18.c: 290: OpenADC(0b11111111 &
  5562                           ;main pic18.c: 291: 0b11111111 &
  5563                           ;main pic18.c: 292: 0b11110001,
  5564                           ;main pic18.c: 293: 0b10000011 &
  5565                           ;main pic18.c: 294: 0b01111111 &
  5566                           ;main pic18.c: 295: 0b11110111 &
  5567                           ;main pic18.c: 296: 0b11111100,
  5568                           ;main pic18.c: 297: 0b1110);
  5569  005C40  0E00               	movlw	0
  5570  005C42  6E01               	movwf	OpenADC@config2,c
  5571  005C44  0E0E               	movlw	14
  5572  005C46  6E02               	movwf	OpenADC@config3,c
  5573  005C48  0EF1               	movlw	241
  5574  005C4A  ECAB  F02C         	call	_OpenADC
  5575                           
  5576                           ;main pic18.c: 299: RCSTA1&=0b01001111,TXSTA1bits.TXEN=0,PIE1&=0b11001111;
  5577  005C4E  0E4F               	movlw	79
  5578  005C50  16AB               	andwf	4011,f,c	;volatile
  5579  005C52  9AAC               	bcf	4012,5,c	;volatile
  5580  005C54  0ECF               	movlw	207
  5581  005C56  169D               	andwf	3997,f,c	;volatile
  5582                           
  5583                           ;main pic18.c: 300: Open1USART( 0b01111111 &
  5584                           ;main pic18.c: 301: 0b10111111 &
  5585                           ;main pic18.c: 302: 0b11111110 &
  5586                           ;main pic18.c: 303: 0b11111101 &
  5587                           ;main pic18.c: 304: 0b11111111 &
  5588                           ;main pic18.c: 305: 0b11101111,
  5589                           ;main pic18.c: 306: baud_rate );
  5590  005C58  C0A3  F001         	movff	_baud_rate,Open1USART@spbrg
  5591  005C5C  C0A4  F002         	movff	_baud_rate+1,Open1USART@spbrg+1
  5592  005C60  0E2C               	movlw	44
  5593  005C62  EC7B  F02D         	call	_Open1USART
  5594  005C66  0012               	return	
  5595  005C68                     __end_of_setup:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           postinc1	equ	0xFE6
  5607                           postdec1	equ	0xFE5
  5608                           fsr1h	equ	0xFE2
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           postinc2	equ	0xFDE
  5612                           postdec2	equ	0xFDD
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _OpenSPI1 *****************
  5618 ;; Defined at:
  5619 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi1open.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  sync_mode       1    wreg     unsigned char 
  5622 ;;  bus_mode        1    0[COMRAM] unsigned char 
  5623 ;;  smp_phase       1    1[COMRAM] unsigned char 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  sync_mode       1    2[COMRAM] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;		None               void
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5635 ;;      Params:         2       0       0       0       0       0       0
  5636 ;;      Locals:         1       0       0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0
  5638 ;;      Totals:         3       0       0       0       0       0       0
  5639 ;;Total ram usage:        3 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_setup
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text9
  5649  005AA0                     __ptext9:
  5650                           	opt stack 0
  5651  005AA0                     _OpenSPI1:
  5652                           	opt stack 28
  5653                           
  5654                           ;incstack = 0
  5655                           ;OpenSPI1@sync_mode stored from wreg
  5656  005AA0  6E03               	movwf	OpenSPI1@sync_mode,c
  5657  005AA2  0E3F               	movlw	63
  5658  005AA4  16C7               	andwf	4039,f,c	;volatile
  5659  005AA6  0E00               	movlw	0
  5660  005AA8  6EC6               	movwf	4038,c	;volatile
  5661  005AAA  5003               	movf	OpenSPI1@sync_mode,w,c
  5662  005AAC  12C6               	iorwf	4038,f,c	;volatile
  5663  005AAE  5002               	movf	OpenSPI1@smp_phase,w,c
  5664  005AB0  12C7               	iorwf	4039,f,c	;volatile
  5665  005AB2  D005               	goto	l2105
  5666  005AB4                     l381:
  5667  005AB4  8CC7               	bsf	4039,6,c	;volatile
  5668  005AB6  D013               	goto	l2109
  5669  005AB8                     l383:
  5670  005AB8  8CC7               	bsf	4039,6,c	;volatile
  5671  005ABA                     l384:
  5672  005ABA  88C6               	bsf	4038,4,c	;volatile
  5673  005ABC  D010               	goto	l2109
  5674  005ABE                     l2105:
  5675  005ABE  5001               	movf	OpenSPI1@bus_mode,w,c
  5676                           
  5677                           ; Switch size 1, requested type "space"
  5678                           ; Number of cases is 3, Range of values is 0 to 3
  5679                           ; switch strategies available:
  5680                           ; Name         Instructions Cycles
  5681                           ; simple_byte           10     6 (average)
  5682                           ;	Chosen strategy is simple_byte
  5683  005AC0  0A00               	xorlw	0	; case 0
  5684  005AC2  B4D8               	btfsc	status,2,c
  5685  005AC4  D7F7               	goto	l381
  5686  005AC6  0A02               	xorlw	2	; case 2
  5687  005AC8  B4D8               	btfsc	status,2,c
  5688  005ACA  D7F6               	goto	l383
  5689  005ACC  0A01               	xorlw	1	; case 3
  5690  005ACE  B4D8               	btfsc	status,2,c
  5691  005AD0  D7F4               	goto	l384
  5692  005AD2  D005               	goto	l2109
  5693  005AD4                     l387:
  5694  005AD4  8A92               	bsf	3986,5,c	;volatile
  5695  005AD6                     l389:
  5696  005AD6  8694               	bsf	3988,3,c	;volatile
  5697  005AD8  D00A               	goto	l388
  5698  005ADA                     l390:
  5699  005ADA  9694               	bcf	3988,3,c	;volatile
  5700  005ADC  D008               	goto	l388
  5701  005ADE                     l2109:
  5702  005ADE  5003               	movf	OpenSPI1@sync_mode,w,c
  5703                           
  5704                           ; Switch size 1, requested type "space"
  5705                           ; Number of cases is 2, Range of values is 4 to 5
  5706                           ; switch strategies available:
  5707                           ; Name         Instructions Cycles
  5708                           ; simple_byte            7     4 (average)
  5709                           ;	Chosen strategy is simple_byte
  5710  005AE0  0A04               	xorlw	4	; case 4
  5711  005AE2  B4D8               	btfsc	status,2,c
  5712  005AE4  D7F7               	goto	l387
  5713  005AE6  0A01               	xorlw	1	; case 5
  5714  005AE8  B4D8               	btfsc	status,2,c
  5715  005AEA  D7F5               	goto	l389
  5716  005AEC  D7F6               	goto	l390
  5717  005AEE                     l388:
  5718  005AEE  8894               	bsf	3988,4,c	;volatile
  5719  005AF0  9A94               	bcf	3988,5,c	;volatile
  5720  005AF2  8AC6               	bsf	4038,5,c	;volatile
  5721  005AF4  0012               	return	
  5722  005AF6                     __end_of_OpenSPI1:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           prodh	equ	0xFF4
  5729                           prodl	equ	0xFF3
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           indf1	equ	0xFE7
  5733                           postinc1	equ	0xFE6
  5734                           postdec1	equ	0xFE5
  5735                           fsr1h	equ	0xFE2
  5736                           fsr1l	equ	0xFE1
  5737                           indf2	equ	0xFDF
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _OpenADC *****************
  5745 ;; Defined at:
  5746 ;;		line 305 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcopen.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  config          1    wreg     unsigned char 
  5749 ;;  config2         1    0[COMRAM] unsigned char 
  5750 ;;  config3         1    1[COMRAM] unsigned char 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  config          1    4[COMRAM] unsigned char 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;		None               void
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5762 ;;      Params:         2       0       0       0       0       0       0
  5763 ;;      Locals:         1       0       0       0       0       0       0
  5764 ;;      Temps:          2       0       0       0       0       0       0
  5765 ;;      Totals:         5       0       0       0       0       0       0
  5766 ;;Total ram usage:        5 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_setup
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text10
  5776  005956                     __ptext10:
  5777                           	opt stack 0
  5778  005956                     _OpenADC:
  5779                           	opt stack 28
  5780                           
  5781                           ;incstack = 0
  5782                           ;OpenADC@config stored from wreg
  5783  005956  6E05               	movwf	OpenADC@config,c
  5784  005958  0E00               	movlw	0
  5785  00595A  6EC2               	movwf	4034,c	;volatile
  5786  00595C  0E00               	movlw	0
  5787  00595E  6EC1               	movwf	4033,c	;volatile
  5788  005960  0E00               	movlw	0
  5789  005962  6EC0               	movwf	4032,c	;volatile
  5790  005964  5001               	movf	OpenADC@config2,w,c
  5791  005966  0B7C               	andlw	124
  5792  005968  6EC2               	movwf	4034,c	;volatile
  5793  00596A  C002  FFC1         	movff	OpenADC@config3,4033	;volatile
  5794  00596E  C005  F003         	movff	OpenADC@config,??_OpenADC
  5795  005972  90D8               	bcf	status,0,c
  5796  005974  3603               	rlcf	??_OpenADC,f,c
  5797  005976  90D8               	bcf	status,0,c
  5798  005978  3603               	rlcf	??_OpenADC,f,c
  5799  00597A  0E38               	movlw	56
  5800  00597C  1603               	andwf	??_OpenADC,f,c
  5801  00597E  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  5802  005982  3A04               	swapf	??_OpenADC+1,f,c
  5803  005984  0E0F               	movlw	15
  5804  005986  1604               	andwf	??_OpenADC+1,f,c
  5805  005988  0E07               	movlw	7
  5806  00598A  1604               	andwf	??_OpenADC+1,f,c
  5807  00598C  5005               	movf	OpenADC@config,w,c
  5808  00598E  0B80               	andlw	128
  5809  005990  1004               	iorwf	??_OpenADC+1,w,c
  5810  005992  1003               	iorwf	??_OpenADC,w,c
  5811  005994  6EC0               	movwf	4032,c	;volatile
  5812  005996  AE01               	btfss	OpenADC@config2,7,c
  5813  005998  D003               	goto	l364
  5814  00599A  9C9E               	bcf	3998,6,c	;volatile
  5815  00599C  8C9D               	bsf	3997,6,c	;volatile
  5816  00599E  8CF2               	bsf	intcon,6,c	;volatile
  5817  0059A0                     l364:
  5818  0059A0  80C2               	bsf	4034,0,c	;volatile
  5819  0059A2  0012               	return	
  5820  0059A4                     __end_of_OpenADC:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           intcon	equ	0xFF2
  5829                           postinc0	equ	0xFEE
  5830                           wreg	equ	0xFE8
  5831                           indf1	equ	0xFE7
  5832                           postinc1	equ	0xFE6
  5833                           postdec1	equ	0xFE5
  5834                           fsr1h	equ	0xFE2
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8
  5842                           
  5843 ;; *************** function _Open1USART *****************
  5844 ;; Defined at:
  5845 ;;		line 124 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1open.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;  config          1    wreg     unsigned char 
  5848 ;;  spbrg           2    0[COMRAM] unsigned int 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  config          1    5[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;		None               void
  5853 ;; Registers used:
  5854 ;;		wreg, status,2
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         2       0       0       0       0       0       0
  5861 ;;      Locals:         1       0       0       0       0       0       0
  5862 ;;      Temps:          3       0       0       0       0       0       0
  5863 ;;      Totals:         6       0       0       0       0       0       0
  5864 ;;Total ram usage:        6 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; This function calls:
  5867 ;;		Nothing
  5868 ;; This function is called by:
  5869 ;;		_setup
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text11
  5874  005AF6                     __ptext11:
  5875                           	opt stack 0
  5876  005AF6                     _Open1USART:
  5877                           	opt stack 28
  5878                           
  5879                           ;incstack = 0
  5880                           ;Open1USART@config stored from wreg
  5881  005AF6  6E06               	movwf	Open1USART@config,c
  5882  005AF8  0E00               	movlw	0
  5883  005AFA  6EAC               	movwf	4012,c	;volatile
  5884  005AFC  0E00               	movlw	0
  5885  005AFE  6EAB               	movwf	4011,c	;volatile
  5886  005B00  B006               	btfsc	Open1USART@config,0,c
  5887  005B02  88AC               	bsf	4012,4,c	;volatile
  5888  005B04  A206               	btfss	Open1USART@config,1,c
  5889  005B06  D002               	goto	l2177
  5890  005B08  8CAC               	bsf	4012,6,c	;volatile
  5891  005B0A  8CAB               	bsf	4011,6,c	;volatile
  5892  005B0C                     l2177:
  5893  005B0C  B406               	btfsc	Open1USART@config,2,c
  5894  005B0E  8EAC               	bsf	4012,7,c	;volatile
  5895  005B10  A606               	btfss	Open1USART@config,3,c
  5896  005B12  D002               	goto	l427
  5897  005B14  88AB               	bsf	4011,4,c	;volatile
  5898  005B16  D001               	goto	l2185
  5899  005B18                     l427:
  5900  005B18  8AAB               	bsf	4011,5,c	;volatile
  5901  005B1A                     l2185:
  5902  005B1A  B806               	btfsc	Open1USART@config,4,c
  5903  005B1C  84AC               	bsf	4012,2,c	;volatile
  5904  005B1E  BA06               	btfsc	Open1USART@config,5,c
  5905  005B20  86AB               	bsf	4011,3,c	;volatile
  5906  005B22  AC06               	btfss	Open1USART@config,6,c
  5907  005B24  D002               	goto	l431
  5908  005B26  8A9D               	bsf	3997,5,c	;volatile
  5909  005B28  D001               	goto	l2197
  5910  005B2A                     l431:
  5911  005B2A  9A9D               	bcf	3997,5,c	;volatile
  5912  005B2C                     l2197:
  5913  005B2C  AE06               	btfss	Open1USART@config,7,c
  5914  005B2E  D002               	goto	l433
  5915  005B30  889D               	bsf	3997,4,c	;volatile
  5916  005B32  D001               	goto	l434
  5917  005B34                     l433:
  5918  005B34  989D               	bcf	3997,4,c	;volatile
  5919  005B36                     l434:
  5920  005B36  C001  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  5921  005B3A  C002  F003         	movff	Open1USART@spbrg+1,??_Open1USART
  5922  005B3E  C003  F004         	movff	??_Open1USART,??_Open1USART+1
  5923  005B42  6A05               	clrf	(??_Open1USART+2)& (0+255),c
  5924  005B44  5004               	movf	??_Open1USART+1,w,c
  5925  005B46  6EB0               	movwf	4016,c	;volatile
  5926  005B48  8AAC               	bsf	4012,5,c	;volatile
  5927  005B4A  8EAB               	bsf	4011,7,c	;volatile
  5928  005B4C  0012               	return	
  5929  005B4E                     __end_of_Open1USART:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           prodh	equ	0xFF4
  5936                           prodl	equ	0xFF3
  5937                           intcon	equ	0xFF2
  5938                           postinc0	equ	0xFEE
  5939                           wreg	equ	0xFE8
  5940                           indf1	equ	0xFE7
  5941                           postinc1	equ	0xFE6
  5942                           postdec1	equ	0xFE5
  5943                           fsr1h	equ	0xFE2
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _LCDInit *****************
  5953 ;; Defined at:
  5954 ;;		line 178 in file "lcd3310_SPI.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5968 ;;      Params:         0       0       0       0       0       0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0
  5971 ;;      Totals:         0       0       0       0       0       0       0
  5972 ;;Total ram usage:        0 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    3
  5975 ;; This function calls:
  5976 ;;		_Delay
  5977 ;;		_Initialize_SPI
  5978 ;;		_LCDClear
  5979 ;;		_LCDSend
  5980 ;;		_LCDUpdate
  5981 ;; This function is called by:
  5982 ;;		_setup
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text12
  5987  005D0C                     __ptext12:
  5988                           	opt stack 0
  5989  005D0C                     _LCDInit:
  5990                           	opt stack 25
  5991                           
  5992                           ;lcd3310_SPI.c: 181: Initialize_SPI();
  5993                           
  5994                           ;incstack = 0
  5995  005D0C  ECB5  F02B         	call	_Initialize_SPI	;wreg free
  5996                           
  5997                           ;lcd3310_SPI.c: 184: TRISCbits.RC1 = 0;
  5998  005D10  9294               	bcf	3988,1,c	;volatile
  5999                           
  6000                           ;lcd3310_SPI.c: 185: LATCbits.LATC1 = 1;
  6001  005D12  828B               	bsf	3979,1,c	;volatile
  6002                           
  6003                           ;lcd3310_SPI.c: 186: TRISCbits.RC2 = 0;
  6004  005D14  9494               	bcf	3988,2,c	;volatile
  6005                           
  6006                           ;lcd3310_SPI.c: 187: TRISCbits.RC0 = 0;
  6007  005D16  9094               	bcf	3988,0,c	;volatile
  6008                           
  6009                           ;lcd3310_SPI.c: 190: LATCbits.LATC0 = 0;
  6010  005D18  908B               	bcf	3979,0,c	;volatile
  6011                           
  6012                           ;lcd3310_SPI.c: 191: Delay(1000);
  6013  005D1A  0EE8               	movlw	232
  6014  005D1C  6E01               	movwf	Delay@a,c
  6015  005D1E  0E03               	movlw	3
  6016  005D20  6E02               	movwf	Delay@a+1,c
  6017  005D22  0E00               	movlw	0
  6018  005D24  6E03               	movwf	Delay@a+2,c
  6019  005D26  0E00               	movlw	0
  6020  005D28  6E04               	movwf	Delay@a+3,c
  6021  005D2A  ECD6  F02B         	call	_Delay	;wreg free
  6022                           
  6023                           ;lcd3310_SPI.c: 192: LATCbits.LATC0 = 1;
  6024  005D2E  808B               	bsf	3979,0,c	;volatile
  6025                           
  6026                           ;lcd3310_SPI.c: 193: Delay(1000);
  6027  005D30  0EE8               	movlw	232
  6028  005D32  6E01               	movwf	Delay@a,c
  6029  005D34  0E03               	movlw	3
  6030  005D36  6E02               	movwf	Delay@a+1,c
  6031  005D38  0E00               	movlw	0
  6032  005D3A  6E03               	movwf	Delay@a+2,c
  6033  005D3C  0E00               	movlw	0
  6034  005D3E  6E04               	movwf	Delay@a+3,c
  6035  005D40  ECD6  F02B         	call	_Delay	;wreg free
  6036                           
  6037                           ;lcd3310_SPI.c: 196: LCDSend( 0x21, 0 );
  6038  005D44  0E00               	movlw	0
  6039  005D46  6E07               	movwf	LCDSend@cd,c
  6040  005D48  0E21               	movlw	33
  6041  005D4A  ECF2  F02B         	call	_LCDSend
  6042                           
  6043                           ;lcd3310_SPI.c: 197: LCDSend( 0xc0, 0 );
  6044  005D4E  0E00               	movlw	0
  6045  005D50  6E07               	movwf	LCDSend@cd,c
  6046  005D52  0EC0               	movlw	192
  6047  005D54  ECF2  F02B         	call	_LCDSend
  6048                           
  6049                           ;lcd3310_SPI.c: 202: LCDSend( 0x06, 0);
  6050  005D58  0E00               	movlw	0
  6051  005D5A  6E07               	movwf	LCDSend@cd,c
  6052  005D5C  0E06               	movlw	6
  6053  005D5E  ECF2  F02B         	call	_LCDSend
  6054                           
  6055                           ;lcd3310_SPI.c: 204: LCDSend( 0x12, 0 );
  6056  005D62  0E00               	movlw	0
  6057  005D64  6E07               	movwf	LCDSend@cd,c
  6058  005D66  0E12               	movlw	18
  6059  005D68  ECF2  F02B         	call	_LCDSend
  6060                           
  6061                           ;lcd3310_SPI.c: 205: LCDSend( 0x20, 0 );
  6062  005D6C  0E00               	movlw	0
  6063  005D6E  6E07               	movwf	LCDSend@cd,c
  6064  005D70  0E20               	movlw	32
  6065  005D72  ECF2  F02B         	call	_LCDSend
  6066                           
  6067                           ;lcd3310_SPI.c: 207: LCDSend(0x09, 0);
  6068  005D76  0E00               	movlw	0
  6069  005D78  6E07               	movwf	LCDSend@cd,c
  6070  005D7A  0E09               	movlw	9
  6071  005D7C  ECF2  F02B         	call	_LCDSend
  6072                           
  6073                           ;lcd3310_SPI.c: 208: Delay(750);
  6074  005D80  0EEE               	movlw	238
  6075  005D82  6E01               	movwf	Delay@a,c
  6076  005D84  0E02               	movlw	2
  6077  005D86  6E02               	movwf	Delay@a+1,c
  6078  005D88  0E00               	movlw	0
  6079  005D8A  6E03               	movwf	Delay@a+2,c
  6080  005D8C  0E00               	movlw	0
  6081  005D8E  6E04               	movwf	Delay@a+3,c
  6082  005D90  ECD6  F02B         	call	_Delay	;wreg free
  6083                           
  6084                           ;lcd3310_SPI.c: 210: LCDSend( 0x08, 0 );
  6085  005D94  0E00               	movlw	0
  6086  005D96  6E07               	movwf	LCDSend@cd,c
  6087  005D98  0E08               	movlw	8
  6088  005D9A  ECF2  F02B         	call	_LCDSend
  6089                           
  6090                           ;lcd3310_SPI.c: 211: Delay(50);
  6091  005D9E  0E32               	movlw	50
  6092  005DA0  6E01               	movwf	Delay@a,c
  6093  005DA2  0E00               	movlw	0
  6094  005DA4  6E02               	movwf	Delay@a+1,c
  6095  005DA6  0E00               	movlw	0
  6096  005DA8  6E03               	movwf	Delay@a+2,c
  6097  005DAA  0E00               	movlw	0
  6098  005DAC  6E04               	movwf	Delay@a+3,c
  6099  005DAE  ECD6  F02B         	call	_Delay	;wreg free
  6100                           
  6101                           ;lcd3310_SPI.c: 212: LCDSend( 0x0C, 0 );
  6102  005DB2  0E00               	movlw	0
  6103  005DB4  6E07               	movwf	LCDSend@cd,c
  6104  005DB6  0E0C               	movlw	12
  6105  005DB8  ECF2  F02B         	call	_LCDSend
  6106                           
  6107                           ;lcd3310_SPI.c: 215: LCDClear();
  6108  005DBC  EC18  F02C         	call	_LCDClear	;wreg free
  6109                           
  6110                           ;lcd3310_SPI.c: 216: LCDUpdate();
  6111  005DC0  ECA7  F02D         	call	_LCDUpdate	;wreg free
  6112  005DC4  0012               	return	
  6113  005DC6                     __end_of_LCDInit:
  6114                           	opt stack 0
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           indf1	equ	0xFE7
  6125                           postinc1	equ	0xFE6
  6126                           postdec1	equ	0xFE5
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           postdec2	equ	0xFDD
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function _LCDUpdate *****************
  6137 ;; Defined at:
  6138 ;;		line 242 in file "lcd3310_SPI.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;		None
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  y               2   10[COMRAM] int 
  6143 ;;  x               2    8[COMRAM] int 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6153 ;;      Params:         0       0       0       0       0       0       0
  6154 ;;      Locals:         4       0       0       0       0       0       0
  6155 ;;      Temps:          0       0       0       0       0       0       0
  6156 ;;      Totals:         4       0       0       0       0       0       0
  6157 ;;Total ram usage:        4 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    2
  6160 ;; This function calls:
  6161 ;;		_LCDSend
  6162 ;;		___wmul
  6163 ;; This function is called by:
  6164 ;;		_LCDInit
  6165 ;;		_LCDStr
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text13
  6170  005B4E                     __ptext13:
  6171                           	opt stack 0
  6172  005B4E                     _LCDUpdate:
  6173                           	opt stack 25
  6174                           
  6175                           ;lcd3310_SPI.c: 244: int x,y;
  6176                           ;lcd3310_SPI.c: 246: for(y=0; y<(48 / 8); y++) {
  6177                           
  6178                           ;incstack = 0
  6179  005B4E  0E00               	movlw	0
  6180  005B50  6E0C               	movwf	LCDUpdate@y+1,c
  6181  005B52  0E00               	movlw	0
  6182  005B54  6E0B               	movwf	LCDUpdate@y,c
  6183  005B56  500C               	movf	LCDUpdate@y+1,w,c
  6184  005B58  0A80               	xorlw	128
  6185  005B5A  0F80               	addlw	-128
  6186  005B5C  0E06               	movlw	6
  6187  005B5E  B4D8               	btfsc	status,2,c
  6188  005B60  5C0B               	subwf	LCDUpdate@y,w,c
  6189  005B62  B0D8               	btfsc	status,0,c
  6190  005B64  0012               	return	
  6191                           
  6192                           ;lcd3310_SPI.c: 247: LCDSend(0x80, 0 );
  6193  005B66  0E00               	movlw	0
  6194  005B68  6E07               	movwf	LCDSend@cd,c
  6195  005B6A  0E80               	movlw	128
  6196  005B6C  ECF2  F02B         	call	_LCDSend
  6197                           
  6198                           ;lcd3310_SPI.c: 248: LCDSend(0x40 | y, 0 );
  6199  005B70  0E00               	movlw	0
  6200  005B72  6E07               	movwf	LCDSend@cd,c
  6201  005B74  500B               	movf	LCDUpdate@y,w,c
  6202  005B76  0940               	iorlw	64
  6203  005B78  ECF2  F02B         	call	_LCDSend
  6204                           
  6205                           ;lcd3310_SPI.c: 250: for(x=103; x > 0; x--) {
  6206  005B7C  0E00               	movlw	0
  6207  005B7E  6E0A               	movwf	LCDUpdate@x+1,c
  6208  005B80  0E67               	movlw	103
  6209  005B82  6E09               	movwf	LCDUpdate@x,c
  6210  005B84  500A               	movf	LCDUpdate@x+1,w,c
  6211  005B86  0A80               	xorlw	128
  6212  005B88  6EF3               	movwf	prodl,c
  6213  005B8A  0E80               	movlw	128
  6214  005B8C  5CF3               	subwf	prodl,w,c
  6215  005B8E  0E01               	movlw	1
  6216  005B90  B4D8               	btfsc	status,2,c
  6217  005B92  5C09               	subwf	LCDUpdate@x,w,c
  6218  005B94  A0D8               	btfss	status,0,c
  6219  005B96  D01D               	goto	l2029
  6220                           
  6221                           ;lcd3310_SPI.c: 251: LCDSend( LcdMemory[y * 103 + x ], 1 );
  6222  005B98  0E01               	movlw	1
  6223  005B9A  6E07               	movwf	LCDSend@cd,c
  6224  005B9C  C00B  F001         	movff	LCDUpdate@y,___wmul@multiplier
  6225  005BA0  C00C  F002         	movff	LCDUpdate@y+1,___wmul@multiplier+1
  6226  005BA4  0E00               	movlw	0
  6227  005BA6  6E04               	movwf	___wmul@multiplicand+1,c
  6228  005BA8  0E67               	movlw	103
  6229  005BAA  6E03               	movwf	___wmul@multiplicand,c
  6230  005BAC  EC05  F02C         	call	___wmul	;wreg free
  6231  005BB0  5009               	movf	LCDUpdate@x,w,c
  6232  005BB2  2601               	addwf	?___wmul,f,c
  6233  005BB4  500A               	movf	LCDUpdate@x+1,w,c
  6234  005BB6  2202               	addwfc	?___wmul+1,f,c
  6235  005BB8  0E00               	movlw	low _LcdMemory
  6236  005BBA  2401               	addwf	?___wmul,w,c
  6237  005BBC  6ED9               	movwf	fsr2l,c
  6238  005BBE  0E02               	movlw	high _LcdMemory
  6239  005BC0  2002               	addwfc	?___wmul+1,w,c
  6240  005BC2  6EDA               	movwf	fsr2h,c
  6241  005BC4  50DF               	movf	indf2,w,c
  6242  005BC6  ECF2  F02B         	call	_LCDSend
  6243  005BCA  0609               	decf	LCDUpdate@x,f,c
  6244  005BCC  A0D8               	btfss	status,0,c
  6245  005BCE  060A               	decf	LCDUpdate@x+1,f,c
  6246  005BD0  D7D9               	goto	L14
  6247  005BD2                     l2029:
  6248  005BD2  4A0B               	infsnz	LCDUpdate@y,f,c
  6249  005BD4  2A0C               	incf	LCDUpdate@y+1,f,c
  6250  005BD6  D7BF               	goto	L15
  6251  005BD8                     __end_of_LCDUpdate:
  6252                           	opt stack 0
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           indf1	equ	0xFE7
  6263                           postinc1	equ	0xFE6
  6264                           postdec1	equ	0xFE5
  6265                           fsr1h	equ	0xFE2
  6266                           fsr1l	equ	0xFE1
  6267                           indf2	equ	0xFDF
  6268                           postinc2	equ	0xFDE
  6269                           postdec2	equ	0xFDD
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function ___wmul *****************
  6275 ;; Defined at:
  6276 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  multiplier      2    0[COMRAM] unsigned int 
  6279 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  product         2    4[COMRAM] unsigned int 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  2    0[COMRAM] unsigned int 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, prodl, prodh
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6291 ;;      Params:         4       0       0       0       0       0       0
  6292 ;;      Locals:         2       0       0       0       0       0       0
  6293 ;;      Temps:          0       0       0       0       0       0       0
  6294 ;;      Totals:         6       0       0       0       0       0       0
  6295 ;;Total ram usage:        6 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_main
  6301 ;;		_LCDUpdate
  6302 ;;		_LCDChrXY
  6303 ;;		_LCDChrXYInverse
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text14
  6308  00580A                     __ptext14:
  6309                           	opt stack 0
  6310  00580A                     ___wmul:
  6311                           	opt stack 26
  6312                           
  6313                           ;incstack = 0
  6314  00580A  5001               	movf	___wmul@multiplier,w,c
  6315  00580C  0203               	mulwf	___wmul@multiplicand,c
  6316  00580E  CFF3 F005          	movff	prodl,___wmul@product
  6317  005812  CFF4 F006          	movff	prodh,___wmul@product+1
  6318  005816  5001               	movf	___wmul@multiplier,w,c
  6319  005818  0204               	mulwf	___wmul@multiplicand+1,c
  6320  00581A  50F3               	movf	prodl,w,c
  6321  00581C  2606               	addwf	___wmul@product+1,f,c
  6322  00581E  5002               	movf	___wmul@multiplier+1,w,c
  6323  005820  0203               	mulwf	___wmul@multiplicand,c
  6324  005822  50F3               	movf	prodl,w,c
  6325  005824  2606               	addwf	___wmul@product+1,f,c
  6326  005826  C005  F001         	movff	___wmul@product,?___wmul
  6327  00582A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6328  00582E  0012               	return	
  6329  005830                     __end_of___wmul:
  6330                           	opt stack 0
  6331                           tblptru	equ	0xFF8
  6332                           tblptrh	equ	0xFF7
  6333                           tblptrl	equ	0xFF6
  6334                           tablat	equ	0xFF5
  6335                           prodh	equ	0xFF4
  6336                           prodl	equ	0xFF3
  6337                           intcon	equ	0xFF2
  6338                           postinc0	equ	0xFEE
  6339                           wreg	equ	0xFE8
  6340                           indf1	equ	0xFE7
  6341                           postinc1	equ	0xFE6
  6342                           postdec1	equ	0xFE5
  6343                           fsr1h	equ	0xFE2
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function _LCDSend *****************
  6353 ;; Defined at:
  6354 ;;		line 262 in file "lcd3310_SPI.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  data            1    wreg     unsigned char 
  6357 ;;  cd              1    6[COMRAM] unsigned char 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  data            1    7[COMRAM] unsigned char 
  6360 ;; Return value:  Size  Location     Type
  6361 ;;		None               void
  6362 ;; Registers used:
  6363 ;;		wreg, status,2, status,0, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6369 ;;      Params:         1       0       0       0       0       0       0
  6370 ;;      Locals:         1       0       0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0
  6372 ;;      Totals:         2       0       0       0       0       0       0
  6373 ;;Total ram usage:        2 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    1
  6376 ;; This function calls:
  6377 ;;		_Delay10TCYx
  6378 ;;		_WriteSPI1
  6379 ;; This function is called by:
  6380 ;;		_LCDInit
  6381 ;;		_LCDUpdate
  6382 ;;		_LCDContrast
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text15
  6387  0057E4                     __ptext15:
  6388                           	opt stack 0
  6389  0057E4                     _LCDSend:
  6390                           	opt stack 25
  6391                           
  6392                           ;incstack = 0
  6393                           ;LCDSend@data stored from wreg
  6394  0057E4  6E08               	movwf	LCDSend@data,c
  6395                           
  6396                           ;lcd3310_SPI.c: 264: LATCbits.LATC1 = 0;
  6397  0057E6  928B               	bcf	3979,1,c	;volatile
  6398                           
  6399                           ;lcd3310_SPI.c: 266: if(cd == 1) {
  6400  0057E8  0407               	decf	LCDSend@cd,w,c
  6401  0057EA  A4D8               	btfss	status,2,c
  6402  0057EC  D002               	goto	l270
  6403                           
  6404                           ;lcd3310_SPI.c: 267: LATCbits.LATC2 = 1;
  6405  0057EE  848B               	bsf	3979,2,c	;volatile
  6406                           
  6407                           ;lcd3310_SPI.c: 268: }
  6408  0057F0  D001               	goto	l1957
  6409  0057F2                     l270:
  6410                           
  6411                           ;lcd3310_SPI.c: 269: else {
  6412                           ;lcd3310_SPI.c: 270: LATCbits.LATC2 = 0;
  6413  0057F2  948B               	bcf	3979,2,c	;volatile
  6414  0057F4                     l1957:
  6415  0057F4  5008               	movf	LCDSend@data,w,c
  6416  0057F6  ECE3  F02B         	call	_WriteSPI1
  6417  0057FA  0900               	iorlw	0
  6418  0057FC  A4D8               	btfss	status,2,c
  6419  0057FE  D7FA               	goto	l1957
  6420                           
  6421                           ;lcd3310_SPI.c: 276: Delay10TCYx(20);
  6422  005800  0E14               	movlw	20
  6423  005802  ECC5  F02B         	call	_Delay10TCYx
  6424                           
  6425                           ;lcd3310_SPI.c: 278: LATCbits.LATC1 = 1;
  6426  005806  828B               	bsf	3979,1,c	;volatile
  6427  005808  0012               	return	
  6428  00580A                     __end_of_LCDSend:
  6429                           	opt stack 0
  6430                           tblptru	equ	0xFF8
  6431                           tblptrh	equ	0xFF7
  6432                           tblptrl	equ	0xFF6
  6433                           tablat	equ	0xFF5
  6434                           prodh	equ	0xFF4
  6435                           prodl	equ	0xFF3
  6436                           intcon	equ	0xFF2
  6437                           postinc0	equ	0xFEE
  6438                           wreg	equ	0xFE8
  6439                           indf1	equ	0xFE7
  6440                           postinc1	equ	0xFE6
  6441                           postdec1	equ	0xFE5
  6442                           fsr1h	equ	0xFE2
  6443                           fsr1l	equ	0xFE1
  6444                           indf2	equ	0xFDF
  6445                           postinc2	equ	0xFDE
  6446                           postdec2	equ	0xFDD
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _WriteSPI1 *****************
  6452 ;; Defined at:
  6453 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi1writ.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  data_out        1    wreg     unsigned char 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  data_out        1    1[COMRAM] unsigned char 
  6458 ;;  TempVar         1    0[COMRAM] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      char 
  6461 ;; Registers used:
  6462 ;;		wreg
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6468 ;;      Params:         0       0       0       0       0       0       0
  6469 ;;      Locals:         2       0       0       0       0       0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0
  6471 ;;      Totals:         2       0       0       0       0       0       0
  6472 ;;Total ram usage:        2 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; This function calls:
  6475 ;;		Nothing
  6476 ;; This function is called by:
  6477 ;;		_LCDSend
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text16
  6482  0057C6                     __ptext16:
  6483                           	opt stack 0
  6484  0057C6                     _WriteSPI1:
  6485                           	opt stack 25
  6486                           
  6487                           ;incstack = 0
  6488                           ;WriteSPI1@data_out stored from wreg
  6489  0057C6  6E02               	movwf	WriteSPI1@data_out,c
  6490  0057C8  CFC9 F001          	movff	4041,WriteSPI1@TempVar	;volatile
  6491  0057CC  969E               	bcf	3998,3,c	;volatile
  6492  0057CE  9EC6               	bcf	4038,7,c	;volatile
  6493  0057D0  C002  FFC9         	movff	WriteSPI1@data_out,4041	;volatile
  6494  0057D4  AEC6               	btfss	4038,7,c	;volatile
  6495  0057D6  D002               	goto	l405
  6496  0057D8  0EFF               	movlw	255
  6497  0057DA  0012               	return	
  6498  0057DC                     l405:
  6499  0057DC  A69E               	btfss	3998,3,c	;volatile
  6500  0057DE  D7FE               	goto	l405
  6501  0057E0  0E00               	movlw	0
  6502  0057E2  0012               	return	
  6503  0057E4                     __end_of_WriteSPI1:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           prodh	equ	0xFF4
  6510                           prodl	equ	0xFF3
  6511                           intcon	equ	0xFF2
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           postinc1	equ	0xFE6
  6516                           postdec1	equ	0xFE5
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _Delay10TCYx *****************
  6527 ;; Defined at:
  6528 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d10tcyx.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  unit            1    wreg     unsigned char 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  unit            1    0[COMRAM] unsigned char 
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		wreg
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6542 ;;      Params:         0       0       0       0       0       0       0
  6543 ;;      Locals:         1       0       0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0
  6545 ;;      Totals:         1       0       0       0       0       0       0
  6546 ;;Total ram usage:        1 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; This function calls:
  6549 ;;		Nothing
  6550 ;; This function is called by:
  6551 ;;		_LCDSend
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text17
  6556  00578A                     __ptext17:
  6557                           	opt stack 0
  6558  00578A                     _Delay10TCYx:
  6559                           	opt stack 25
  6560                           
  6561                           ;incstack = 0
  6562                           ;Delay10TCYx@unit stored from wreg
  6563  00578A  6E01               	movwf	Delay10TCYx@unit,c
  6564  00578C                     l684:
  6565  00578C  0E03               	movlw	3
  6566  00578E                     u2597:
  6567  00578E  2EE8               	decfsz	wreg,f,c
  6568  005790  D7FE               	goto	u2597
  6569  005792  F000               	nop	
  6570  005794  2E01               	decfsz	Delay10TCYx@unit,f,c
  6571  005796  D7FA               	goto	l684
  6572  005798  0012               	return	
  6573  00579A                     __end_of_Delay10TCYx:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           postinc0	equ	0xFEE
  6583                           wreg	equ	0xFE8
  6584                           indf1	equ	0xFE7
  6585                           postinc1	equ	0xFE6
  6586                           postdec1	equ	0xFE5
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _LCDClear *****************
  6597 ;; Defined at:
  6598 ;;		line 289 in file "lcd3310_SPI.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  i               2    0[COMRAM] int 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6612 ;;      Params:         0       0       0       0       0       0       0
  6613 ;;      Locals:         2       0       0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0
  6615 ;;      Totals:         2       0       0       0       0       0       0
  6616 ;;Total ram usage:        2 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_LCDInit
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text18
  6626  005830                     __ptext18:
  6627                           	opt stack 0
  6628  005830                     _LCDClear:
  6629                           	opt stack 27
  6630                           
  6631                           ;lcd3310_SPI.c: 291: int i;
  6632                           ;lcd3310_SPI.c: 294: for (i=0; i<((103 * 48) / 8); i++) {
  6633                           
  6634                           ;incstack = 0
  6635  005830  0E00               	movlw	0
  6636  005832  6E02               	movwf	LCDClear@i+1,c
  6637  005834  0E00               	movlw	0
  6638  005836  6E01               	movwf	LCDClear@i,c
  6639  005838  5002               	movf	LCDClear@i+1,w,c
  6640  00583A  0A80               	xorlw	128
  6641  00583C  0F7E               	addlw	-130
  6642  00583E  0E6A               	movlw	106
  6643  005840  B4D8               	btfsc	status,2,c
  6644  005842  5C01               	subwf	LCDClear@i,w,c
  6645  005844  B0D8               	btfsc	status,0,c
  6646  005846  0012               	return	
  6647                           
  6648                           ;lcd3310_SPI.c: 295: LcdMemory[i] = 0x00;
  6649  005848  0E00               	movlw	low _LcdMemory
  6650  00584A  2401               	addwf	LCDClear@i,w,c
  6651  00584C  6ED9               	movwf	fsr2l,c
  6652  00584E  0E02               	movlw	high _LcdMemory
  6653  005850  2002               	addwfc	LCDClear@i+1,w,c
  6654  005852  6EDA               	movwf	fsr2h,c
  6655  005854  0E00               	movlw	0
  6656  005856  6EDF               	movwf	indf2,c
  6657  005858  4A01               	infsnz	LCDClear@i,f,c
  6658  00585A  2A02               	incf	LCDClear@i+1,f,c
  6659  00585C  D7ED               	goto	L16
  6660  00585E                     __end_of_LCDClear:
  6661                           	opt stack 0
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           indf1	equ	0xFE7
  6672                           postinc1	equ	0xFE6
  6673                           postdec1	equ	0xFE5
  6674                           fsr1h	equ	0xFE2
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           postinc2	equ	0xFDE
  6678                           postdec2	equ	0xFDD
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _Initialize_SPI *****************
  6684 ;; Defined at:
  6685 ;;		line 34 in file "lcd3310_SPI.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;		None               void
  6692 ;; Registers used:
  6693 ;;		None
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6699 ;;      Params:         0       0       0       0       0       0       0
  6700 ;;      Locals:         0       0       0       0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0
  6702 ;;      Totals:         0       0       0       0       0       0       0
  6703 ;;Total ram usage:        0 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_LCDInit
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text19
  6713  00576A                     __ptext19:
  6714                           	opt stack 0
  6715  00576A                     _Initialize_SPI:
  6716                           	opt stack 27
  6717                           
  6718                           ;incstack = 0
  6719  00576A  0012               	return	
  6720  00576C                     __end_of_Initialize_SPI:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postinc1	equ	0xFE6
  6733                           postdec1	equ	0xFE5
  6734                           fsr1h	equ	0xFE2
  6735                           fsr1l	equ	0xFE1
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _Delay *****************
  6744 ;; Defined at:
  6745 ;;		line 166 in file "lcd3310_SPI.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  a               4    0[COMRAM] volatile unsigned long 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg, status,2, status,0
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6759 ;;      Params:         4       0       0       0       0       0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0
  6762 ;;      Totals:         4       0       0       0       0       0       0
  6763 ;;Total ram usage:        4 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; This function calls:
  6766 ;;		Nothing
  6767 ;; This function is called by:
  6768 ;;		_LCDInit
  6769 ;;		_Delayc
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text20
  6774  0057AC                     __ptext20:
  6775                           	opt stack 0
  6776  0057AC                     _Delay:
  6777                           	opt stack 27
  6778                           
  6779                           ;incstack = 0
  6780  0057AC  D005               	goto	l248
  6781  0057AE                     l1995:
  6782  0057AE  0601               	decf	Delay@a,f,c	;volatile
  6783  0057B0  0E00               	movlw	0
  6784  0057B2  5A02               	subwfb	Delay@a+1,f,c	;volatile
  6785  0057B4  5A03               	subwfb	Delay@a+2,f,c	;volatile
  6786  0057B6  5A04               	subwfb	Delay@a+3,f,c	;volatile
  6787  0057B8                     l248:
  6788  0057B8  5004               	movf	Delay@a+3,w,c	;volatile
  6789  0057BA  1001               	iorwf	Delay@a,w,c	;volatile
  6790  0057BC  1002               	iorwf	Delay@a+1,w,c	;volatile
  6791  0057BE  1003               	iorwf	Delay@a+2,w,c	;volatile
  6792  0057C0  B4D8               	btfsc	status,2,c
  6793  0057C2  0012               	return	
  6794  0057C4  D7F4               	goto	l1995
  6795  0057C6                     __end_of_Delay:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           postinc0	equ	0xFEE
  6805                           wreg	equ	0xFE8
  6806                           indf1	equ	0xFE7
  6807                           postinc1	equ	0xFE6
  6808                           postdec1	equ	0xFE5
  6809                           fsr1h	equ	0xFE2
  6810                           fsr1l	equ	0xFE1
  6811                           indf2	equ	0xFDF
  6812                           postinc2	equ	0xFDE
  6813                           postdec2	equ	0xFDD
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _sendIntArray *****************
  6819 ;; Defined at:
  6820 ;;		line 353 in file "main pic18.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  array           2    2[COMRAM] PTR short 
  6823 ;;		 -> guesses(10), real_numbers(128), 
  6824 ;;  size            2    4[COMRAM] unsigned int 
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;		None               void
  6829 ;; Registers used:
  6830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6836 ;;      Params:         4       0       0       0       0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0
  6839 ;;      Totals:         4       0       0       0       0       0       0
  6840 ;;Total ram usage:        4 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    2
  6843 ;; This function calls:
  6844 ;;		_sendChar
  6845 ;; This function is called by:
  6846 ;;		_main
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text21
  6851  00585E                     __ptext21:
  6852                           	opt stack 0
  6853  00585E                     _sendIntArray:
  6854                           	opt stack 27
  6855                           
  6856                           ;main pic18.c: 354: for(i = 0; i < size; i++) {
  6857                           
  6858                           ;incstack = 0
  6859  00585E  0E00               	movlw	0
  6860  005860  6E5D               	movwf	_i+1,c
  6861  005862  0E00               	movlw	0
  6862  005864  6E5C               	movwf	_i,c
  6863  005866  D00E               	goto	l2491
  6864  005868                     l2487:
  6865                           
  6866                           ;main pic18.c: 355: sendChar(array[i]);
  6867  005868  90D8               	bcf	status,0,c
  6868  00586A  345C               	rlcf	_i,w,c
  6869  00586C  6ED9               	movwf	fsr2l,c
  6870  00586E  345D               	rlcf	_i+1,w,c
  6871  005870  6EDA               	movwf	fsr2h,c
  6872  005872  5003               	movf	sendIntArray@array,w,c
  6873  005874  26D9               	addwf	fsr2l,f,c
  6874  005876  5004               	movf	sendIntArray@array+1,w,c
  6875  005878  22DA               	addwfc	fsr2h,f,c
  6876  00587A  50DF               	movf	indf2,w,c
  6877  00587C  ECBE  F02B         	call	_sendChar
  6878  005880  4A5C               	infsnz	_i,f,c
  6879  005882  2A5D               	incf	_i+1,f,c
  6880  005884                     l2491:
  6881  005884  5005               	movf	sendIntArray@size,w,c
  6882  005886  5C5C               	subwf	_i,w,c
  6883  005888  5006               	movf	sendIntArray@size+1,w,c
  6884  00588A  585D               	subwfb	_i+1,w,c
  6885  00588C  B0D8               	btfsc	status,0,c
  6886  00588E  0012               	return	
  6887  005890  D7EB               	goto	l2487
  6888  005892                     __end_of_sendIntArray:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           postinc0	equ	0xFEE
  6898                           wreg	equ	0xFE8
  6899                           indf1	equ	0xFE7
  6900                           postinc1	equ	0xFE6
  6901                           postdec1	equ	0xFE5
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _sendChar *****************
  6912 ;; Defined at:
  6913 ;;		line 348 in file "main pic18.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  character       1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  character       1    1[COMRAM] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;		None               void
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6927 ;;      Params:         0       0       0       0       0       0       0
  6928 ;;      Locals:         1       0       0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0
  6930 ;;      Totals:         1       0       0       0       0       0       0
  6931 ;;Total ram usage:        1 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		_Write1USART
  6936 ;; This function is called by:
  6937 ;;		_sendIntArray
  6938 ;;		_sendCharArray
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text22
  6943  00577C                     __ptext22:
  6944                           	opt stack 0
  6945  00577C                     _sendChar:
  6946                           	opt stack 27
  6947                           
  6948                           ;incstack = 0
  6949                           ;sendChar@character stored from wreg
  6950  00577C  6E02               	movwf	sendChar@character,c
  6951  00577E                     l192:
  6952  00577E  A2AC               	btfss	4012,1,c	;volatile
  6953  005780  D7FE               	goto	l192
  6954                           
  6955                           ;main pic18.c: 350: Write1USART(character);
  6956  005782  5002               	movf	sendChar@character,w,c
  6957  005784  ECCD  F02B         	call	_Write1USART
  6958  005788  0012               	return	
  6959  00578A                     __end_of_sendChar:
  6960                           	opt stack 0
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           intcon	equ	0xFF2
  6968                           postinc0	equ	0xFEE
  6969                           wreg	equ	0xFE8
  6970                           indf1	equ	0xFE7
  6971                           postinc1	equ	0xFE6
  6972                           postdec1	equ	0xFE5
  6973                           fsr1h	equ	0xFE2
  6974                           fsr1l	equ	0xFE1
  6975                           indf2	equ	0xFDF
  6976                           postinc2	equ	0xFDE
  6977                           postdec2	equ	0xFDD
  6978                           fsr2h	equ	0xFDA
  6979                           fsr2l	equ	0xFD9
  6980                           status	equ	0xFD8
  6981                           
  6982 ;; *************** function _Write1USART *****************
  6983 ;; Defined at:
  6984 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\USART\u1write.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;  data            1    wreg     unsigned char 
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;  data            1    0[COMRAM] unsigned char 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;		None               void
  6991 ;; Registers used:
  6992 ;;		wreg
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6998 ;;      Params:         0       0       0       0       0       0       0
  6999 ;;      Locals:         1       0       0       0       0       0       0
  7000 ;;      Temps:          0       0       0       0       0       0       0
  7001 ;;      Totals:         1       0       0       0       0       0       0
  7002 ;;Total ram usage:        1 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; This function calls:
  7005 ;;		Nothing
  7006 ;; This function is called by:
  7007 ;;		_sendChar
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text23
  7012  00579A                     __ptext23:
  7013                           	opt stack 0
  7014  00579A                     _Write1USART:
  7015                           	opt stack 27
  7016                           
  7017                           ;incstack = 0
  7018                           ;Write1USART@data stored from wreg
  7019  00579A  6E01               	movwf	Write1USART@data,c
  7020  00579C  ACAC               	btfss	4012,6,c	;volatile
  7021  00579E  D003               	goto	l1991
  7022  0057A0  90AC               	bcf	4012,0,c	;volatile
  7023  0057A2  B25E               	btfsc	_USART1_Status,1,c
  7024  0057A4  80AC               	bsf	4012,0,c	;volatile
  7025  0057A6                     l1991:
  7026  0057A6  C001  FFAD         	movff	Write1USART@data,4013	;volatile
  7027  0057AA  0012               	return	
  7028  0057AC                     __end_of_Write1USART:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           intcon	equ	0xFF2
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           indf1	equ	0xFE7
  7040                           postinc1	equ	0xFE6
  7041                           postdec1	equ	0xFE5
  7042                           fsr1h	equ	0xFE2
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _fix_fft *****************
  7052 ;; Defined at:
  7053 ;;		line 155 in file "fft.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  fr              2   12[COMRAM] PTR short 
  7056 ;;		 -> real_numbers(128), 
  7057 ;;  fi              2   14[COMRAM] PTR short 
  7058 ;;		 -> imaginary_numbers(128), 
  7059 ;;  m               2   16[COMRAM] short 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  c               4   72[COMRAM] long 
  7062 ;;  b               2   54[COMRAM] short 
  7063 ;;  j               4   68[COMRAM] long 
  7064 ;;  l               4   64[COMRAM] long 
  7065 ;;  mr              4   60[COMRAM] long 
  7066 ;;  i               4   56[COMRAM] long 
  7067 ;;  n               4   46[COMRAM] long 
  7068 ;;  istep           4   34[COMRAM] long 
  7069 ;;  nn              4   30[COMRAM] long 
  7070 ;;  k               4   26[COMRAM] long 
  7071 ;;  ti              2   52[COMRAM] short 
  7072 ;;  tr              2   50[COMRAM] short 
  7073 ;;  wi              2   44[COMRAM] short 
  7074 ;;  wr              2   42[COMRAM] short 
  7075 ;;  qi              2   40[COMRAM] short 
  7076 ;;  qr              2   38[COMRAM] short 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;		None               void
  7079 ;; Registers used:
  7080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7086 ;;      Params:         6       0       0       0       0       0       0
  7087 ;;      Locals:        50       0       0       0       0       0       0
  7088 ;;      Temps:          8       0       0       0       0       0       0
  7089 ;;      Totals:        64       0       0       0       0       0       0
  7090 ;;Total ram usage:       64 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    1
  7093 ;; This function calls:
  7094 ;;		___lmul
  7095 ;; This function is called by:
  7096 ;;		_main
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text24
  7101  00609C                     __ptext24:
  7102                           	opt stack 0
  7103  00609C                     _fix_fft:
  7104                           	opt stack 28
  7105                           
  7106                           ;fft.c: 157: long int mr = 0, nn, i, j, l, k, istep, n;
  7107                           
  7108                           ;incstack = 0
  7109  00609C  0E00               	movlw	0
  7110  00609E  6E3D               	movwf	fix_fft@mr,c
  7111  0060A0  0E00               	movlw	0
  7112  0060A2  6E3E               	movwf	fix_fft@mr+1,c
  7113  0060A4  0E00               	movlw	0
  7114  0060A6  6E3F               	movwf	fix_fft@mr+2,c
  7115  0060A8  0E00               	movlw	0
  7116  0060AA  6E40               	movwf	fix_fft@mr+3,c
  7117                           
  7118                           ;fft.c: 158: short qr, qi, tr, ti, wr, wi;
  7119                           ;fft.c: 160: n = 1 << m;
  7120  0060AC  C011  F013         	movff	fix_fft@m,??_fix_fft
  7121  0060B0  0E01               	movlw	1
  7122  0060B2  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7123  0060B4  6A15               	clrf	(??_fix_fft+2)& (0+255),c
  7124  0060B6  2A13               	incf	??_fix_fft,f,c
  7125  0060B8  D003               	goto	u1844
  7126  0060BA                     u1845:
  7127  0060BA  90D8               	bcf	status,0,c
  7128  0060BC  3614               	rlcf	??_fix_fft+1,f,c
  7129  0060BE  3615               	rlcf	??_fix_fft+2,f,c
  7130  0060C0                     u1844:
  7131  0060C0  2E13               	decfsz	??_fix_fft,f,c
  7132  0060C2  D7FB               	goto	u1845
  7133  0060C4  C014  F02F         	movff	??_fix_fft+1,fix_fft@n
  7134  0060C8  C015  F030         	movff	??_fix_fft+2,fix_fft@n+1
  7135  0060CC  0E00               	movlw	0
  7136  0060CE  BE30               	btfsc	fix_fft@n+1,7,c
  7137  0060D0  0EFF               	movlw	-1
  7138  0060D2  6E31               	movwf	fix_fft@n+2,c
  7139  0060D4  6E32               	movwf	fix_fft@n+3,c
  7140                           
  7141                           ;fft.c: 161: nn = n - 1;
  7142  0060D6  0EFF               	movlw	255
  7143  0060D8  242F               	addwf	fix_fft@n,w,c
  7144  0060DA  6E1F               	movwf	fix_fft@nn,c
  7145  0060DC  0EFF               	movlw	255
  7146  0060DE  2030               	addwfc	fix_fft@n+1,w,c
  7147  0060E0  6E20               	movwf	fix_fft@nn+1,c
  7148  0060E2  0EFF               	movlw	255
  7149  0060E4  2031               	addwfc	fix_fft@n+2,w,c
  7150  0060E6  6E21               	movwf	fix_fft@nn+2,c
  7151  0060E8  0EFF               	movlw	255
  7152  0060EA  2032               	addwfc	fix_fft@n+3,w,c
  7153  0060EC  6E22               	movwf	fix_fft@nn+3,c
  7154                           
  7155                           ;fft.c: 167: for (m=1; m<=nn; ++m)
  7156  0060EE  0E00               	movlw	0
  7157  0060F0  6E12               	movwf	fix_fft@m+1,c
  7158  0060F2  0E01               	movlw	1
  7159  0060F4  6E11               	movwf	fix_fft@m,c
  7160  0060F6  D0C4               	goto	l2413
  7161  0060F8                     l207:
  7162                           
  7163                           ;fft.c: 168: {
  7164                           ;fft.c: 169: l = n;
  7165  0060F8  C02F  F041         	movff	fix_fft@n,fix_fft@l
  7166  0060FC  C030  F042         	movff	fix_fft@n+1,fix_fft@l+1
  7167  006100  C031  F043         	movff	fix_fft@n+2,fix_fft@l+2
  7168  006104  C032  F044         	movff	fix_fft@n+3,fix_fft@l+3
  7169  006108                     l2395:
  7170                           
  7171                           ;fft.c: 171: {
  7172                           ;fft.c: 172: l >>= 1;
  7173  006108  3444               	rlcf	fix_fft@l+3,w,c
  7174  00610A  3244               	rrcf	fix_fft@l+3,f,c
  7175  00610C  3243               	rrcf	fix_fft@l+2,f,c
  7176  00610E  3242               	rrcf	fix_fft@l+1,f,c
  7177  006110  3241               	rrcf	fix_fft@l,f,c
  7178                           
  7179                           ;fft.c: 173: } while (mr+l > nn);
  7180  006112  5041               	movf	fix_fft@l,w,c
  7181  006114  243D               	addwf	fix_fft@mr,w,c
  7182  006116  6E13               	movwf	??_fix_fft& (0+255),c
  7183  006118  5042               	movf	fix_fft@l+1,w,c
  7184  00611A  203E               	addwfc	fix_fft@mr+1,w,c
  7185  00611C  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7186  00611E  5043               	movf	fix_fft@l+2,w,c
  7187  006120  203F               	addwfc	fix_fft@mr+2,w,c
  7188  006122  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7189  006124  5044               	movf	fix_fft@l+3,w,c
  7190  006126  2040               	addwfc	fix_fft@mr+3,w,c
  7191  006128  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7192  00612A  5022               	movf	fix_fft@nn+3,w,c
  7193  00612C  0A80               	xorlw	128
  7194  00612E  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7195  006130  5013               	movf	??_fix_fft,w,c
  7196  006132  5C1F               	subwf	fix_fft@nn,w,c
  7197  006134  5014               	movf	??_fix_fft+1,w,c
  7198  006136  5820               	subwfb	fix_fft@nn+1,w,c
  7199  006138  5015               	movf	??_fix_fft+2,w,c
  7200  00613A  5821               	subwfb	fix_fft@nn+2,w,c
  7201  00613C  5016               	movf	??_fix_fft+3,w,c
  7202  00613E  0A80               	xorlw	128
  7203  006140  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7204  006142  A0D8               	btfss	status,0,c
  7205  006144  D7E1               	goto	l2395
  7206                           
  7207                           ;fft.c: 175: mr = (mr & (l-1)) + l;
  7208  006146  0EFF               	movlw	255
  7209  006148  2441               	addwf	fix_fft@l,w,c
  7210  00614A  6E13               	movwf	??_fix_fft& (0+255),c
  7211  00614C  0EFF               	movlw	255
  7212  00614E  2042               	addwfc	fix_fft@l+1,w,c
  7213  006150  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7214  006152  0EFF               	movlw	255
  7215  006154  2043               	addwfc	fix_fft@l+2,w,c
  7216  006156  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7217  006158  0EFF               	movlw	255
  7218  00615A  2044               	addwfc	fix_fft@l+3,w,c
  7219  00615C  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7220  00615E  503D               	movf	fix_fft@mr,w,c
  7221  006160  1413               	andwf	??_fix_fft,w,c
  7222  006162  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7223  006164  503E               	movf	fix_fft@mr+1,w,c
  7224  006166  1414               	andwf	??_fix_fft+1,w,c
  7225  006168  6E18               	movwf	(??_fix_fft+5)& (0+255),c
  7226  00616A  503F               	movf	fix_fft@mr+2,w,c
  7227  00616C  1415               	andwf	??_fix_fft+2,w,c
  7228  00616E  6E19               	movwf	(??_fix_fft+6)& (0+255),c
  7229  006170  5040               	movf	fix_fft@mr+3,w,c
  7230  006172  1416               	andwf	??_fix_fft+3,w,c
  7231  006174  6E1A               	movwf	(??_fix_fft+7)& (0+255),c
  7232  006176  5041               	movf	fix_fft@l,w,c
  7233  006178  2417               	addwf	??_fix_fft+4,w,c
  7234  00617A  6E3D               	movwf	fix_fft@mr,c
  7235  00617C  5042               	movf	fix_fft@l+1,w,c
  7236  00617E  2018               	addwfc	??_fix_fft+5,w,c
  7237  006180  6E3E               	movwf	fix_fft@mr+1,c
  7238  006182  5043               	movf	fix_fft@l+2,w,c
  7239  006184  2019               	addwfc	??_fix_fft+6,w,c
  7240  006186  6E3F               	movwf	fix_fft@mr+2,c
  7241  006188  5044               	movf	fix_fft@l+3,w,c
  7242  00618A  201A               	addwfc	??_fix_fft+7,w,c
  7243  00618C  6E40               	movwf	fix_fft@mr+3,c
  7244                           
  7245                           ;fft.c: 176: if (mr <= m) continue;
  7246  00618E  C011  F013         	movff	fix_fft@m,??_fix_fft
  7247  006192  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  7248  006196  0E00               	movlw	0
  7249  006198  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  7250  00619A  0EFF               	movlw	255
  7251  00619C  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7252  00619E  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7253  0061A0  5016               	movf	??_fix_fft+3,w,c
  7254  0061A2  0A80               	xorlw	128
  7255  0061A4  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7256  0061A6  503D               	movf	fix_fft@mr,w,c
  7257  0061A8  5C13               	subwf	??_fix_fft,w,c
  7258  0061AA  503E               	movf	fix_fft@mr+1,w,c
  7259  0061AC  5814               	subwfb	??_fix_fft+1,w,c
  7260  0061AE  503F               	movf	fix_fft@mr+2,w,c
  7261  0061B0  5815               	subwfb	??_fix_fft+2,w,c
  7262  0061B2  5040               	movf	fix_fft@mr+3,w,c
  7263  0061B4  0A80               	xorlw	128
  7264  0061B6  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7265  0061B8  B0D8               	btfsc	status,0,c
  7266  0061BA  D060               	goto	l2411
  7267                           
  7268                           ;fft.c: 178: tr = fr[m];
  7269  0061BC  90D8               	bcf	status,0,c
  7270  0061BE  3411               	rlcf	fix_fft@m,w,c
  7271  0061C0  6ED9               	movwf	fsr2l,c
  7272  0061C2  3412               	rlcf	fix_fft@m+1,w,c
  7273  0061C4  6EDA               	movwf	fsr2h,c
  7274  0061C6  500D               	movf	fix_fft@fr,w,c
  7275  0061C8  26D9               	addwf	fsr2l,f,c
  7276  0061CA  500E               	movf	fix_fft@fr+1,w,c
  7277  0061CC  22DA               	addwfc	fsr2h,f,c
  7278  0061CE  CFDE F033          	movff	postinc2,fix_fft@tr
  7279  0061D2  CFDD F034          	movff	postdec2,fix_fft@tr+1
  7280                           
  7281                           ;fft.c: 179: fr[m] = fr[mr];
  7282  0061D6  90D8               	bcf	status,0,c
  7283  0061D8  343D               	rlcf	fix_fft@mr,w,c
  7284  0061DA  6ED9               	movwf	fsr2l,c
  7285  0061DC  343E               	rlcf	fix_fft@mr+1,w,c
  7286  0061DE  6EDA               	movwf	fsr2h,c
  7287  0061E0  500D               	movf	fix_fft@fr,w,c
  7288  0061E2  26D9               	addwf	fsr2l,f,c
  7289  0061E4  500E               	movf	fix_fft@fr+1,w,c
  7290  0061E6  22DA               	addwfc	fsr2h,f,c
  7291  0061E8  90D8               	bcf	status,0,c
  7292  0061EA  3411               	rlcf	fix_fft@m,w,c
  7293  0061EC  6EE1               	movwf	fsr1l,c
  7294  0061EE  3412               	rlcf	fix_fft@m+1,w,c
  7295  0061F0  6EE2               	movwf	fsr1h,c
  7296  0061F2  500D               	movf	fix_fft@fr,w,c
  7297  0061F4  26E1               	addwf	fsr1l,f,c
  7298  0061F6  500E               	movf	fix_fft@fr+1,w,c
  7299  0061F8  22E2               	addwfc	fsr1h,f,c
  7300  0061FA  CFDE FFE6          	movff	postinc2,postinc1
  7301  0061FE  CFDD FFE5          	movff	postdec2,postdec1
  7302                           
  7303                           ;fft.c: 180: fr[mr] = tr;
  7304  006202  90D8               	bcf	status,0,c
  7305  006204  343D               	rlcf	fix_fft@mr,w,c
  7306  006206  6ED9               	movwf	fsr2l,c
  7307  006208  343E               	rlcf	fix_fft@mr+1,w,c
  7308  00620A  6EDA               	movwf	fsr2h,c
  7309  00620C  500D               	movf	fix_fft@fr,w,c
  7310  00620E  26D9               	addwf	fsr2l,f,c
  7311  006210  500E               	movf	fix_fft@fr+1,w,c
  7312  006212  22DA               	addwfc	fsr2h,f,c
  7313  006214  C033  FFDE         	movff	fix_fft@tr,postinc2
  7314  006218  C034  FFDD         	movff	fix_fft@tr+1,postdec2
  7315                           
  7316                           ;fft.c: 181: ti = fi[m];
  7317  00621C  90D8               	bcf	status,0,c
  7318  00621E  3411               	rlcf	fix_fft@m,w,c
  7319  006220  6ED9               	movwf	fsr2l,c
  7320  006222  3412               	rlcf	fix_fft@m+1,w,c
  7321  006224  6EDA               	movwf	fsr2h,c
  7322  006226  500F               	movf	fix_fft@fi,w,c
  7323  006228  26D9               	addwf	fsr2l,f,c
  7324  00622A  5010               	movf	fix_fft@fi+1,w,c
  7325  00622C  22DA               	addwfc	fsr2h,f,c
  7326  00622E  CFDE F035          	movff	postinc2,fix_fft@ti
  7327  006232  CFDD F036          	movff	postdec2,fix_fft@ti+1
  7328                           
  7329                           ;fft.c: 182: fi[m] = fi[mr];
  7330  006236  90D8               	bcf	status,0,c
  7331  006238  343D               	rlcf	fix_fft@mr,w,c
  7332  00623A  6ED9               	movwf	fsr2l,c
  7333  00623C  343E               	rlcf	fix_fft@mr+1,w,c
  7334  00623E  6EDA               	movwf	fsr2h,c
  7335  006240  500F               	movf	fix_fft@fi,w,c
  7336  006242  26D9               	addwf	fsr2l,f,c
  7337  006244  5010               	movf	fix_fft@fi+1,w,c
  7338  006246  22DA               	addwfc	fsr2h,f,c
  7339  006248  90D8               	bcf	status,0,c
  7340  00624A  3411               	rlcf	fix_fft@m,w,c
  7341  00624C  6EE1               	movwf	fsr1l,c
  7342  00624E  3412               	rlcf	fix_fft@m+1,w,c
  7343  006250  6EE2               	movwf	fsr1h,c
  7344  006252  500F               	movf	fix_fft@fi,w,c
  7345  006254  26E1               	addwf	fsr1l,f,c
  7346  006256  5010               	movf	fix_fft@fi+1,w,c
  7347  006258  22E2               	addwfc	fsr1h,f,c
  7348  00625A  CFDE FFE6          	movff	postinc2,postinc1
  7349  00625E  CFDD FFE5          	movff	postdec2,postdec1
  7350                           
  7351                           ;fft.c: 183: fi[mr] = ti;
  7352  006262  90D8               	bcf	status,0,c
  7353  006264  343D               	rlcf	fix_fft@mr,w,c
  7354  006266  6ED9               	movwf	fsr2l,c
  7355  006268  343E               	rlcf	fix_fft@mr+1,w,c
  7356  00626A  6EDA               	movwf	fsr2h,c
  7357  00626C  500F               	movf	fix_fft@fi,w,c
  7358  00626E  26D9               	addwf	fsr2l,f,c
  7359  006270  5010               	movf	fix_fft@fi+1,w,c
  7360  006272  22DA               	addwfc	fsr2h,f,c
  7361  006274  C035  FFDE         	movff	fix_fft@ti,postinc2
  7362  006278  C036  FFDD         	movff	fix_fft@ti+1,postdec2
  7363  00627C                     l2411:
  7364  00627C  4A11               	infsnz	fix_fft@m,f,c
  7365  00627E  2A12               	incf	fix_fft@m+1,f,c
  7366  006280                     l2413:
  7367  006280  C011  F013         	movff	fix_fft@m,??_fix_fft
  7368  006284  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  7369  006288  0E00               	movlw	0
  7370  00628A  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  7371  00628C  0EFF               	movlw	255
  7372  00628E  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  7373  006290  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  7374  006292  5022               	movf	fix_fft@nn+3,w,c
  7375  006294  0A80               	xorlw	128
  7376  006296  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  7377  006298  5013               	movf	??_fix_fft,w,c
  7378  00629A  5C1F               	subwf	fix_fft@nn,w,c
  7379  00629C  5014               	movf	??_fix_fft+1,w,c
  7380  00629E  5820               	subwfb	fix_fft@nn+1,w,c
  7381  0062A0  5015               	movf	??_fix_fft+2,w,c
  7382  0062A2  5821               	subwfb	fix_fft@nn+2,w,c
  7383  0062A4  5016               	movf	??_fix_fft+3,w,c
  7384  0062A6  0A80               	xorlw	128
  7385  0062A8  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  7386  0062AA  B0D8               	btfsc	status,0,c
  7387  0062AC  D725               	goto	l207
  7388                           
  7389                           ;fft.c: 184: }
  7390                           ;fft.c: 186: l = 1;
  7391  0062AE  0E01               	movlw	1
  7392  0062B0  6E41               	movwf	fix_fft@l,c
  7393  0062B2  0E00               	movlw	0
  7394  0062B4  6E42               	movwf	fix_fft@l+1,c
  7395  0062B6  0E00               	movlw	0
  7396  0062B8  6E43               	movwf	fix_fft@l+2,c
  7397  0062BA  0E00               	movlw	0
  7398  0062BC  6E44               	movwf	fix_fft@l+3,c
  7399                           
  7400                           ;fft.c: 187: k = 10-1;
  7401  0062BE  0E09               	movlw	9
  7402  0062C0  6E1B               	movwf	fix_fft@k,c
  7403  0062C2  0E00               	movlw	0
  7404  0062C4  6E1C               	movwf	fix_fft@k+1,c
  7405  0062C6  0E00               	movlw	0
  7406  0062C8  6E1D               	movwf	fix_fft@k+2,c
  7407  0062CA  0E00               	movlw	0
  7408  0062CC  6E1E               	movwf	fix_fft@k+3,c
  7409                           
  7410                           ;fft.c: 189: while (l < n)
  7411  0062CE  D29D               	goto	l213
  7412  0062D0                     l2417:
  7413                           
  7414                           ;fft.c: 190: {
  7415                           ;fft.c: 203: long int c;
  7416                           ;fft.c: 204: short b;
  7417                           ;fft.c: 206: istep = l << 1;
  7418  0062D0  90D8               	bcf	status,0,c
  7419  0062D2  3441               	rlcf	fix_fft@l,w,c
  7420  0062D4  6E23               	movwf	fix_fft@istep,c
  7421  0062D6  3442               	rlcf	fix_fft@l+1,w,c
  7422  0062D8  6E24               	movwf	fix_fft@istep+1,c
  7423  0062DA  3443               	rlcf	fix_fft@l+2,w,c
  7424  0062DC  6E25               	movwf	fix_fft@istep+2,c
  7425  0062DE  3444               	rlcf	fix_fft@l+3,w,c
  7426  0062E0  6E26               	movwf	fix_fft@istep+3,c
  7427                           
  7428                           ;fft.c: 207: for (m=0; m<l; ++m)
  7429  0062E2  0E00               	movlw	0
  7430  0062E4  6E12               	movwf	fix_fft@m+1,c
  7431  0062E6  0E00               	movlw	0
  7432  0062E8  6E11               	movwf	fix_fft@m,c
  7433  0062EA  D268               	goto	l2477
  7434  0062EC                     l2421:
  7435                           
  7436                           ;fft.c: 208: {
  7437                           ;fft.c: 209: j = m << k;
  7438  0062EC  C01B  F013         	movff	fix_fft@k,??_fix_fft
  7439  0062F0  C011  F014         	movff	fix_fft@m,??_fix_fft+1
  7440  0062F4  C012  F015         	movff	fix_fft@m+1,??_fix_fft+2
  7441  0062F8  2A13               	incf	??_fix_fft,f,c
  7442  0062FA  D003               	goto	u1884
  7443  0062FC                     u1885:
  7444  0062FC  90D8               	bcf	status,0,c
  7445  0062FE  3614               	rlcf	??_fix_fft+1,f,c
  7446  006300  3615               	rlcf	??_fix_fft+2,f,c
  7447  006302                     u1884:
  7448  006302  2E13               	decfsz	??_fix_fft,f,c
  7449  006304  D7FB               	goto	u1885
  7450  006306  C014  F045         	movff	??_fix_fft+1,fix_fft@j
  7451  00630A  C015  F046         	movff	??_fix_fft+2,fix_fft@j+1
  7452  00630E  0E00               	movlw	0
  7453  006310  BE46               	btfsc	fix_fft@j+1,7,c
  7454  006312  0EFF               	movlw	-1
  7455  006314  6E47               	movwf	fix_fft@j+2,c
  7456  006316  6E48               	movwf	fix_fft@j+3,c
  7457                           
  7458                           ;fft.c: 211: wr = Sinewave[j+1024/4];
  7459  006318  0E00               	movlw	0
  7460  00631A  6E13               	movwf	??_fix_fft& (0+255),c
  7461  00631C  0E02               	movlw	2
  7462  00631E  6E14               	movwf	(??_fix_fft+1)& (0+255),c
  7463  006320  C045  F015         	movff	fix_fft@j,??_fix_fft+2
  7464  006324  C046  F016         	movff	fix_fft@j+1,??_fix_fft+3
  7465  006328  90D8               	bcf	status,0,c
  7466  00632A  3615               	rlcf	??_fix_fft+2,f,c
  7467  00632C  3616               	rlcf	??_fix_fft+3,f,c
  7468  00632E  5013               	movf	??_fix_fft,w,c
  7469  006330  2615               	addwf	??_fix_fft+2,f,c
  7470  006332  5014               	movf	??_fix_fft+1,w,c
  7471  006334  2216               	addwfc	??_fix_fft+3,f,c
  7472  006336  0EBF               	movlw	low _Sinewave
  7473  006338  2415               	addwf	??_fix_fft+2,w,c
  7474  00633A  6EF6               	movwf	tblptrl,c
  7475  00633C  0E76               	movlw	high _Sinewave
  7476  00633E  2016               	addwfc	??_fix_fft+3,w,c
  7477  006340  6EF7               	movwf	tblptrh,c
  7478  006342                     	if	0	;There are less than 3 active tblptr bytes
  7479  006342                     	endif
  7480  006342  0009               	tblrd		*+
  7481  006344  CFF5 F02B          	movff	tablat,fix_fft@wr
  7482  006348  000A               	tblrd		*-
  7483  00634A  CFF5 F02C          	movff	tablat,fix_fft@wr+1
  7484                           
  7485                           ;fft.c: 212: wi = -Sinewave[j];
  7486  00634E  C045  F013         	movff	fix_fft@j,??_fix_fft
  7487  006352  C046  F014         	movff	fix_fft@j+1,??_fix_fft+1
  7488  006356  90D8               	bcf	status,0,c
  7489  006358  3613               	rlcf	??_fix_fft,f,c
  7490  00635A  3614               	rlcf	??_fix_fft+1,f,c
  7491  00635C  0EBF               	movlw	low _Sinewave
  7492  00635E  2413               	addwf	??_fix_fft,w,c
  7493  006360  6EF6               	movwf	tblptrl,c
  7494  006362  0E76               	movlw	high _Sinewave
  7495  006364  2014               	addwfc	??_fix_fft+1,w,c
  7496  006366  6EF7               	movwf	tblptrh,c
  7497  006368                     	if	0	;There are less than 3 active tblptr bytes
  7498  006368                     	endif
  7499  006368  0009               	tblrd		*+
  7500  00636A  CFF5 F015          	movff	tablat,??_fix_fft+2
  7501  00636E  0009               	tblrd		*+
  7502  006370  CFF5 F016          	movff	tablat,??_fix_fft+3
  7503  006374  1E15               	comf	??_fix_fft+2,f,c
  7504  006376  1E16               	comf	??_fix_fft+3,f,c
  7505  006378  4A15               	infsnz	??_fix_fft+2,f,c
  7506  00637A  2A16               	incf	??_fix_fft+3,f,c
  7507  00637C  C015  F02D         	movff	??_fix_fft+2,fix_fft@wi
  7508  006380  C016  F02E         	movff	??_fix_fft+3,fix_fft@wi+1
  7509                           
  7510                           ;fft.c: 214: wr >>= 1;
  7511  006384  342C               	rlcf	fix_fft@wr+1,w,c
  7512  006386  322C               	rrcf	fix_fft@wr+1,f,c
  7513  006388  322B               	rrcf	fix_fft@wr,f,c
  7514                           
  7515                           ;fft.c: 215: wi >>= 1;
  7516  00638A  342E               	rlcf	fix_fft@wi+1,w,c
  7517  00638C  322E               	rrcf	fix_fft@wi+1,f,c
  7518  00638E  322D               	rrcf	fix_fft@wi,f,c
  7519                           
  7520                           ;fft.c: 217: for (i=m; i<n; i+=istep)
  7521  006390  C011  F039         	movff	fix_fft@m,fix_fft@i
  7522  006394  C012  F03A         	movff	fix_fft@m+1,fix_fft@i+1
  7523  006398  0E00               	movlw	0
  7524  00639A  BE3A               	btfsc	fix_fft@i+1,7,c
  7525  00639C  0EFF               	movlw	-1
  7526  00639E  6E3B               	movwf	fix_fft@i+2,c
  7527  0063A0  6E3C               	movwf	fix_fft@i+3,c
  7528  0063A2  D1FC               	goto	l2473
  7529  0063A4                     l2429:
  7530                           
  7531                           ;fft.c: 218: {
  7532                           ;fft.c: 219: j = i + l;
  7533  0063A4  5041               	movf	fix_fft@l,w,c
  7534  0063A6  2439               	addwf	fix_fft@i,w,c
  7535  0063A8  6E45               	movwf	fix_fft@j,c
  7536  0063AA  5042               	movf	fix_fft@l+1,w,c
  7537  0063AC  203A               	addwfc	fix_fft@i+1,w,c
  7538  0063AE  6E46               	movwf	fix_fft@j+1,c
  7539  0063B0  5043               	movf	fix_fft@l+2,w,c
  7540  0063B2  203B               	addwfc	fix_fft@i+2,w,c
  7541  0063B4  6E47               	movwf	fix_fft@j+2,c
  7542  0063B6  5044               	movf	fix_fft@l+3,w,c
  7543  0063B8  203C               	addwfc	fix_fft@i+3,w,c
  7544  0063BA  6E48               	movwf	fix_fft@j+3,c
  7545                           
  7546                           ;fft.c: 227: c = ((long int)wr * (long int)fr[j]);
  7547  0063BC  C02B  F001         	movff	fix_fft@wr,___lmul@multiplier
  7548  0063C0  C02C  F002         	movff	fix_fft@wr+1,___lmul@multiplier+1
  7549  0063C4  0E00               	movlw	0
  7550  0063C6  BE02               	btfsc	___lmul@multiplier+1,7,c
  7551  0063C8  0EFF               	movlw	-1
  7552  0063CA  6E03               	movwf	___lmul@multiplier+2,c
  7553  0063CC  6E04               	movwf	___lmul@multiplier+3,c
  7554  0063CE  90D8               	bcf	status,0,c
  7555  0063D0  3445               	rlcf	fix_fft@j,w,c
  7556  0063D2  6ED9               	movwf	fsr2l,c
  7557  0063D4  3446               	rlcf	fix_fft@j+1,w,c
  7558  0063D6  6EDA               	movwf	fsr2h,c
  7559  0063D8  500D               	movf	fix_fft@fr,w,c
  7560  0063DA  26D9               	addwf	fsr2l,f,c
  7561  0063DC  500E               	movf	fix_fft@fr+1,w,c
  7562  0063DE  22DA               	addwfc	fsr2h,f,c
  7563  0063E0  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7564  0063E4  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7565  0063E8  0E00               	movlw	0
  7566  0063EA  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7567  0063EC  0EFF               	movlw	-1
  7568  0063EE  6E07               	movwf	___lmul@multiplicand+2,c
  7569  0063F0  6E08               	movwf	___lmul@multiplicand+3,c
  7570  0063F2  EC25  F02D         	call	___lmul	;wreg free
  7571  0063F6  C001  F049         	movff	?___lmul,fix_fft@c
  7572  0063FA  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7573  0063FE  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7574  006402  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7575                           
  7576                           ;fft.c: 228: c = c >> 14;
  7577  006406  0E0E               	movlw	14
  7578  006408  6E13               	movwf	??_fix_fft& (0+255),c
  7579  00640A  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7580  00640E  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7581  006412  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7582  006416  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7583  00641A                     u1895:
  7584  00641A  6613               	tstfsz	??_fix_fft,c
  7585  00641C  D001               	goto	u1896
  7586  00641E  D007               	goto	u1897
  7587  006420                     u1896:
  7588  006420  3417               	rlcf	??_fix_fft+4,w,c
  7589  006422  3217               	rrcf	??_fix_fft+4,f,c
  7590  006424  3216               	rrcf	??_fix_fft+3,f,c
  7591  006426  3215               	rrcf	??_fix_fft+2,f,c
  7592  006428  3214               	rrcf	??_fix_fft+1,f,c
  7593  00642A  2E13               	decfsz	??_fix_fft,f,c
  7594  00642C  D7F6               	goto	u1895
  7595  00642E                     u1897:
  7596  00642E  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7597  006432  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7598  006436  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7599  00643A  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7600                           
  7601                           ;fft.c: 229: b = c & 0x01;
  7602  00643E  0E01               	movlw	1
  7603  006440  1449               	andwf	fix_fft@c,w,c
  7604  006442  6E37               	movwf	fix_fft@b,c
  7605  006444  6A38               	clrf	fix_fft@b+1,c
  7606                           
  7607                           ;fft.c: 230: tr = (c >> 1) + b;
  7608  006446  C049  F013         	movff	fix_fft@c,??_fix_fft
  7609  00644A  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7610  00644E  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7611  006452  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7612  006456  3416               	rlcf	??_fix_fft+3,w,c
  7613  006458  3216               	rrcf	??_fix_fft+3,f,c
  7614  00645A  3215               	rrcf	??_fix_fft+2,f,c
  7615  00645C  3214               	rrcf	??_fix_fft+1,f,c
  7616  00645E  3213               	rrcf	??_fix_fft,f,c
  7617  006460  5037               	movf	fix_fft@b,w,c
  7618  006462  2413               	addwf	??_fix_fft,w,c
  7619  006464  6E33               	movwf	fix_fft@tr,c
  7620  006466  5038               	movf	fix_fft@b+1,w,c
  7621  006468  2014               	addwfc	??_fix_fft+1,w,c
  7622  00646A  6E34               	movwf	fix_fft@tr+1,c
  7623                           
  7624                           ;fft.c: 232: c = ((long int)wi * (long int)fi[j]);
  7625  00646C  C02D  F001         	movff	fix_fft@wi,___lmul@multiplier
  7626  006470  C02E  F002         	movff	fix_fft@wi+1,___lmul@multiplier+1
  7627  006474  0E00               	movlw	0
  7628  006476  BE02               	btfsc	___lmul@multiplier+1,7,c
  7629  006478  0EFF               	movlw	-1
  7630  00647A  6E03               	movwf	___lmul@multiplier+2,c
  7631  00647C  6E04               	movwf	___lmul@multiplier+3,c
  7632  00647E  90D8               	bcf	status,0,c
  7633  006480  3445               	rlcf	fix_fft@j,w,c
  7634  006482  6ED9               	movwf	fsr2l,c
  7635  006484  3446               	rlcf	fix_fft@j+1,w,c
  7636  006486  6EDA               	movwf	fsr2h,c
  7637  006488  500F               	movf	fix_fft@fi,w,c
  7638  00648A  26D9               	addwf	fsr2l,f,c
  7639  00648C  5010               	movf	fix_fft@fi+1,w,c
  7640  00648E  22DA               	addwfc	fsr2h,f,c
  7641  006490  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7642  006494  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7643  006498  0E00               	movlw	0
  7644  00649A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7645  00649C  0EFF               	movlw	-1
  7646  00649E  6E07               	movwf	___lmul@multiplicand+2,c
  7647  0064A0  6E08               	movwf	___lmul@multiplicand+3,c
  7648  0064A2  EC25  F02D         	call	___lmul	;wreg free
  7649  0064A6  C001  F049         	movff	?___lmul,fix_fft@c
  7650  0064AA  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7651  0064AE  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7652  0064B2  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7653                           
  7654                           ;fft.c: 233: c = c >> 14;
  7655  0064B6  0E0E               	movlw	14
  7656  0064B8  6E13               	movwf	??_fix_fft& (0+255),c
  7657  0064BA  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7658  0064BE  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7659  0064C2  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7660  0064C6  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7661  0064CA                     u1905:
  7662  0064CA  6613               	tstfsz	??_fix_fft,c
  7663  0064CC  D001               	goto	u1906
  7664  0064CE  D007               	goto	u1907
  7665  0064D0                     u1906:
  7666  0064D0  3417               	rlcf	??_fix_fft+4,w,c
  7667  0064D2  3217               	rrcf	??_fix_fft+4,f,c
  7668  0064D4  3216               	rrcf	??_fix_fft+3,f,c
  7669  0064D6  3215               	rrcf	??_fix_fft+2,f,c
  7670  0064D8  3214               	rrcf	??_fix_fft+1,f,c
  7671  0064DA  2E13               	decfsz	??_fix_fft,f,c
  7672  0064DC  D7F6               	goto	u1905
  7673  0064DE                     u1907:
  7674  0064DE  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7675  0064E2  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7676  0064E6  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7677  0064EA  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7678                           
  7679                           ;fft.c: 234: b = c & 0x01;
  7680  0064EE  0E01               	movlw	1
  7681  0064F0  1449               	andwf	fix_fft@c,w,c
  7682  0064F2  6E37               	movwf	fix_fft@b,c
  7683  0064F4  6A38               	clrf	fix_fft@b+1,c
  7684                           
  7685                           ;fft.c: 235: tr = tr - ((c >> 1) + b);
  7686  0064F6  C049  F013         	movff	fix_fft@c,??_fix_fft
  7687  0064FA  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7688  0064FE  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7689  006502  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7690  006506  3416               	rlcf	??_fix_fft+3,w,c
  7691  006508  3216               	rrcf	??_fix_fft+3,f,c
  7692  00650A  3215               	rrcf	??_fix_fft+2,f,c
  7693  00650C  3214               	rrcf	??_fix_fft+1,f,c
  7694  00650E  3213               	rrcf	??_fix_fft,f,c
  7695  006510  5037               	movf	fix_fft@b,w,c
  7696  006512  2613               	addwf	??_fix_fft,f,c
  7697  006514  5038               	movf	fix_fft@b+1,w,c
  7698  006516  2214               	addwfc	??_fix_fft+1,f,c
  7699  006518  1E13               	comf	??_fix_fft,f,c
  7700  00651A  1E14               	comf	??_fix_fft+1,f,c
  7701  00651C  4A13               	infsnz	??_fix_fft,f,c
  7702  00651E  2A14               	incf	??_fix_fft+1,f,c
  7703  006520  5033               	movf	fix_fft@tr,w,c
  7704  006522  2413               	addwf	??_fix_fft,w,c
  7705  006524  6E33               	movwf	fix_fft@tr,c
  7706  006526  5034               	movf	fix_fft@tr+1,w,c
  7707  006528  2014               	addwfc	??_fix_fft+1,w,c
  7708  00652A  6E34               	movwf	fix_fft@tr+1,c
  7709                           
  7710                           ;fft.c: 238: c = ((long int)wr * (long int)fi[j]);
  7711  00652C  C02B  F001         	movff	fix_fft@wr,___lmul@multiplier
  7712  006530  C02C  F002         	movff	fix_fft@wr+1,___lmul@multiplier+1
  7713  006534  0E00               	movlw	0
  7714  006536  BE02               	btfsc	___lmul@multiplier+1,7,c
  7715  006538  0EFF               	movlw	-1
  7716  00653A  6E03               	movwf	___lmul@multiplier+2,c
  7717  00653C  6E04               	movwf	___lmul@multiplier+3,c
  7718  00653E  90D8               	bcf	status,0,c
  7719  006540  3445               	rlcf	fix_fft@j,w,c
  7720  006542  6ED9               	movwf	fsr2l,c
  7721  006544  3446               	rlcf	fix_fft@j+1,w,c
  7722  006546  6EDA               	movwf	fsr2h,c
  7723  006548  500F               	movf	fix_fft@fi,w,c
  7724  00654A  26D9               	addwf	fsr2l,f,c
  7725  00654C  5010               	movf	fix_fft@fi+1,w,c
  7726  00654E  22DA               	addwfc	fsr2h,f,c
  7727  006550  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7728  006554  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7729  006558  0E00               	movlw	0
  7730  00655A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7731  00655C  0EFF               	movlw	-1
  7732  00655E  6E07               	movwf	___lmul@multiplicand+2,c
  7733  006560  6E08               	movwf	___lmul@multiplicand+3,c
  7734  006562  EC25  F02D         	call	___lmul	;wreg free
  7735  006566  C001  F049         	movff	?___lmul,fix_fft@c
  7736  00656A  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7737  00656E  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7738  006572  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7739                           
  7740                           ;fft.c: 239: c = c >> 14;
  7741  006576  0E0E               	movlw	14
  7742  006578  6E13               	movwf	??_fix_fft& (0+255),c
  7743  00657A  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7744  00657E  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7745  006582  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7746  006586  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7747  00658A                     u1915:
  7748  00658A  6613               	tstfsz	??_fix_fft,c
  7749  00658C  D001               	goto	u1916
  7750  00658E  D007               	goto	u1917
  7751  006590                     u1916:
  7752  006590  3417               	rlcf	??_fix_fft+4,w,c
  7753  006592  3217               	rrcf	??_fix_fft+4,f,c
  7754  006594  3216               	rrcf	??_fix_fft+3,f,c
  7755  006596  3215               	rrcf	??_fix_fft+2,f,c
  7756  006598  3214               	rrcf	??_fix_fft+1,f,c
  7757  00659A  2E13               	decfsz	??_fix_fft,f,c
  7758  00659C  D7F6               	goto	u1915
  7759  00659E                     u1917:
  7760  00659E  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7761  0065A2  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7762  0065A6  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7763  0065AA  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7764                           
  7765                           ;fft.c: 240: b = c & 0x01;
  7766  0065AE  0E01               	movlw	1
  7767  0065B0  1449               	andwf	fix_fft@c,w,c
  7768  0065B2  6E37               	movwf	fix_fft@b,c
  7769  0065B4  6A38               	clrf	fix_fft@b+1,c
  7770                           
  7771                           ;fft.c: 241: ti = (c >> 1) + b;
  7772  0065B6  C049  F013         	movff	fix_fft@c,??_fix_fft
  7773  0065BA  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7774  0065BE  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7775  0065C2  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7776  0065C6  3416               	rlcf	??_fix_fft+3,w,c
  7777  0065C8  3216               	rrcf	??_fix_fft+3,f,c
  7778  0065CA  3215               	rrcf	??_fix_fft+2,f,c
  7779  0065CC  3214               	rrcf	??_fix_fft+1,f,c
  7780  0065CE  3213               	rrcf	??_fix_fft,f,c
  7781  0065D0  5037               	movf	fix_fft@b,w,c
  7782  0065D2  2413               	addwf	??_fix_fft,w,c
  7783  0065D4  6E35               	movwf	fix_fft@ti,c
  7784  0065D6  5038               	movf	fix_fft@b+1,w,c
  7785  0065D8  2014               	addwfc	??_fix_fft+1,w,c
  7786  0065DA  6E36               	movwf	fix_fft@ti+1,c
  7787                           
  7788                           ;fft.c: 243: c = ((long int)wi * (long int)fr[j]);
  7789  0065DC  C02D  F001         	movff	fix_fft@wi,___lmul@multiplier
  7790  0065E0  C02E  F002         	movff	fix_fft@wi+1,___lmul@multiplier+1
  7791  0065E4  0E00               	movlw	0
  7792  0065E6  BE02               	btfsc	___lmul@multiplier+1,7,c
  7793  0065E8  0EFF               	movlw	-1
  7794  0065EA  6E03               	movwf	___lmul@multiplier+2,c
  7795  0065EC  6E04               	movwf	___lmul@multiplier+3,c
  7796  0065EE  90D8               	bcf	status,0,c
  7797  0065F0  3445               	rlcf	fix_fft@j,w,c
  7798  0065F2  6ED9               	movwf	fsr2l,c
  7799  0065F4  3446               	rlcf	fix_fft@j+1,w,c
  7800  0065F6  6EDA               	movwf	fsr2h,c
  7801  0065F8  500D               	movf	fix_fft@fr,w,c
  7802  0065FA  26D9               	addwf	fsr2l,f,c
  7803  0065FC  500E               	movf	fix_fft@fr+1,w,c
  7804  0065FE  22DA               	addwfc	fsr2h,f,c
  7805  006600  CFDE F005          	movff	postinc2,___lmul@multiplicand
  7806  006604  CFDD F006          	movff	postdec2,___lmul@multiplicand+1
  7807  006608  0E00               	movlw	0
  7808  00660A  BE06               	btfsc	___lmul@multiplicand+1,7,c
  7809  00660C  0EFF               	movlw	-1
  7810  00660E  6E07               	movwf	___lmul@multiplicand+2,c
  7811  006610  6E08               	movwf	___lmul@multiplicand+3,c
  7812  006612  EC25  F02D         	call	___lmul	;wreg free
  7813  006616  C001  F049         	movff	?___lmul,fix_fft@c
  7814  00661A  C002  F04A         	movff	?___lmul+1,fix_fft@c+1
  7815  00661E  C003  F04B         	movff	?___lmul+2,fix_fft@c+2
  7816  006622  C004  F04C         	movff	?___lmul+3,fix_fft@c+3
  7817                           
  7818                           ;fft.c: 244: c = c >> 14;
  7819  006626  0E0E               	movlw	14
  7820  006628  6E13               	movwf	??_fix_fft& (0+255),c
  7821  00662A  C049  F014         	movff	fix_fft@c,??_fix_fft+1
  7822  00662E  C04A  F015         	movff	fix_fft@c+1,??_fix_fft+2
  7823  006632  C04B  F016         	movff	fix_fft@c+2,??_fix_fft+3
  7824  006636  C04C  F017         	movff	fix_fft@c+3,??_fix_fft+4
  7825  00663A                     u1925:
  7826  00663A  6613               	tstfsz	??_fix_fft,c
  7827  00663C  D001               	goto	u1926
  7828  00663E  D007               	goto	u1927
  7829  006640                     u1926:
  7830  006640  3417               	rlcf	??_fix_fft+4,w,c
  7831  006642  3217               	rrcf	??_fix_fft+4,f,c
  7832  006644  3216               	rrcf	??_fix_fft+3,f,c
  7833  006646  3215               	rrcf	??_fix_fft+2,f,c
  7834  006648  3214               	rrcf	??_fix_fft+1,f,c
  7835  00664A  2E13               	decfsz	??_fix_fft,f,c
  7836  00664C  D7F6               	goto	u1925
  7837  00664E                     u1927:
  7838  00664E  C014  F049         	movff	??_fix_fft+1,fix_fft@c
  7839  006652  C015  F04A         	movff	??_fix_fft+2,fix_fft@c+1
  7840  006656  C016  F04B         	movff	??_fix_fft+3,fix_fft@c+2
  7841  00665A  C017  F04C         	movff	??_fix_fft+4,fix_fft@c+3
  7842                           
  7843                           ;fft.c: 245: b = c & 0x01;
  7844  00665E  0E01               	movlw	1
  7845  006660  1449               	andwf	fix_fft@c,w,c
  7846  006662  6E37               	movwf	fix_fft@b,c
  7847  006664  6A38               	clrf	fix_fft@b+1,c
  7848                           
  7849                           ;fft.c: 246: ti = ti + ((c >> 1) + b);
  7850  006666  C049  F013         	movff	fix_fft@c,??_fix_fft
  7851  00666A  C04A  F014         	movff	fix_fft@c+1,??_fix_fft+1
  7852  00666E  C04B  F015         	movff	fix_fft@c+2,??_fix_fft+2
  7853  006672  C04C  F016         	movff	fix_fft@c+3,??_fix_fft+3
  7854  006676  3416               	rlcf	??_fix_fft+3,w,c
  7855  006678  3216               	rrcf	??_fix_fft+3,f,c
  7856  00667A  3215               	rrcf	??_fix_fft+2,f,c
  7857  00667C  3214               	rrcf	??_fix_fft+1,f,c
  7858  00667E  3213               	rrcf	??_fix_fft,f,c
  7859  006680  5037               	movf	fix_fft@b,w,c
  7860  006682  2613               	addwf	??_fix_fft,f,c
  7861  006684  5038               	movf	fix_fft@b+1,w,c
  7862  006686  2214               	addwfc	??_fix_fft+1,f,c
  7863  006688  5035               	movf	fix_fft@ti,w,c
  7864  00668A  2413               	addwf	??_fix_fft,w,c
  7865  00668C  6E35               	movwf	fix_fft@ti,c
  7866  00668E  5036               	movf	fix_fft@ti+1,w,c
  7867  006690  2014               	addwfc	??_fix_fft+1,w,c
  7868  006692  6E36               	movwf	fix_fft@ti+1,c
  7869                           
  7870                           ;fft.c: 248: qr = fr[i];
  7871  006694  90D8               	bcf	status,0,c
  7872  006696  3439               	rlcf	fix_fft@i,w,c
  7873  006698  6ED9               	movwf	fsr2l,c
  7874  00669A  343A               	rlcf	fix_fft@i+1,w,c
  7875  00669C  6EDA               	movwf	fsr2h,c
  7876  00669E  500D               	movf	fix_fft@fr,w,c
  7877  0066A0  26D9               	addwf	fsr2l,f,c
  7878  0066A2  500E               	movf	fix_fft@fr+1,w,c
  7879  0066A4  22DA               	addwfc	fsr2h,f,c
  7880  0066A6  CFDE F027          	movff	postinc2,fix_fft@qr
  7881  0066AA  CFDD F028          	movff	postdec2,fix_fft@qr+1
  7882                           
  7883                           ;fft.c: 249: qi = fi[i];
  7884  0066AE  90D8               	bcf	status,0,c
  7885  0066B0  3439               	rlcf	fix_fft@i,w,c
  7886  0066B2  6ED9               	movwf	fsr2l,c
  7887  0066B4  343A               	rlcf	fix_fft@i+1,w,c
  7888  0066B6  6EDA               	movwf	fsr2h,c
  7889  0066B8  500F               	movf	fix_fft@fi,w,c
  7890  0066BA  26D9               	addwf	fsr2l,f,c
  7891  0066BC  5010               	movf	fix_fft@fi+1,w,c
  7892  0066BE  22DA               	addwfc	fsr2h,f,c
  7893  0066C0  CFDE F029          	movff	postinc2,fix_fft@qi
  7894  0066C4  CFDD F02A          	movff	postdec2,fix_fft@qi+1
  7895                           
  7896                           ;fft.c: 250: qr >>= 1;
  7897  0066C8  3428               	rlcf	fix_fft@qr+1,w,c
  7898  0066CA  3228               	rrcf	fix_fft@qr+1,f,c
  7899  0066CC  3227               	rrcf	fix_fft@qr,f,c
  7900                           
  7901                           ;fft.c: 251: qi >>= 1;
  7902  0066CE  342A               	rlcf	fix_fft@qi+1,w,c
  7903  0066D0  322A               	rrcf	fix_fft@qi+1,f,c
  7904  0066D2  3229               	rrcf	fix_fft@qi,f,c
  7905                           
  7906                           ;fft.c: 253: fr[j] = qr - tr;
  7907  0066D4  C033  F013         	movff	fix_fft@tr,??_fix_fft
  7908  0066D8  C034  F014         	movff	fix_fft@tr+1,??_fix_fft+1
  7909  0066DC  1E13               	comf	??_fix_fft,f,c
  7910  0066DE  1E14               	comf	??_fix_fft+1,f,c
  7911  0066E0  4A13               	infsnz	??_fix_fft,f,c
  7912  0066E2  2A14               	incf	??_fix_fft+1,f,c
  7913  0066E4  5027               	movf	fix_fft@qr,w,c
  7914  0066E6  2613               	addwf	??_fix_fft,f,c
  7915  0066E8  5028               	movf	fix_fft@qr+1,w,c
  7916  0066EA  2214               	addwfc	??_fix_fft+1,f,c
  7917  0066EC  90D8               	bcf	status,0,c
  7918  0066EE  3445               	rlcf	fix_fft@j,w,c
  7919  0066F0  6ED9               	movwf	fsr2l,c
  7920  0066F2  3446               	rlcf	fix_fft@j+1,w,c
  7921  0066F4  6EDA               	movwf	fsr2h,c
  7922  0066F6  500D               	movf	fix_fft@fr,w,c
  7923  0066F8  26D9               	addwf	fsr2l,f,c
  7924  0066FA  500E               	movf	fix_fft@fr+1,w,c
  7925  0066FC  22DA               	addwfc	fsr2h,f,c
  7926  0066FE  C013  FFDE         	movff	??_fix_fft,postinc2
  7927  006702  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7928                           
  7929                           ;fft.c: 254: fi[j] = qi - ti;
  7930  006706  C035  F013         	movff	fix_fft@ti,??_fix_fft
  7931  00670A  C036  F014         	movff	fix_fft@ti+1,??_fix_fft+1
  7932  00670E  1E13               	comf	??_fix_fft,f,c
  7933  006710  1E14               	comf	??_fix_fft+1,f,c
  7934  006712  4A13               	infsnz	??_fix_fft,f,c
  7935  006714  2A14               	incf	??_fix_fft+1,f,c
  7936  006716  5029               	movf	fix_fft@qi,w,c
  7937  006718  2613               	addwf	??_fix_fft,f,c
  7938  00671A  502A               	movf	fix_fft@qi+1,w,c
  7939  00671C  2214               	addwfc	??_fix_fft+1,f,c
  7940  00671E  90D8               	bcf	status,0,c
  7941  006720  3445               	rlcf	fix_fft@j,w,c
  7942  006722  6ED9               	movwf	fsr2l,c
  7943  006724  3446               	rlcf	fix_fft@j+1,w,c
  7944  006726  6EDA               	movwf	fsr2h,c
  7945  006728  500F               	movf	fix_fft@fi,w,c
  7946  00672A  26D9               	addwf	fsr2l,f,c
  7947  00672C  5010               	movf	fix_fft@fi+1,w,c
  7948  00672E  22DA               	addwfc	fsr2h,f,c
  7949  006730  C013  FFDE         	movff	??_fix_fft,postinc2
  7950  006734  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7951                           
  7952                           ;fft.c: 255: fr[i] = qr + tr;
  7953  006738  C027  F013         	movff	fix_fft@qr,??_fix_fft
  7954  00673C  C028  F014         	movff	fix_fft@qr+1,??_fix_fft+1
  7955  006740  5033               	movf	fix_fft@tr,w,c
  7956  006742  2613               	addwf	??_fix_fft,f,c
  7957  006744  5034               	movf	fix_fft@tr+1,w,c
  7958  006746  2214               	addwfc	??_fix_fft+1,f,c
  7959  006748  90D8               	bcf	status,0,c
  7960  00674A  3439               	rlcf	fix_fft@i,w,c
  7961  00674C  6ED9               	movwf	fsr2l,c
  7962  00674E  343A               	rlcf	fix_fft@i+1,w,c
  7963  006750  6EDA               	movwf	fsr2h,c
  7964  006752  500D               	movf	fix_fft@fr,w,c
  7965  006754  26D9               	addwf	fsr2l,f,c
  7966  006756  500E               	movf	fix_fft@fr+1,w,c
  7967  006758  22DA               	addwfc	fsr2h,f,c
  7968  00675A  C013  FFDE         	movff	??_fix_fft,postinc2
  7969  00675E  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7970                           
  7971                           ;fft.c: 256: fi[i] = qi + ti;
  7972  006762  C029  F013         	movff	fix_fft@qi,??_fix_fft
  7973  006766  C02A  F014         	movff	fix_fft@qi+1,??_fix_fft+1
  7974  00676A  5035               	movf	fix_fft@ti,w,c
  7975  00676C  2613               	addwf	??_fix_fft,f,c
  7976  00676E  5036               	movf	fix_fft@ti+1,w,c
  7977  006770  2214               	addwfc	??_fix_fft+1,f,c
  7978  006772  90D8               	bcf	status,0,c
  7979  006774  3439               	rlcf	fix_fft@i,w,c
  7980  006776  6ED9               	movwf	fsr2l,c
  7981  006778  343A               	rlcf	fix_fft@i+1,w,c
  7982  00677A  6EDA               	movwf	fsr2h,c
  7983  00677C  500F               	movf	fix_fft@fi,w,c
  7984  00677E  26D9               	addwf	fsr2l,f,c
  7985  006780  5010               	movf	fix_fft@fi+1,w,c
  7986  006782  22DA               	addwfc	fsr2h,f,c
  7987  006784  C013  FFDE         	movff	??_fix_fft,postinc2
  7988  006788  C014  FFDD         	movff	??_fix_fft+1,postdec2
  7989  00678C  5023               	movf	fix_fft@istep,w,c
  7990  00678E  2639               	addwf	fix_fft@i,f,c
  7991  006790  5024               	movf	fix_fft@istep+1,w,c
  7992  006792  223A               	addwfc	fix_fft@i+1,f,c
  7993  006794  5025               	movf	fix_fft@istep+2,w,c
  7994  006796  223B               	addwfc	fix_fft@i+2,f,c
  7995  006798  5026               	movf	fix_fft@istep+3,w,c
  7996  00679A  223C               	addwfc	fix_fft@i+3,f,c
  7997  00679C                     l2473:
  7998  00679C  503C               	movf	fix_fft@i+3,w,c
  7999  00679E  0A80               	xorlw	128
  8000  0067A0  6E13               	movwf	??_fix_fft& (0+255),c
  8001  0067A2  502F               	movf	fix_fft@n,w,c
  8002  0067A4  5C39               	subwf	fix_fft@i,w,c
  8003  0067A6  5030               	movf	fix_fft@n+1,w,c
  8004  0067A8  583A               	subwfb	fix_fft@i+1,w,c
  8005  0067AA  5031               	movf	fix_fft@n+2,w,c
  8006  0067AC  583B               	subwfb	fix_fft@i+2,w,c
  8007  0067AE  5032               	movf	fix_fft@n+3,w,c
  8008  0067B0  0A80               	xorlw	128
  8009  0067B2  5813               	subwfb	??_fix_fft& (0+255),w,c
  8010  0067B4  A0D8               	btfss	status,0,c
  8011  0067B6  D5F6               	goto	l2429
  8012  0067B8  4A11               	infsnz	fix_fft@m,f,c
  8013  0067BA  2A12               	incf	fix_fft@m+1,f,c
  8014  0067BC                     l2477:
  8015  0067BC  C011  F013         	movff	fix_fft@m,??_fix_fft
  8016  0067C0  C012  F014         	movff	fix_fft@m+1,??_fix_fft+1
  8017  0067C4  0E00               	movlw	0
  8018  0067C6  BE14               	btfsc	(??_fix_fft+1)& (0+255),7,c
  8019  0067C8  0EFF               	movlw	255
  8020  0067CA  6E15               	movwf	(??_fix_fft+2)& (0+255),c
  8021  0067CC  6E16               	movwf	(??_fix_fft+3)& (0+255),c
  8022  0067CE  5016               	movf	??_fix_fft+3,w,c
  8023  0067D0  0A80               	xorlw	128
  8024  0067D2  6E17               	movwf	(??_fix_fft+4)& (0+255),c
  8025  0067D4  5041               	movf	fix_fft@l,w,c
  8026  0067D6  5C13               	subwf	??_fix_fft,w,c
  8027  0067D8  5042               	movf	fix_fft@l+1,w,c
  8028  0067DA  5814               	subwfb	??_fix_fft+1,w,c
  8029  0067DC  5043               	movf	fix_fft@l+2,w,c
  8030  0067DE  5815               	subwfb	??_fix_fft+2,w,c
  8031  0067E0  5044               	movf	fix_fft@l+3,w,c
  8032  0067E2  0A80               	xorlw	128
  8033  0067E4  5817               	subwfb	(??_fix_fft+4)& (0+255),w,c
  8034  0067E6  A0D8               	btfss	status,0,c
  8035  0067E8  D581               	goto	l2421
  8036                           
  8037                           ;fft.c: 257: }
  8038                           ;fft.c: 258: }
  8039                           ;fft.c: 260: --k;
  8040  0067EA  0EFF               	movlw	255
  8041  0067EC  261B               	addwf	fix_fft@k,f,c
  8042  0067EE  0EFF               	movlw	255
  8043  0067F0  221C               	addwfc	fix_fft@k+1,f,c
  8044  0067F2  0EFF               	movlw	255
  8045  0067F4  221D               	addwfc	fix_fft@k+2,f,c
  8046  0067F6  0EFF               	movlw	255
  8047  0067F8  221E               	addwfc	fix_fft@k+3,f,c
  8048                           
  8049                           ;fft.c: 261: l = istep;
  8050  0067FA  C023  F041         	movff	fix_fft@istep,fix_fft@l
  8051  0067FE  C024  F042         	movff	fix_fft@istep+1,fix_fft@l+1
  8052  006802  C025  F043         	movff	fix_fft@istep+2,fix_fft@l+2
  8053  006806  C026  F044         	movff	fix_fft@istep+3,fix_fft@l+3
  8054  00680A                     l213:
  8055  00680A  5044               	movf	fix_fft@l+3,w,c
  8056  00680C  0A80               	xorlw	128
  8057  00680E  6E13               	movwf	??_fix_fft& (0+255),c
  8058  006810  502F               	movf	fix_fft@n,w,c
  8059  006812  5C41               	subwf	fix_fft@l,w,c
  8060  006814  5030               	movf	fix_fft@n+1,w,c
  8061  006816  5842               	subwfb	fix_fft@l+1,w,c
  8062  006818  5031               	movf	fix_fft@n+2,w,c
  8063  00681A  5843               	subwfb	fix_fft@l+2,w,c
  8064  00681C  5032               	movf	fix_fft@n+3,w,c
  8065  00681E  0A80               	xorlw	128
  8066  006820  5813               	subwfb	??_fix_fft& (0+255),w,c
  8067  006822  B0D8               	btfsc	status,0,c
  8068  006824  0012               	return	
  8069  006826  D554               	goto	l2417
  8070  006828                     __end_of_fix_fft:
  8071                           	opt stack 0
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           intcon	equ	0xFF2
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           postinc1	equ	0xFE6
  8083                           postdec1	equ	0xFE5
  8084                           fsr1h	equ	0xFE2
  8085                           fsr1l	equ	0xFE1
  8086                           indf2	equ	0xFDF
  8087                           postinc2	equ	0xFDE
  8088                           postdec2	equ	0xFDD
  8089                           fsr2h	equ	0xFDA
  8090                           fsr2l	equ	0xFD9
  8091                           status	equ	0xFD8
  8092                           
  8093 ;; *************** function ___lmul *****************
  8094 ;; Defined at:
  8095 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  multiplier      4    0[COMRAM] unsigned long 
  8098 ;;  multiplicand    4    4[COMRAM] unsigned long 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;  product         4    8[COMRAM] unsigned long 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  4    0[COMRAM] unsigned long 
  8103 ;; Registers used:
  8104 ;;		wreg, status,2, status,0
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8110 ;;      Params:         8       0       0       0       0       0       0
  8111 ;;      Locals:         4       0       0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0
  8113 ;;      Totals:        12       0       0       0       0       0       0
  8114 ;;Total ram usage:       12 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_fix_fft
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text25
  8124  005A4A                     __ptext25:
  8125                           	opt stack 0
  8126  005A4A                     ___lmul:
  8127                           	opt stack 28
  8128                           
  8129                           ;incstack = 0
  8130  005A4A  0E00               	movlw	0
  8131  005A4C  6E09               	movwf	___lmul@product,c
  8132  005A4E  0E00               	movlw	0
  8133  005A50  6E0A               	movwf	___lmul@product+1,c
  8134  005A52  0E00               	movlw	0
  8135  005A54  6E0B               	movwf	___lmul@product+2,c
  8136  005A56  0E00               	movlw	0
  8137  005A58  6E0C               	movwf	___lmul@product+3,c
  8138  005A5A                     l2293:
  8139  005A5A  A001               	btfss	___lmul@multiplier,0,c
  8140  005A5C  D008               	goto	l2297
  8141  005A5E  5005               	movf	___lmul@multiplicand,w,c
  8142  005A60  2609               	addwf	___lmul@product,f,c
  8143  005A62  5006               	movf	___lmul@multiplicand+1,w,c
  8144  005A64  220A               	addwfc	___lmul@product+1,f,c
  8145  005A66  5007               	movf	___lmul@multiplicand+2,w,c
  8146  005A68  220B               	addwfc	___lmul@product+2,f,c
  8147  005A6A  5008               	movf	___lmul@multiplicand+3,w,c
  8148  005A6C  220C               	addwfc	___lmul@product+3,f,c
  8149  005A6E                     l2297:
  8150  005A6E  90D8               	bcf	status,0,c
  8151  005A70  3605               	rlcf	___lmul@multiplicand,f,c
  8152  005A72  3606               	rlcf	___lmul@multiplicand+1,f,c
  8153  005A74  3607               	rlcf	___lmul@multiplicand+2,f,c
  8154  005A76  3608               	rlcf	___lmul@multiplicand+3,f,c
  8155  005A78  90D8               	bcf	status,0,c
  8156  005A7A  3204               	rrcf	___lmul@multiplier+3,f,c
  8157  005A7C  3203               	rrcf	___lmul@multiplier+2,f,c
  8158  005A7E  3202               	rrcf	___lmul@multiplier+1,f,c
  8159  005A80  3201               	rrcf	___lmul@multiplier,f,c
  8160  005A82  5004               	movf	___lmul@multiplier+3,w,c
  8161  005A84  1001               	iorwf	___lmul@multiplier,w,c
  8162  005A86  1002               	iorwf	___lmul@multiplier+1,w,c
  8163  005A88  1003               	iorwf	___lmul@multiplier+2,w,c
  8164  005A8A  A4D8               	btfss	status,2,c
  8165  005A8C  D7E6               	goto	l2293
  8166  005A8E  C009  F001         	movff	___lmul@product,?___lmul
  8167  005A92  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  8168  005A96  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  8169  005A9A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  8170  005A9E  0012               	return	
  8171  005AA0                     __end_of___lmul:
  8172                           	opt stack 0
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           postinc0	equ	0xFEE
  8181                           wreg	equ	0xFE8
  8182                           indf1	equ	0xFE7
  8183                           postinc1	equ	0xFE6
  8184                           postdec1	equ	0xFE5
  8185                           fsr1h	equ	0xFE2
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _ConvertADC *****************
  8195 ;; Defined at:
  8196 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcconv.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;		None               void
  8203 ;; Registers used:
  8204 ;;		None
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8210 ;;      Params:         0       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0
  8213 ;;      Totals:         0       0       0       0       0       0       0
  8214 ;;Total ram usage:        0 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; This function calls:
  8217 ;;		Nothing
  8218 ;; This function is called by:
  8219 ;;		_main
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text26
  8224  00576C                     __ptext26:
  8225                           	opt stack 0
  8226  00576C                     _ConvertADC:
  8227                           	opt stack 29
  8228                           
  8229                           ;incstack = 0
  8230  00576C  82C2               	bsf	4034,1,c	;volatile
  8231  00576E  0012               	return	
  8232  005770                     __end_of_ConvertADC:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           postinc0	equ	0xFEE
  8242                           wreg	equ	0xFE8
  8243                           indf1	equ	0xFE7
  8244                           postinc1	equ	0xFE6
  8245                           postdec1	equ	0xFE5
  8246                           fsr1h	equ	0xFE2
  8247                           fsr1l	equ	0xFE1
  8248                           indf2	equ	0xFDF
  8249                           postinc2	equ	0xFDE
  8250                           postdec2	equ	0xFDD
  8251                           fsr2h	equ	0xFDA
  8252                           fsr2l	equ	0xFD9
  8253                           status	equ	0xFD8
  8254                           
  8255 ;; *************** function _BusyADC *****************
  8256 ;; Defined at:
  8257 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcbusy.c"
  8258 ;; Parameters:    Size  Location     Type
  8259 ;;		None
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;		None
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      unsigned char 
  8264 ;; Registers used:
  8265 ;;		wreg
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8271 ;;      Params:         0       0       0       0       0       0       0
  8272 ;;      Locals:         0       0       0       0       0       0       0
  8273 ;;      Temps:          0       0       0       0       0       0       0
  8274 ;;      Totals:         0       0       0       0       0       0       0
  8275 ;;Total ram usage:        0 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text27
  8285  005770                     __ptext27:
  8286                           	opt stack 0
  8287  005770                     _BusyADC:
  8288                           	opt stack 29
  8289                           
  8290                           ;incstack = 0
  8291  005770  A2C2               	btfss	4034,1,c	;volatile
  8292  005772  D002               	goto	u1830
  8293  005774  0E01               	movlw	1
  8294  005776  0012               	return	
  8295  005778                     u1830:
  8296  005778  0E00               	movlw	0
  8297  00577A  0012               	return	
  8298  00577C                     __end_of_BusyADC:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postinc1	equ	0xFE6
  8311                           postdec1	equ	0xFE5
  8312                           fsr1h	equ	0xFE2
  8313                           fsr1l	equ	0xFE1
  8314                           indf2	equ	0xFDF
  8315                           postinc2	equ	0xFDE
  8316                           postdec2	equ	0xFDD
  8317                           fsr2h	equ	0xFDA
  8318                           fsr2l	equ	0xFD9
  8319                           status	equ	0xFD8
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           indf1	equ	0xFE7
  8330                           postinc1	equ	0xFE6
  8331                           postdec1	equ	0xFE5
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341                           	psect	rparam
  8342  0000                     tblptru	equ	0xFF8
  8343                           tblptrh	equ	0xFF7
  8344                           tblptrl	equ	0xFF6
  8345                           tablat	equ	0xFF5
  8346                           prodh	equ	0xFF4
  8347                           prodl	equ	0xFF3
  8348                           intcon	equ	0xFF2
  8349                           postinc0	equ	0xFEE
  8350                           wreg	equ	0xFE8
  8351                           indf1	equ	0xFE7
  8352                           postinc1	equ	0xFE6
  8353                           postdec1	equ	0xFE5
  8354                           fsr1h	equ	0xFE2
  8355                           fsr1l	equ	0xFE1
  8356                           indf2	equ	0xFDF
  8357                           postinc2	equ	0xFDE
  8358                           postdec2	equ	0xFDD
  8359                           fsr2h	equ	0xFDA
  8360                           fsr2l	equ	0xFD9
  8361                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    2358
    Data        0
    BSS         981
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      95
    BANK0           160     14     115
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> writeGuess@percent(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S786$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LCDStr@dataPtr	PTR const unsigned char  size(2) Largest target is 8
		 -> writeGuess@percent(COMRAM[8]), 

    fix_fft@fi	PTR short  size(2) Largest target is 128
		 -> imaginary_numbers(BANK1[128]), 

    fix_fft@fr	PTR short  size(2) Largest target is 128
		 -> real_numbers(BANK1[128]), 

    sendIntArray@array	PTR short  size(2) Largest target is 128
		 -> guesses(BANK0[10]), real_numbers(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main->_fix_fft
    _writeGuess->_sprintf
    _sprintf->___awdiv
    ___awdiv->___wmul
    _LCDStr->_LCDChrXY
    _LCDChrXY->___lwmod
    ___lwmod->___lwdiv
    _LCDInit->_LCDUpdate
    _LCDUpdate->_LCDSend
    _LCDSend->___wmul
    _sendIntArray->_sendChar
    _sendChar->_Write1USART
    _fix_fft->___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   20258
                                             76 COMRAM    13    13      0
                                              0 BANK0     14    14      0
                            _BusyADC
                         _ConvertADC
                            ___awdiv
                             ___wmul
                            _fix_fft
                       _sendIntArray
                              _setup
                         _writeGuess
 ---------------------------------------------------------------------------------
 (1) _writeGuess                                          13     9      4    8806
                                             36 COMRAM    13     9      4
                             _LCDStr
                            ___awdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    12     10    1715
                                             14 COMRAM    22    12     10
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1466
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDStr                                               5     2      3    5101
                                             25 COMRAM     5     2      3
                           _LCDChrXY
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (3) _LCDChrXY                                            13    11      2    2590
                                             12 COMRAM    13    11      2
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     795
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    4206
                            _LCDInit
                         _Open1USART
                            _OpenADC
                           _OpenSPI1
 ---------------------------------------------------------------------------------
 (2) _OpenSPI1                                             3     1      2     194
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     238
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           6     4      2     273
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              0     0      0    3501
                              _Delay
                     _Initialize_SPI
                           _LCDClear
                            _LCDSend
                          _LCDUpdate
 ---------------------------------------------------------------------------------
 (3) _LCDUpdate                                            4     4      0    2314
                                              8 COMRAM     4     4      0
                            _LCDSend
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1325
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _LCDSend                                              2     1      1     831
                                              6 COMRAM     2     1      1
                        _Delay10TCYx
                          _WriteSPI1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _WriteSPI1                                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCDClear                                             2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Initialize_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                4     0      4     288
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _sendIntArray                                         4     0      4     300
                                              2 COMRAM     4     0      4
                           _sendChar
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0      44
                                              1 COMRAM     1     1      0
                        _Write1USART
 ---------------------------------------------------------------------------------
 (3) _Write1USART                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _fix_fft                                             64    58      6    2782
                                             12 COMRAM    64    58      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     444
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _fix_fft
     ___lmul
   _sendIntArray
     _sendChar
       _Write1USART
   _setup
     _LCDInit
       _Delay
       _Initialize_SPI
       _LCDClear
       _LCDSend
         _Delay10TCYx
         _WriteSPI1
         ___wmul (ARG)
       _LCDUpdate
         _LCDSend
           _Delay10TCYx
           _WriteSPI1
           ___wmul (ARG)
         ___wmul
     _Open1USART
     _OpenADC
     _OpenSPI1
   _writeGuess
     _LCDStr
       _LCDChrXY
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
       _LCDUpdate
         _LCDSend
           _Delay10TCYx
           _WriteSPI1
           ___wmul (ARG)
         ___wmul
     ___awdiv
       ___wmul (ARG)
     _sprintf
       ___awdiv (ARG)
         ___wmul (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     26A      17       40.3%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      E      73       6       71.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D2       3        0.0%
DATA                 0      0     43C       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Dec 07 21:17:55 2014

                          _i 005C                 ___awdiv@sign 000C          ___wmul@multiplicand 0003  
                        l213 680A                          l207 60F8                          l163 766C  
                        l405 57DC                          l270 57F2                          l431 5B2A  
                        l192 577E                          l248 57B8                          l433 5B34  
                        l434 5B36                          l427 5B18                          l364 59A0  
                        l381 5AB4                          l390 5ADA                          l383 5AB8  
                        l384 5ABA                          l387 5AD4                          l388 5AEE  
                        l389 5AD6                          l684 578C                          l980 59EC  
                        l990 5902                          wreg 000FE8                   _TXSTA1bits 000FAC  
                _total_tally 00B9              __end_of_LCDInit 5DC6                 __CFG_LVP$OFF 000000  
            __end_of_LCDSend 580A                         l2105 5ABE                         l2043 5DFE  
                       l2029 5BD2                         l2109 5ADE                         l2221 5F4E  
                       l2063 5EC8                         l2039 5DF0                         l2321 5CC2  
                       l2081 59C2                         l2217 5F3A                         l2209 5F2C  
                       l2411 627C                         l2059 5E9E                         l2323 5CCA  
                       l2315 5CAC                         l2091 59E2                         l2083 59C6  
                       l2227 5F60                         l2421 62EC                         l2413 6280  
                       l2341 5D02                         l2333 5CEA                         l2325 5CCE  
                       l2309 5C8C                         l2261 601E                         l2253 5FFC  
                       l2229 5F8C                         l2079 59BA                         l2239 5FC4  
                       l2271 608E                         l2417 62D0                         l2185 5B1A  
                       l2177 5B0C                         l2337 5CF4                         l2505 685A  
                       l2283 58B6                         l2267 6070                         l2259 6018  
                       l2293 5A5A                         l2429 63A4                         l2197 5B2C  
                       l2277 589A                         l2269 6078                         l2621 7024  
                       l2605 6F6E                         l2541 6B08                         l2517 68EA  
                       l2711 7496                         l2551 6C66                         l2297 5A6E  
                       l2473 679C                         l2641 7144                         l2617 7000  
                       l2537 6A6A                         l2553 6C74                         l2395 6108  
                       l2491 5884                         l2707 748E                         l2571 6DA2  
                       l2547 6BF4                         l2539 6AAA                         l2477 67BC  
                       l2733 75DE                         l2741 7638                         l2645 7168  
                       l2629 70B2                         l2487 5868                         l2671 72FA  
                       l2583 6E20                         l2559 6CA6                         l2495 682C  
                       l2737 760C                         l2729 75B0                         l2675 731E  
                       l2659 7268                         l2595 6EE2                         l1957 57F4  
                       l1981 58F8                         l1973 58D8                         l2765 76A2  
                       l2685 73D2                         l1991 57A6                         l1975 58E0  
                       l2599 6F06                         l1977 58E4                         l1995 57AE  
                       STR_1 7FF5                         u2025 6A86                         u2026 6A8C  
                       u2027 6A9A                         u2205 7046                         u2215 706C  
                       u2055 6C42                         _LATC 000F8B                         u2056 6C48  
                       u2305 7222                         u2225 7092                         u2057 6C56  
                       u2315 7248                         u2155 6F28                         u2165 6F4E  
                       u2265 718A                         u2435 7594                         u2355 7340  
                       u2275 71B0                         u2445 75C2                         u2365 7366  
                       u2285 71D6                         u1830 5778                         u2455 75F0  
                       u2375 738C                         u2295 71FC                         _PIE1 000F9D  
                       u1905 64CA                         u2465 761E                         u2385 73B2  
                       u1906 64D0                         u1915 658A                         u1907 64DE  
                       u1916 6590                         u1844 60C0                         u1925 663A  
                       u1917 659E                         u1845 60BA                         u1926 6640  
                       u1927 664E                         u2567 68DA                         u2577 765C  
                       u2587 7692                         u1884 6302                         u1885 62FC  
                       u2597 578E                         u1895 641A                         u1896 6420  
                       u1897 642E                         _data 009E                         _main 6828  
                       fsr1h 000FE2                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0002  
         __size_of_LCDUpdate 008A                  LCDSend@data 0008              __end_of_BusyADC 577C  
                _Delay10TCYx 578A              __end_of_OpenADC 59A4             __end_of_LCDChrXY 5F22  
           __end_of_LCDClear 585E                        ?_main 0001              __end_of___awdiv 5D0C  
            ___awdiv@divisor 0009              __end_of___lwdiv 59F6              __end_of___lwmod 590C  
            ___awdiv@counter 000B                        _TRISC 000F94                        _Delay 57AC  
        ___lmul@multiplicand 0005              __end_of_fix_fft 6828              __end_of_dpowers 7FF5  
                      _input 005F                        _setup 5BD8                        main@i 00D1  
                      main@k 00CF                   _ConvertADC 576C                        tablat 000FF5  
                      status 000FD8              __end_of_sprintf 609C                main@adc_value 00C5  
                 _FontLookup 7CBF               __CFG_PBADEN$ON 000000              __initialization 590C  
               __end_of_main 76BE      __size_of_Initialize_SPI 0002                   _Open1USART 5AF6  
           __end_of_OpenSPI1 5AF6                       ??_main 004D                __activetblptr 000002  
               fix_fft@istep 0023                    ??_LCDInit 000D                    ??_LCDSend 0008  
          __end_of_LCDUpdate 5BD8                       ?_Delay 0001             __end_of_Sinewave 7CBF  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
                     _ADRESH 000FC4                       _ADRESL 000FC3             ___awdiv@dividend 0007  
                     ?_setup 0001                       _ANSELC 000F3A                       Delay@a 0001  
                     _LCDStr 5892               __CFG_WDTEN$OFF 000000                       _RCSTA1 000FAB  
                     _SPBRG1 000FAF                    ??_BusyADC 0001                       _TXREG1 000FAD  
                     _TXSTA1 000FAC                    ??_OpenADC 0003             OpenSPI1@bus_mode 0001  
                     ___lmul 5A4A                       ___wmul 580A                    ??___awdiv 000B  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 5914  
                     clear_1 5928                       clear_2 593A             ___awdiv@quotient 000D  
           __end_of_sendChar 578A                    ??_fix_fft 0013                 __mediumconst 76BE  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_sprintf 0019                  ?_ConvertADC 0001            _imaginary_numbers 0100  
                  ?_LCDChrXY 000D                    ?_LCDClear 0001                    LCDChrXY@i 0016  
                  LCDChrXY@x 0013                    LCDChrXY@y 000D                   __accesstop 0060  
    __end_of__initialization 594C                    LCDClear@i 0001           __size_of_WriteSPI1 001E  
                  LCDSend@cd 0007                __end_of_Delay 57C6               __pcstackCOMRAM 0001  
                  LCDStr@inv 001C                    LCDStr@row 001D                __end_of_setup 5C68  
         _growl_prob_weights 7F31                  ?_Open1USART 0001                      ??_Delay 0005  
              ?_sendIntArray 0003                      ??_setup 000D                   __pbssBANK0 0060  
                 __pbssBANK1 0100                      ?_LCDStr 001A             WriteSPI1@TempVar 0001  
                 ??_LCDChrXY 000F                   ??_LCDClear 0001              __CFG_PLLCFG$OFF 000000  
              ??_Write1USART 0001                      LCDStr@x 001E                   _alarm_prob 00A7  
                  ?_OpenSPI1 0001               _Initialize_SPI 576A                      ?___lmul 0001  
               ?_Delay10TCYx 0001                      ?___wmul 0001               ___lmul@product 0009  
        __size_of_ConvertADC 0004                LCDStr@dataPtr 001A            _horn_prob_weights 7F6F  
          __end_of_WriteSPI1 57E4             Open1USART@config 0006                      _LCDInit 5D0C  
                    _LCDSend 57E4               ??_sendIntArray 0007            __CFG_PRICLKEN$OFF 000000  
                    _SPBRGH1 000FB0                      _SSP1BUF 000FC9              __size_of_LCDStr 0038  
        __size_of_Open1USART 0058                      _BusyADC 5770                   ??_OpenSPI1 0003  
                  ?_sendChar 0001       __end_of_Initialize_SPI 576C                      _OpenADC 5956  
                    __Hparam 0000                      __Lparam 0000          _scream_prob_weights 7FAD  
        __end_of_Write1USART 57AC                      ___awdiv 5C68              __size_of___lmul 0056  
            __size_of___wmul 0026                      ___lwdiv 59A4                      ___lwmod 58CA  
  __end_of_horn_prob_weights 7FAD                      __pcinit 590C              Delay10TCYx@unit 0001  
                    __ramtop 0600                      __ptext0 6828                      __ptext1 59F6  
                    __ptext2 5F22                      __ptext3 59A4                      __ptext4 5C68  
                    __ptext5 5892                      __ptext6 5DC6                      __ptext7 58CA  
                    __ptext8 5BD8                      __ptext9 5AA0                      _fix_fft 609C  
                 _horn_tally 00B1                      _dpowers 7FEB                      _guesses 00BB  
                 _growl_prob 00AB               OpenADC@config2 0001               OpenADC@config3 0002  
                    _sprintf 5F22                    _LCDUpdate 5B4E         end_of_initialization 594C  
              __Lmediumconst 76BE            OpenSPI1@smp_phase 0002                   ??_sendChar 0002  
            ?_Initialize_SPI 0001                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
          OpenSPI1@sync_mode 0003            sendIntArray@array 0003             __CFG_FOSC$INTIO7 000000  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISCbits 000F94  
                 LCDChrXY@ch 000E                   ?_LCDUpdate 0001                 ??_ConvertADC 0001  
                _Write1USART 579A               __end_of_LCDStr 58CA            __size_of_LCDChrXY 015C  
          __size_of_LCDClear 002E         __end_of_sendIntArray 5892                    _LcdMemIdx 005A  
                  _LcdMemory 0200               _oldRealNumbers 0060                   _writeGuess 59F6  
             __end_of___lmul 5AA0                   LCDUpdate@x 0009                   LCDUpdate@y 000B  
             __end_of___wmul 5830         __size_of_Delay10TCYx 0010                 ??_Open1USART 0003  
         __end_of_ConvertADC 5770          start_initialization 590C           __end_of_FontLookup 7EF3  
                   ??_LCDStr 001D           __end_of_Open1USART 5B4E            __size_of_OpenSPI1 0056  
                   ??___lmul 0009                     ??___wmul 0005            writeGuess@percent 0029  
                   ?_LCDInit 0001                     ?_LCDSend 0007                  __pbssBIGRAM 0200  
                __pbssCOMRAM 005A                __pcstackBANK0 00C5                    _WriteSPI1 57C6  
        __end_of__stringdata 7FFE                  ??_LCDUpdate 0009                  _alarm_tally 00A9  
                sprintf@_val 001F                  sprintf@flag 001B                  sprintf@prec 001C  
                  _baud_rate 00A3                     ?_BusyADC 0001            WriteSPI1@data_out 0002  
                   ?_OpenADC 0001             ___lwdiv@dividend 0001            __size_of_sendChar 000E  
              __pmediumconst 76BE                     ?___awdiv 0007                     ?___lwdiv 0001  
                   ?___lwmod 0008                  ?_writeGuess 0025              Open1USART@spbrg 0001  
 __end_of_alarm_prob_weights 7F31                     ?_fix_fft 000D               __size_of_Delay 001A  
                 ?_WriteSPI1 0001             ___lwdiv@quotient 0005                    _max_tally 00B3  
                   ?_sprintf 000F              Write1USART@data 0001               __size_of_setup 0090  
                  _horn_prob 00AF             ??_Initialize_SPI 0001                     _LCDChrXY 5DC6  
               _real_numbers 0180                     _LCDClear 5830        __size_of_sendIntArray 0034  
             ___wmul@product 0005                OpenADC@config 0005                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     _PIR1bits 000F9E  
                   _SSP1CON1 000FC6                     _SSP1STAT 000FC7             sendIntArray@size 0005  
                 _ADCON0bits 000FC2                  __stringdata 7FF5            ___wmul@multiplier 0001  
                  main@place 00CB             __size_of_LCDInit 00BA             __size_of_LCDSend 0026  
               _sendIntArray 585E                    fix_fft@fi 000F                    fix_fft@fr 000D  
                  fix_fft@nn 001F                    fix_fft@qi 0029                    fix_fft@mr 003D  
                  fix_fft@ti 0035                    fix_fft@qr 0027                    fix_fft@wi 002D  
                  fix_fft@tr 0033                    fix_fft@wr 002B            ___lmul@multiplier 0001  
        __size_of_writeGuess 0054                 ?_Write1USART 0001                     _OpenSPI1 5AA0  
           __size_of_BusyADC 000C                     __Hrparam 0000             __size_of_OpenADC 004E  
                   __Lrparam 0000                     _Sinewave 76BF             __size_of___awdiv 00A4  
           __size_of___lwdiv 0052             __size_of___lwmod 0042  __end_of_scream_prob_weights 7FEB  
                 _ANSELAbits 000F38                 _scream_tally 00B7             __size_of_fix_fft 078C  
                ??_WriteSPI1 0001              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 5956                     __ptext11 5AF6                     __ptext20 57AC  
                   __ptext12 5D0C                     __ptext21 585E                     __ptext13 5B4E  
                   __ptext22 577C                     __ptext14 580A                     __ptext23 579A  
                   __ptext15 57E4                     __ptext24 609C                     __ptext16 57C6  
                   __ptext25 5A4A                     __ptext17 578A                     __ptext26 576C  
                   __ptext18 5830                     __ptext27 5770                     __ptext19 576A  
               _SSP1CON1bits 000FC6             __size_of_sprintf 017A                  _OSCCON2bits 000FD2  
              __size_of_main 0E96                     _sendChar 577C                  _growl_tally 00AD  
              ??_Delay10TCYx 0001                 _SSP1STATbits 000FC7                     main@root 00C7  
                   fix_fft@b 0037                     fix_fft@c 0049                     fix_fft@i 0039  
                   fix_fft@j 0045                     fix_fft@k 001B                     fix_fft@l 0041  
                   fix_fft@m 0011                     fix_fft@n 002F                _USART1_Status 005E  
                _OSCTUNEbits 000F9B                   _INTCONbits 000FF2              writeGuess@guess 0031  
                _scream_prob 00B5                    sprintf@ap 001D                    sprintf@sp 000F  
           ___lwmod@dividend 0008                   _RCSTA1bits 000FAB                   _OSCCONbits 000FD3  
               ??_writeGuess 0029               writeGuess@prob 0025          __end_of_Delay10TCYx 579A  
                   sprintf@c 0024                     sprintf@f 0011              ___lwmod@divisor 000A  
            ___lwmod@counter 000C            LCDChrXY@mid_shift 0014                writeGuess@row 0027  
         _alarm_prob_weights 7EF3           __end_of_writeGuess 5A4A            sendChar@character 0002  
 __end_of_growl_prob_weights 7F6F         __size_of_Write1USART 0012               LCDChrXY@offset 0011  
              LCDChrXY@index 0018  
